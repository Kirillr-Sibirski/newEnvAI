[{"C:\\Users\\kiril\\Desktop\\newenvai\\client\\src\\index.js":"1","C:\\Users\\kiril\\Desktop\\newenvai\\client\\src\\App.js":"2","C:\\Users\\kiril\\Desktop\\newenvai\\client\\src\\reportWebVitals.js":"3","C:\\Users\\kiril\\Desktop\\newenvai\\client\\src\\pages\\Home.jsx":"4","C:\\Users\\kiril\\Desktop\\newenvai\\client\\src\\pages\\NoPage.jsx":"5","C:\\Users\\kiril\\Desktop\\newenvai\\client\\src\\pages\\Image.jsx":"6","C:\\Users\\kiril\\Desktop\\newenvai\\client\\src\\pages\\Mint.jsx":"7","C:\\Users\\kiril\\Desktop\\newenvai\\client\\src\\pages\\Animals.js":"8"},{"size":532,"mtime":1656745739552,"results":"9","hashOfConfig":"10"},{"size":769,"mtime":1656756369508,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":1656688413314,"results":"12","hashOfConfig":"10"},{"size":2166,"mtime":1656774794534,"results":"13","hashOfConfig":"10"},{"size":134,"mtime":1656688973170,"results":"14","hashOfConfig":"10"},{"size":5244,"mtime":1657354809156,"results":"15","hashOfConfig":"10"},{"size":155,"mtime":1656746857963,"results":"16","hashOfConfig":"10"},{"size":8845,"mtime":1657116026912,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"tggc38",{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\kiril\\Desktop\\newenvai\\client\\src\\index.js",[],[],"C:\\Users\\kiril\\Desktop\\newenvai\\client\\src\\App.js",[],[],"C:\\Users\\kiril\\Desktop\\newenvai\\client\\src\\reportWebVitals.js",[],[],"C:\\Users\\kiril\\Desktop\\newenvai\\client\\src\\pages\\Home.jsx",["45","46","47"],[],"import React, { useState } from 'react';\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { Route, Redirect } from 'react-router'\r\n\r\nexport var wallet_address = null; // To use on other pages\r\n\r\nfunction Home() {\r\n    const [errorMessage, setErrorMessage] = useState(null);\r\n\tconst [connButtonText, setConnButtonText] = useState('Connect Wallet');\r\n\r\n\tconst connectWalletHandler = () => {\r\n\t\tif (window.ethereum && window.ethereum.isMetaMask) {\r\n\t\t\twindow.ethereum.request({ method: 'eth_requestAccounts'})\r\n\t\t\t.then(result => {\r\n\t\t\t\taccountChangedHandler(result[0]);\r\n\t\t\t\tsetConnButtonText('Wallet Connected');\r\n                window.location.href = '/image'; // Redirect to image generation page \r\n                setErrorMessage()\r\n\t\t\t})\r\n\t\t\t.catch(error => {\r\n\t\t\t\tsetErrorMessage(error.message);\r\n\t\t\t});\r\n\r\n\t\t} else {\r\n\t\t\tconsole.log('Need to install MetaMask');\r\n\t\t\tsetErrorMessage('Please install MetaMask browser extension to interact');\r\n\t\t}\r\n\t}\r\n\r\n\t// update account, will cause component re-render\r\n\tconst accountChangedHandler = (newAccount) => {\r\n        wallet_address = newAccount;\r\n\t}\r\n\r\n\tconst chainChangedHandler = () => {\r\n\t\t// reload the page to avoid any errors with chain change mid use of application\r\n\t\twindow.location.reload();\r\n\t}\r\n\r\n\r\n\t// listen for account changes\r\n\twindow.ethereum.on('accountsChanged', accountChangedHandler);\r\n\r\n\twindow.ethereum.on('chainChanged', chainChangedHandler);\r\n    return (\r\n        <div>\r\n            <p style={{ fontSize: 14 }} className=\"m-2\">With NewEnvAI people can freely mint dynamic animal NFTs which represent real environmental data.\r\n               The uniqueness of this project is determined by the usage of DALL-E neural network which allows users to create any images by just writing a description of it (e.g. bear in river)!\r\n               There are 3 stages of NFTs: 'bad', 'neutral' and 'good' that will change accordingly to the data provided by an oracle from environmental API.</p>\r\n            <button onClick={connectWalletHandler} className=\"btn btn-secondary btn-sm m-2\">{connButtonText}</button>\r\n            {errorMessage}\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Home;","C:\\Users\\kiril\\Desktop\\newenvai\\client\\src\\pages\\NoPage.jsx",[],[],"C:\\Users\\kiril\\Desktop\\newenvai\\client\\src\\pages\\Image.jsx",["48"],[],"import React, { useState, useEffect } from 'react';\r\nimport { animalText } from './Animals';\r\n\r\n// Housekeeping for openAI\r\nconst { Configuration, OpenAIApi } = require(\"openai\");\r\nconst configuration = new Configuration({\r\n  apiKey: process.env.REACT_APP_OPENAI_API_KEY,\r\n});\r\nconst openai = new OpenAIApi(configuration);\r\n\r\nlet errors;\r\n\r\n// Send 3 requests to DALL-E mini with descriptions\r\nasync function generate_images(neutral, positive, negative) {\r\n  errors(\"AI: Image generation in progress..\")\r\n  // Send request to replicate.com API to generate images\r\n}\r\n\r\nasync function generate_description(desc, good, bad) {\r\n  // Make input sentence more creative & interesting\r\n  const description = await openai.createCompletion({\r\n    model: \"text-davinci-002\",\r\n    prompt: \"Create sentence with\"+desc,\r\n    max_tokens: 20,\r\n    temperature: 0.6,\r\n  });\r\n  // Generate sentences with description and adjectives using openAI's Generation\r\n  const adj_positive = await openai.createCompletion({\r\n    model: \"text-davinci-002\",\r\n    prompt: \"Add adjectives \"+good+\"to sentence \"+desc,\r\n    max_tokens: 20,\r\n    temperature: 0.4,\r\n  });\r\n  // Generate sentences with description and adjectives using openAI's Generation\r\n  const adj_negative = await openai.createCompletion({\r\n    model: \"text-davinci-002\",\r\n    prompt: \"Add adjectives \"+bad+\"to sentence \"+desc,\r\n    max_tokens: 20,\r\n    temperature: 0.4,\r\n  });\r\n  console.log(description.data.choices[0].text, adj_positive.data.choices[0].text, adj_negative.data.choices[0].text)\r\n  generate_images(description.data.choices[0].text, adj_positive.data.choices[0].text, adj_negative.data.choices[0].text);\r\n}\r\n// Check adjectives + description with sentiment analysis for positive, neutral or negative using openAI's Classification\r\nasync function sentiment_analysis(desc, good, bad) {\r\n    // Generate sentences with description and adjectives using openAI's Generation\r\n    const response = await openai.createCompletion({\r\n      model: \"text-davinci-002\",\r\n      prompt: \"Classify the sentiment in these words: \\n 1. '\"+desc+\"'\\n 2. '\"+good+\"'\\n 3. '\"+bad+\"'\",\r\n      max_tokens: 40,\r\n      temperature: 0,\r\n    });\r\n    const originalText = response.data.choices[0].text.toLocaleLowerCase();\r\n    let rspList = originalText.split('\\n');\r\n    let substrings = [\"positive\", \"neutral\", \"negative\"];\r\n    // This checks if user response match with intended response\r\n    if(rspList[2].includes(substrings[1]) && rspList[3].includes(substrings[0]) && rspList[4].includes(substrings[2])) {\r\n      // if ok execute the rest\r\n      errors(\"AI: Description generation in progress..\")\r\n      generate_description(desc, good, bad);\r\n    }\r\n    else { \r\n      errors(\"AI: Hm.. First input must be neutral, second input must be positive, third input must be negative. Am I goin' crazy?\")\r\n    }\r\n}\r\n// Check 'desc' sentence for containing animal vocabulary \r\nasync function animalVocab(desc, good, bad){\r\n    for(var y = 0; y < animalText.length; y++) { // loops through all the list\r\n      if(desc.includes(animalText[y].toLocaleLowerCase())) { // if animal is found\r\n        errors(\"AI: Sentiment analysis in progress..\") // Checks if text is positive, neutral or negative\r\n        sentiment_analysis(desc, good, bad)\r\n        break;\r\n      }\r\n      else {\r\n        errors(\"AI: I don't know such an animal, pls change your description.\")\r\n      }\r\n    }\r\n}\r\n\r\nfunction Image() {\r\n    const [desc, setDesc] = useState(\"\");\r\n    const [good, setGood] = useState(\"\");\r\n    const [bad, setBad] = useState(\"\");\r\n    const [errorMessage, setErrorMessage] = useState(null);\r\n  \r\n    useEffect(() => {\r\n      /* Assign update to outside variable */\r\n      errors = setErrorMessage\r\n  \r\n      /* Unassign when component unmounts */\r\n      return () => errors = null\r\n    })\r\n    useEffect(() => {\r\n      fetch(\"/api\")\r\n        .then((res) => res.json())\r\n        .then((data) => console.log(data.message));\r\n    }, []);\r\n    const handleSubmit = (event) => {\r\n      event.preventDefault();\r\n      \r\n      setErrorMessage(\"AI: Checking description for 'animals'..\")\r\n      animalVocab(desc.toLocaleLowerCase(), good.toLocaleLowerCase(), bad.toLocaleLowerCase());\r\n      }\r\n    return (\r\n        <div>\r\n            <h1>Image Generation</h1>\r\n            <form onSubmit={handleSubmit}>\r\n            <div><label>Description:&nbsp;\r\n                <input \r\n                type=\"text\" \r\n                value={desc}\r\n                onChange={(e) => setDesc(e.target.value)}\r\n                />\r\n            </label></div>\r\n            <div><label>Write adjectives to describe 'good' state of NFT:&nbsp;\r\n                <input \r\n                type=\"text\" \r\n                value={good}\r\n                onChange={(e) => setGood(e.target.value)}\r\n                />\r\n            </label></div>\r\n            <div><label>Write adjectives to describe 'bad' state of NFT:&nbsp;\r\n                <input \r\n                type=\"text\" \r\n                value={bad}\r\n                onChange={(e) => setBad(e.target.value)}\r\n                />\r\n            </label></div>\r\n            <input type=\"submit\" />\r\n            </form>\r\n            <h3>{errorMessage}</h3>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Image;","C:\\Users\\kiril\\Desktop\\newenvai\\client\\src\\pages\\Mint.jsx",["49"],[],"import React, { wallet_address } from 'react';\r\n\r\nfunction Mint() {\r\n    return (\r\n        <h1>this is the Mintpage</h1>\r\n    );\r\n}\r\n\r\nexport default Mint;","C:\\Users\\kiril\\Desktop\\newenvai\\client\\src\\pages\\Animals.js",[],[],{"ruleId":"50","severity":1,"message":"51","line":2,"column":10,"nodeType":"52","messageId":"53","endLine":2,"endColumn":18},{"ruleId":"50","severity":1,"message":"54","line":3,"column":10,"nodeType":"52","messageId":"53","endLine":3,"endColumn":15},{"ruleId":"50","severity":1,"message":"55","line":3,"column":17,"nodeType":"52","messageId":"53","endLine":3,"endColumn":25},{"ruleId":"56","severity":1,"message":"57","line":86,"column":5,"nodeType":"52","endLine":86,"endColumn":14,"suggestions":"58"},{"ruleId":"50","severity":1,"message":"59","line":1,"column":17,"nodeType":"52","messageId":"53","endLine":1,"endColumn":31},"no-unused-vars","'Navigate' is defined but never used.","Identifier","unusedVar","'Route' is defined but never used.","'Redirect' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setErrorMessage'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [] as a second argument to the useEffect Hook.",["60"],"'wallet_address' is defined but never used.",{"desc":"61","fix":"62"},"Add dependencies array: []",{"range":"63","text":"64"},[3808,3808],", []"]