{"ast":null,"code":"\"use strict\";\n/**\n *  BigNumber\n *\n *  A wrapper around the BN.js object. We use the BN.js library\n *  because it is used by elliptic, so it is required regardless.\n *\n */\n\nimport _classCallCheck from \"C:/Users/kiril/Desktop/newenvai/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/kiril/Desktop/newenvai/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _BN from \"bn.js\";\nvar BN = _BN.BN;\nimport { hexlify, isBytes, isHexString } from \"@ethersproject/bytes\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nvar _constructorGuard = {};\nvar MAX_SAFE = 0x1fffffffffffff;\nexport function isBigNumberish(value) {\n  return value != null && (BigNumber.isBigNumber(value) || typeof value === \"number\" && value % 1 === 0 || typeof value === \"string\" && !!value.match(/^-?[0-9]+$/) || isHexString(value) || typeof value === \"bigint\" || isBytes(value));\n} // Only warn about passing 10 into radix once\n\nvar _warnedToStringRadix = false;\nexport var BigNumber = /*#__PURE__*/function () {\n  function BigNumber(constructorGuard, hex) {\n    _classCallCheck(this, BigNumber);\n\n    if (constructorGuard !== _constructorGuard) {\n      logger.throwError(\"cannot call constructor directly; use BigNumber.from\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"new (BigNumber)\"\n      });\n    }\n\n    this._hex = hex;\n    this._isBigNumber = true;\n    Object.freeze(this);\n  }\n\n  _createClass(BigNumber, [{\n    key: \"fromTwos\",\n    value: function fromTwos(value) {\n      return toBigNumber(toBN(this).fromTwos(value));\n    }\n  }, {\n    key: \"toTwos\",\n    value: function toTwos(value) {\n      return toBigNumber(toBN(this).toTwos(value));\n    }\n  }, {\n    key: \"abs\",\n    value: function abs() {\n      if (this._hex[0] === \"-\") {\n        return BigNumber.from(this._hex.substring(1));\n      }\n\n      return this;\n    }\n  }, {\n    key: \"add\",\n    value: function add(other) {\n      return toBigNumber(toBN(this).add(toBN(other)));\n    }\n  }, {\n    key: \"sub\",\n    value: function sub(other) {\n      return toBigNumber(toBN(this).sub(toBN(other)));\n    }\n  }, {\n    key: \"div\",\n    value: function div(other) {\n      var o = BigNumber.from(other);\n\n      if (o.isZero()) {\n        throwFault(\"division-by-zero\", \"div\");\n      }\n\n      return toBigNumber(toBN(this).div(toBN(other)));\n    }\n  }, {\n    key: \"mul\",\n    value: function mul(other) {\n      return toBigNumber(toBN(this).mul(toBN(other)));\n    }\n  }, {\n    key: \"mod\",\n    value: function mod(other) {\n      var value = toBN(other);\n\n      if (value.isNeg()) {\n        throwFault(\"division-by-zero\", \"mod\");\n      }\n\n      return toBigNumber(toBN(this).umod(value));\n    }\n  }, {\n    key: \"pow\",\n    value: function pow(other) {\n      var value = toBN(other);\n\n      if (value.isNeg()) {\n        throwFault(\"negative-power\", \"pow\");\n      }\n\n      return toBigNumber(toBN(this).pow(value));\n    }\n  }, {\n    key: \"and\",\n    value: function and(other) {\n      var value = toBN(other);\n\n      if (this.isNegative() || value.isNeg()) {\n        throwFault(\"unbound-bitwise-result\", \"and\");\n      }\n\n      return toBigNumber(toBN(this).and(value));\n    }\n  }, {\n    key: \"or\",\n    value: function or(other) {\n      var value = toBN(other);\n\n      if (this.isNegative() || value.isNeg()) {\n        throwFault(\"unbound-bitwise-result\", \"or\");\n      }\n\n      return toBigNumber(toBN(this).or(value));\n    }\n  }, {\n    key: \"xor\",\n    value: function xor(other) {\n      var value = toBN(other);\n\n      if (this.isNegative() || value.isNeg()) {\n        throwFault(\"unbound-bitwise-result\", \"xor\");\n      }\n\n      return toBigNumber(toBN(this).xor(value));\n    }\n  }, {\n    key: \"mask\",\n    value: function mask(value) {\n      if (this.isNegative() || value < 0) {\n        throwFault(\"negative-width\", \"mask\");\n      }\n\n      return toBigNumber(toBN(this).maskn(value));\n    }\n  }, {\n    key: \"shl\",\n    value: function shl(value) {\n      if (this.isNegative() || value < 0) {\n        throwFault(\"negative-width\", \"shl\");\n      }\n\n      return toBigNumber(toBN(this).shln(value));\n    }\n  }, {\n    key: \"shr\",\n    value: function shr(value) {\n      if (this.isNegative() || value < 0) {\n        throwFault(\"negative-width\", \"shr\");\n      }\n\n      return toBigNumber(toBN(this).shrn(value));\n    }\n  }, {\n    key: \"eq\",\n    value: function eq(other) {\n      return toBN(this).eq(toBN(other));\n    }\n  }, {\n    key: \"lt\",\n    value: function lt(other) {\n      return toBN(this).lt(toBN(other));\n    }\n  }, {\n    key: \"lte\",\n    value: function lte(other) {\n      return toBN(this).lte(toBN(other));\n    }\n  }, {\n    key: \"gt\",\n    value: function gt(other) {\n      return toBN(this).gt(toBN(other));\n    }\n  }, {\n    key: \"gte\",\n    value: function gte(other) {\n      return toBN(this).gte(toBN(other));\n    }\n  }, {\n    key: \"isNegative\",\n    value: function isNegative() {\n      return this._hex[0] === \"-\";\n    }\n  }, {\n    key: \"isZero\",\n    value: function isZero() {\n      return toBN(this).isZero();\n    }\n  }, {\n    key: \"toNumber\",\n    value: function toNumber() {\n      try {\n        return toBN(this).toNumber();\n      } catch (error) {\n        throwFault(\"overflow\", \"toNumber\", this.toString());\n      }\n\n      return null;\n    }\n  }, {\n    key: \"toBigInt\",\n    value: function toBigInt() {\n      try {\n        return BigInt(this.toString());\n      } catch (e) {}\n\n      return logger.throwError(\"this platform does not support BigInt\", Logger.errors.UNSUPPORTED_OPERATION, {\n        value: this.toString()\n      });\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      // Lots of people expect this, which we do not support, so check (See: #889)\n      if (arguments.length > 0) {\n        if (arguments[0] === 10) {\n          if (!_warnedToStringRadix) {\n            _warnedToStringRadix = true;\n            logger.warn(\"BigNumber.toString does not accept any parameters; base-10 is assumed\");\n          }\n        } else if (arguments[0] === 16) {\n          logger.throwError(\"BigNumber.toString does not accept any parameters; use bigNumber.toHexString()\", Logger.errors.UNEXPECTED_ARGUMENT, {});\n        } else {\n          logger.throwError(\"BigNumber.toString does not accept parameters\", Logger.errors.UNEXPECTED_ARGUMENT, {});\n        }\n      }\n\n      return toBN(this).toString(10);\n    }\n  }, {\n    key: \"toHexString\",\n    value: function toHexString() {\n      return this._hex;\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON(key) {\n      return {\n        type: \"BigNumber\",\n        hex: this.toHexString()\n      };\n    }\n  }], [{\n    key: \"from\",\n    value: function from(value) {\n      if (value instanceof BigNumber) {\n        return value;\n      }\n\n      if (typeof value === \"string\") {\n        if (value.match(/^-?0x[0-9a-f]+$/i)) {\n          return new BigNumber(_constructorGuard, toHex(value));\n        }\n\n        if (value.match(/^-?[0-9]+$/)) {\n          return new BigNumber(_constructorGuard, toHex(new BN(value)));\n        }\n\n        return logger.throwArgumentError(\"invalid BigNumber string\", \"value\", value);\n      }\n\n      if (typeof value === \"number\") {\n        if (value % 1) {\n          throwFault(\"underflow\", \"BigNumber.from\", value);\n        }\n\n        if (value >= MAX_SAFE || value <= -MAX_SAFE) {\n          throwFault(\"overflow\", \"BigNumber.from\", value);\n        }\n\n        return BigNumber.from(String(value));\n      }\n\n      var anyValue = value;\n\n      if (typeof anyValue === \"bigint\") {\n        return BigNumber.from(anyValue.toString());\n      }\n\n      if (isBytes(anyValue)) {\n        return BigNumber.from(hexlify(anyValue));\n      }\n\n      if (anyValue) {\n        // Hexable interface (takes priority)\n        if (anyValue.toHexString) {\n          var hex = anyValue.toHexString();\n\n          if (typeof hex === \"string\") {\n            return BigNumber.from(hex);\n          }\n        } else {\n          // For now, handle legacy JSON-ified values (goes away in v6)\n          var _hex = anyValue._hex; // New-form JSON\n\n          if (_hex == null && anyValue.type === \"BigNumber\") {\n            _hex = anyValue.hex;\n          }\n\n          if (typeof _hex === \"string\") {\n            if (isHexString(_hex) || _hex[0] === \"-\" && isHexString(_hex.substring(1))) {\n              return BigNumber.from(_hex);\n            }\n          }\n        }\n      }\n\n      return logger.throwArgumentError(\"invalid BigNumber value\", \"value\", value);\n    }\n  }, {\n    key: \"isBigNumber\",\n    value: function isBigNumber(value) {\n      return !!(value && value._isBigNumber);\n    }\n  }]);\n\n  return BigNumber;\n}(); // Normalize the hex string\n\nfunction toHex(value) {\n  // For BN, call on the hex string\n  if (typeof value !== \"string\") {\n    return toHex(value.toString(16));\n  } // If negative, prepend the negative sign to the normalized positive value\n\n\n  if (value[0] === \"-\") {\n    // Strip off the negative sign\n    value = value.substring(1); // Cannot have multiple negative signs (e.g. \"--0x04\")\n\n    if (value[0] === \"-\") {\n      logger.throwArgumentError(\"invalid hex\", \"value\", value);\n    } // Call toHex on the positive component\n\n\n    value = toHex(value); // Do not allow \"-0x00\"\n\n    if (value === \"0x00\") {\n      return value;\n    } // Negate the value\n\n\n    return \"-\" + value;\n  } // Add a \"0x\" prefix if missing\n\n\n  if (value.substring(0, 2) !== \"0x\") {\n    value = \"0x\" + value;\n  } // Normalize zero\n\n\n  if (value === \"0x\") {\n    return \"0x00\";\n  } // Make the string even length\n\n\n  if (value.length % 2) {\n    value = \"0x0\" + value.substring(2);\n  } // Trim to smallest even-length string\n\n\n  while (value.length > 4 && value.substring(0, 4) === \"0x00\") {\n    value = \"0x\" + value.substring(4);\n  }\n\n  return value;\n}\n\nfunction toBigNumber(value) {\n  return BigNumber.from(toHex(value));\n}\n\nfunction toBN(value) {\n  var hex = BigNumber.from(value).toHexString();\n\n  if (hex[0] === \"-\") {\n    return new BN(\"-\" + hex.substring(3), 16);\n  }\n\n  return new BN(hex.substring(2), 16);\n}\n\nfunction throwFault(fault, operation, value) {\n  var params = {\n    fault: fault,\n    operation: operation\n  };\n\n  if (value != null) {\n    params.value = value;\n  }\n\n  return logger.throwError(fault, Logger.errors.NUMERIC_FAULT, params);\n} // value should have no prefix\n\n\nexport function _base36To16(value) {\n  return new BN(value, 36).toString(16);\n} // value should have no prefix\n\nexport function _base16To36(value) {\n  return new BN(value, 16).toString(36);\n}","map":{"version":3,"mappings":"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","names":["_BN","BN","hexlify","isBytes","isHexString","Logger","version","logger","_constructorGuard","MAX_SAFE","isBigNumberish","value","BigNumber","isBigNumber","match","_warnedToStringRadix","constructorGuard","hex","throwError","errors","UNSUPPORTED_OPERATION","operation","_hex","_isBigNumber","Object","freeze","toBigNumber","toBN","fromTwos","toTwos","from","substring","other","add","sub","o","isZero","throwFault","div","mul","isNeg","umod","pow","isNegative","and","or","xor","maskn","shln","shrn","eq","lt","lte","gt","gte","toNumber","error","toString","BigInt","e","arguments","length","warn","UNEXPECTED_ARGUMENT","key","type","toHexString","toHex","throwArgumentError","String","anyValue","fault","params","NUMERIC_FAULT","_base36To16","_base16To36"],"sources":["C:\\Users\\kiril\\Desktop\\newenvai\\client\\node_modules\\@ethersproject\\bignumber\\src.ts\\bignumber.ts"],"sourcesContent":["\"use strict\";\n\n/**\n *  BigNumber\n *\n *  A wrapper around the BN.js object. We use the BN.js library\n *  because it is used by elliptic, so it is required regardless.\n *\n */\n\nimport _BN from \"bn.js\";\nimport BN = _BN.BN;\n\nimport { Bytes, Hexable, hexlify, isBytes, isHexString } from \"@ethersproject/bytes\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nconst _constructorGuard = { };\n\nconst MAX_SAFE = 0x1fffffffffffff;\n\n\nexport type BigNumberish = BigNumber | Bytes | bigint | string | number;\n\nexport function isBigNumberish(value: any): value is BigNumberish {\n    return (value != null) && (\n        BigNumber.isBigNumber(value) ||\n        (typeof(value) === \"number\" && (value % 1) === 0) ||\n        (typeof(value) === \"string\" && !!value.match(/^-?[0-9]+$/)) ||\n        isHexString(value) ||\n        (typeof(value) === \"bigint\") ||\n        isBytes(value)\n    );\n}\n\n// Only warn about passing 10 into radix once\nlet _warnedToStringRadix = false;\n\nexport class BigNumber implements Hexable {\n    readonly _hex: string;\n    readonly _isBigNumber: boolean;\n\n    constructor(constructorGuard: any, hex: string) {\n        if (constructorGuard !== _constructorGuard) {\n            logger.throwError(\"cannot call constructor directly; use BigNumber.from\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"new (BigNumber)\"\n            });\n        }\n\n        this._hex = hex;\n        this._isBigNumber = true;\n\n        Object.freeze(this);\n    }\n\n    fromTwos(value: number): BigNumber {\n        return toBigNumber(toBN(this).fromTwos(value));\n    }\n\n    toTwos(value: number): BigNumber {\n        return toBigNumber(toBN(this).toTwos(value));\n    }\n\n    abs(): BigNumber {\n        if (this._hex[0] === \"-\") {\n            return BigNumber.from(this._hex.substring(1));\n        }\n        return this;\n    }\n\n    add(other: BigNumberish): BigNumber {\n        return toBigNumber(toBN(this).add(toBN(other)));\n    }\n\n    sub(other: BigNumberish): BigNumber {\n        return toBigNumber(toBN(this).sub(toBN(other)));\n    }\n\n    div(other: BigNumberish): BigNumber {\n        const o = BigNumber.from(other);\n        if (o.isZero()) {\n            throwFault(\"division-by-zero\", \"div\");\n        }\n        return toBigNumber(toBN(this).div(toBN(other)));\n    }\n\n    mul(other: BigNumberish): BigNumber {\n        return toBigNumber(toBN(this).mul(toBN(other)));\n    }\n\n    mod(other: BigNumberish): BigNumber {\n        const value = toBN(other);\n        if (value.isNeg()) {\n            throwFault(\"division-by-zero\", \"mod\");\n        }\n        return toBigNumber(toBN(this).umod(value));\n    }\n\n    pow(other: BigNumberish): BigNumber {\n        const value = toBN(other);\n        if (value.isNeg()) {\n            throwFault(\"negative-power\", \"pow\");\n        }\n        return toBigNumber(toBN(this).pow(value));\n    }\n\n    and(other: BigNumberish): BigNumber {\n        const value = toBN(other);\n        if (this.isNegative() || value.isNeg()) {\n            throwFault(\"unbound-bitwise-result\", \"and\");\n        }\n        return toBigNumber(toBN(this).and(value));\n    }\n\n    or(other: BigNumberish): BigNumber {\n        const value = toBN(other);\n        if (this.isNegative() || value.isNeg()) {\n            throwFault(\"unbound-bitwise-result\", \"or\");\n        }\n        return toBigNumber(toBN(this).or(value));\n    }\n\n    xor(other: BigNumberish): BigNumber {\n        const value = toBN(other);\n        if (this.isNegative() || value.isNeg()) {\n            throwFault(\"unbound-bitwise-result\", \"xor\");\n        }\n        return toBigNumber(toBN(this).xor(value));\n    }\n\n    mask(value: number): BigNumber {\n        if (this.isNegative() || value < 0) {\n            throwFault(\"negative-width\", \"mask\");\n        }\n        return toBigNumber(toBN(this).maskn(value));\n    }\n\n    shl(value: number): BigNumber {\n        if (this.isNegative() || value < 0) {\n            throwFault(\"negative-width\", \"shl\");\n        }\n        return toBigNumber(toBN(this).shln(value));\n    }\n\n    shr(value: number): BigNumber {\n        if (this.isNegative() || value < 0) {\n            throwFault(\"negative-width\", \"shr\");\n        }\n        return toBigNumber(toBN(this).shrn(value));\n    }\n\n    eq(other: BigNumberish): boolean {\n        return toBN(this).eq(toBN(other));\n    }\n\n    lt(other: BigNumberish): boolean {\n        return toBN(this).lt(toBN(other));\n    }\n\n    lte(other: BigNumberish): boolean {\n        return toBN(this).lte(toBN(other));\n    }\n\n    gt(other: BigNumberish): boolean {\n        return toBN(this).gt(toBN(other));\n   }\n\n    gte(other: BigNumberish): boolean {\n        return toBN(this).gte(toBN(other));\n    }\n\n    isNegative(): boolean {\n        return (this._hex[0] === \"-\");\n    }\n\n    isZero(): boolean {\n        return toBN(this).isZero();\n    }\n\n    toNumber(): number {\n        try {\n            return toBN(this).toNumber();\n        } catch (error) {\n            throwFault(\"overflow\", \"toNumber\", this.toString());\n        }\n        return null;\n    }\n\n    toBigInt(): bigint {\n        try {\n            return BigInt(this.toString());\n        } catch (e) { }\n\n        return logger.throwError(\"this platform does not support BigInt\", Logger.errors.UNSUPPORTED_OPERATION, {\n            value: this.toString()\n        });\n    }\n\n    toString(): string {\n        // Lots of people expect this, which we do not support, so check (See: #889)\n        if (arguments.length > 0) {\n            if (arguments[0] === 10) {\n                if (!_warnedToStringRadix) {\n                    _warnedToStringRadix = true;\n                    logger.warn(\"BigNumber.toString does not accept any parameters; base-10 is assumed\");\n                }\n            } else if (arguments[0] === 16) {\n                logger.throwError(\"BigNumber.toString does not accept any parameters; use bigNumber.toHexString()\", Logger.errors.UNEXPECTED_ARGUMENT, { });\n            } else {\n                logger.throwError(\"BigNumber.toString does not accept parameters\", Logger.errors.UNEXPECTED_ARGUMENT, { });\n            }\n        }\n        return toBN(this).toString(10);\n    }\n\n    toHexString(): string {\n        return this._hex;\n    }\n\n    toJSON(key?: string): any {\n        return { type: \"BigNumber\", hex: this.toHexString() };\n    }\n\n    static from(value: any): BigNumber {\n        if (value instanceof BigNumber) { return value; }\n\n        if (typeof(value) === \"string\") {\n            if (value.match(/^-?0x[0-9a-f]+$/i)) {\n                return new BigNumber(_constructorGuard, toHex(value));\n            }\n\n            if (value.match(/^-?[0-9]+$/)) {\n                return new BigNumber(_constructorGuard, toHex(new BN(value)));\n            }\n\n            return logger.throwArgumentError(\"invalid BigNumber string\", \"value\", value);\n        }\n\n        if (typeof(value) === \"number\") {\n            if (value % 1) {\n                throwFault(\"underflow\", \"BigNumber.from\", value);\n            }\n\n            if (value >= MAX_SAFE || value <= -MAX_SAFE) {\n                throwFault(\"overflow\", \"BigNumber.from\", value);\n            }\n\n            return BigNumber.from(String(value));\n        }\n\n        const anyValue = <any>value;\n\n        if (typeof(anyValue) === \"bigint\") {\n            return BigNumber.from(anyValue.toString());\n        }\n\n        if (isBytes(anyValue)) {\n            return BigNumber.from(hexlify(anyValue));\n        }\n\n        if (anyValue) {\n\n            // Hexable interface (takes priority)\n            if (anyValue.toHexString) {\n                const hex = anyValue.toHexString();\n                if (typeof(hex) === \"string\") {\n                    return BigNumber.from(hex);\n                }\n\n            } else {\n                // For now, handle legacy JSON-ified values (goes away in v6)\n                let hex = anyValue._hex;\n\n                // New-form JSON\n                if (hex == null && anyValue.type === \"BigNumber\") {\n                    hex = anyValue.hex;\n                }\n\n                if (typeof(hex) === \"string\") {\n                    if (isHexString(hex) || (hex[0] === \"-\" && isHexString(hex.substring(1)))) {\n                        return BigNumber.from(hex);\n                    }\n                }\n            }\n        }\n\n        return logger.throwArgumentError(\"invalid BigNumber value\", \"value\", value);\n    }\n\n    static isBigNumber(value: any): value is BigNumber {\n        return !!(value && value._isBigNumber);\n    }\n}\n\n// Normalize the hex string\nfunction toHex(value: string | BN): string {\n\n    // For BN, call on the hex string\n    if (typeof(value) !== \"string\") {\n        return toHex(value.toString(16));\n    }\n\n    // If negative, prepend the negative sign to the normalized positive value\n    if (value[0] === \"-\") {\n        // Strip off the negative sign\n        value = value.substring(1);\n\n        // Cannot have multiple negative signs (e.g. \"--0x04\")\n        if (value[0] === \"-\") { logger.throwArgumentError(\"invalid hex\", \"value\", value); }\n\n        // Call toHex on the positive component\n        value = toHex(value);\n\n        // Do not allow \"-0x00\"\n        if (value === \"0x00\") { return value; }\n\n        // Negate the value\n        return \"-\" + value;\n    }\n\n    // Add a \"0x\" prefix if missing\n    if (value.substring(0, 2) !== \"0x\") { value = \"0x\" + value; }\n\n    // Normalize zero\n    if (value === \"0x\") { return \"0x00\"; }\n\n    // Make the string even length\n    if (value.length % 2) { value = \"0x0\" + value.substring(2); }\n\n    // Trim to smallest even-length string\n    while (value.length > 4 && value.substring(0, 4) === \"0x00\") {\n        value = \"0x\" + value.substring(4);\n    }\n\n    return value;\n}\n\nfunction toBigNumber(value: BN): BigNumber {\n    return BigNumber.from(toHex(value));\n}\n\nfunction toBN(value: BigNumberish): BN {\n    const hex = BigNumber.from(value).toHexString();\n    if (hex[0] === \"-\") {\n        return (new BN(\"-\" + hex.substring(3), 16));\n    }\n    return new BN(hex.substring(2), 16);\n}\n\nfunction throwFault(fault: string, operation: string, value?: any): never {\n    const params: any = { fault: fault, operation: operation };\n    if (value != null) { params.value = value; }\n\n    return logger.throwError(fault, Logger.errors.NUMERIC_FAULT, params);\n}\n\n// value should have no prefix\nexport function _base36To16(value: string): string {\n    return (new BN(value, 36)).toString(16);\n}\n\n// value should have no prefix\nexport function _base16To36(value: string): string {\n    return (new BN(value, 16)).toString(36);\n}\n"]},"metadata":{},"sourceType":"module"}