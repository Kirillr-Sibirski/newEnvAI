{"ast":null,"code":"\"use strict\";\n\nimport _regeneratorRuntime from \"C:/Users/kiril/Desktop/newenvai/client/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _classCallCheck from \"C:/Users/kiril/Desktop/newenvai/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/kiril/Desktop/newenvai/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"C:/Users/kiril/Desktop/newenvai/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"C:/Users/kiril/Desktop/newenvai/client/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/kiril/Desktop/newenvai/client/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { getAddress } from \"@ethersproject/address\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { arrayify, concat, hexDataSlice, isHexString, joinSignature } from \"@ethersproject/bytes\";\nimport { hashMessage, _TypedDataEncoder } from \"@ethersproject/hash\";\nimport { defaultPath, HDNode, entropyToMnemonic } from \"@ethersproject/hdnode\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { defineReadOnly, resolveProperties } from \"@ethersproject/properties\";\nimport { randomBytes } from \"@ethersproject/random\";\nimport { SigningKey } from \"@ethersproject/signing-key\";\nimport { decryptJsonWallet, decryptJsonWalletSync, encryptKeystore } from \"@ethersproject/json-wallets\";\nimport { computeAddress, recoverAddress, serialize } from \"@ethersproject/transactions\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\n\nfunction isAccount(value) {\n  return value != null && isHexString(value.privateKey, 32) && value.address != null;\n}\n\nfunction hasMnemonic(value) {\n  var mnemonic = value.mnemonic;\n  return mnemonic && mnemonic.phrase;\n}\n\nexport var Wallet = /*#__PURE__*/function (_Signer) {\n  _inherits(Wallet, _Signer);\n\n  var _super = _createSuper(Wallet);\n\n  function Wallet(privateKey, provider) {\n    var _this;\n\n    _classCallCheck(this, Wallet);\n\n    _this = _super.call(this);\n\n    if (isAccount(privateKey)) {\n      var signingKey = new SigningKey(privateKey.privateKey);\n      defineReadOnly(_assertThisInitialized(_this), \"_signingKey\", function () {\n        return signingKey;\n      });\n      defineReadOnly(_assertThisInitialized(_this), \"address\", computeAddress(_this.publicKey));\n\n      if (_this.address !== getAddress(privateKey.address)) {\n        logger.throwArgumentError(\"privateKey/address mismatch\", \"privateKey\", \"[REDACTED]\");\n      }\n\n      if (hasMnemonic(privateKey)) {\n        var srcMnemonic = privateKey.mnemonic;\n        defineReadOnly(_assertThisInitialized(_this), \"_mnemonic\", function () {\n          return {\n            phrase: srcMnemonic.phrase,\n            path: srcMnemonic.path || defaultPath,\n            locale: srcMnemonic.locale || \"en\"\n          };\n        });\n        var mnemonic = _this.mnemonic;\n        var node = HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path);\n\n        if (computeAddress(node.privateKey) !== _this.address) {\n          logger.throwArgumentError(\"mnemonic/address mismatch\", \"privateKey\", \"[REDACTED]\");\n        }\n      } else {\n        defineReadOnly(_assertThisInitialized(_this), \"_mnemonic\", function () {\n          return null;\n        });\n      }\n    } else {\n      if (SigningKey.isSigningKey(privateKey)) {\n        /* istanbul ignore if */\n        if (privateKey.curve !== \"secp256k1\") {\n          logger.throwArgumentError(\"unsupported curve; must be secp256k1\", \"privateKey\", \"[REDACTED]\");\n        }\n\n        defineReadOnly(_assertThisInitialized(_this), \"_signingKey\", function () {\n          return privateKey;\n        });\n      } else {\n        // A lot of common tools do not prefix private keys with a 0x (see: #1166)\n        if (typeof privateKey === \"string\") {\n          if (privateKey.match(/^[0-9a-f]*$/i) && privateKey.length === 64) {\n            privateKey = \"0x\" + privateKey;\n          }\n        }\n\n        var _signingKey = new SigningKey(privateKey);\n\n        defineReadOnly(_assertThisInitialized(_this), \"_signingKey\", function () {\n          return _signingKey;\n        });\n      }\n\n      defineReadOnly(_assertThisInitialized(_this), \"_mnemonic\", function () {\n        return null;\n      });\n      defineReadOnly(_assertThisInitialized(_this), \"address\", computeAddress(_this.publicKey));\n    }\n    /* istanbul ignore if */\n\n\n    if (provider && !Provider.isProvider(provider)) {\n      logger.throwArgumentError(\"invalid provider\", \"provider\", provider);\n    }\n\n    defineReadOnly(_assertThisInitialized(_this), \"provider\", provider || null);\n    return _this;\n  }\n\n  _createClass(Wallet, [{\n    key: \"mnemonic\",\n    get: function get() {\n      return this._mnemonic();\n    }\n  }, {\n    key: \"privateKey\",\n    get: function get() {\n      return this._signingKey().privateKey;\n    }\n  }, {\n    key: \"publicKey\",\n    get: function get() {\n      return this._signingKey().publicKey;\n    }\n  }, {\n    key: \"getAddress\",\n    value: function getAddress() {\n      return Promise.resolve(this.address);\n    }\n  }, {\n    key: \"connect\",\n    value: function connect(provider) {\n      return new Wallet(this, provider);\n    }\n  }, {\n    key: \"signTransaction\",\n    value: function signTransaction(transaction) {\n      var _this2 = this;\n\n      return resolveProperties(transaction).then(function (tx) {\n        if (tx.from != null) {\n          if (getAddress(tx.from) !== _this2.address) {\n            logger.throwArgumentError(\"transaction from address mismatch\", \"transaction.from\", transaction.from);\n          }\n\n          delete tx.from;\n        }\n\n        var signature = _this2._signingKey().signDigest(keccak256(serialize(tx)));\n\n        return serialize(tx, signature);\n      });\n    }\n  }, {\n    key: \"signMessage\",\n    value: function signMessage(message) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", joinSignature(this._signingKey().signDigest(hashMessage(message))));\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n  }, {\n    key: \"_signTypedData\",\n    value: function _signTypedData(domain, types, value) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var _this3 = this;\n\n        var populated;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return _TypedDataEncoder.resolveNames(domain, types, value, function (name) {\n                  if (_this3.provider == null) {\n                    logger.throwError(\"cannot resolve ENS names without a provider\", Logger.errors.UNSUPPORTED_OPERATION, {\n                      operation: \"resolveName\",\n                      value: name\n                    });\n                  }\n\n                  return _this3.provider.resolveName(name);\n                });\n\n              case 2:\n                populated = _context2.sent;\n                return _context2.abrupt(\"return\", joinSignature(this._signingKey().signDigest(_TypedDataEncoder.hash(populated.domain, types, populated.value))));\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    }\n  }, {\n    key: \"encrypt\",\n    value: function encrypt(password, options, progressCallback) {\n      if (typeof options === \"function\" && !progressCallback) {\n        progressCallback = options;\n        options = {};\n      }\n\n      if (progressCallback && typeof progressCallback !== \"function\") {\n        throw new Error(\"invalid callback\");\n      }\n\n      if (!options) {\n        options = {};\n      }\n\n      return encryptKeystore(this, password, options, progressCallback);\n    }\n    /**\n     *  Static methods to create Wallet instances.\n     */\n\n  }], [{\n    key: \"createRandom\",\n    value: function createRandom(options) {\n      var entropy = randomBytes(16);\n\n      if (!options) {\n        options = {};\n      }\n\n      if (options.extraEntropy) {\n        entropy = arrayify(hexDataSlice(keccak256(concat([entropy, options.extraEntropy])), 0, 16));\n      }\n\n      var mnemonic = entropyToMnemonic(entropy, options.locale);\n      return Wallet.fromMnemonic(mnemonic, options.path, options.locale);\n    }\n  }, {\n    key: \"fromEncryptedJson\",\n    value: function fromEncryptedJson(json, password, progressCallback) {\n      return decryptJsonWallet(json, password, progressCallback).then(function (account) {\n        return new Wallet(account);\n      });\n    }\n  }, {\n    key: \"fromEncryptedJsonSync\",\n    value: function fromEncryptedJsonSync(json, password) {\n      return new Wallet(decryptJsonWalletSync(json, password));\n    }\n  }, {\n    key: \"fromMnemonic\",\n    value: function fromMnemonic(mnemonic, path, wordlist) {\n      if (!path) {\n        path = defaultPath;\n      }\n\n      return new Wallet(HDNode.fromMnemonic(mnemonic, null, wordlist).derivePath(path));\n    }\n  }]);\n\n  return Wallet;\n}(Signer);\nexport function verifyMessage(message, signature) {\n  return recoverAddress(hashMessage(message), signature);\n}\nexport function verifyTypedData(domain, types, value, signature) {\n  return recoverAddress(_TypedDataEncoder.hash(domain, types, value), signature);\n}","map":{"version":3,"mappings":"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","names":["getAddress","Provider","Signer","arrayify","concat","hexDataSlice","isHexString","joinSignature","hashMessage","_TypedDataEncoder","defaultPath","HDNode","entropyToMnemonic","keccak256","defineReadOnly","resolveProperties","randomBytes","SigningKey","decryptJsonWallet","decryptJsonWalletSync","encryptKeystore","computeAddress","recoverAddress","serialize","Logger","version","logger","isAccount","value","privateKey","address","hasMnemonic","mnemonic","phrase","Wallet","provider","signingKey","publicKey","throwArgumentError","srcMnemonic","path","locale","node","fromMnemonic","derivePath","isSigningKey","curve","match","length","isProvider","_mnemonic","_signingKey","Promise","resolve","transaction","then","tx","from","signature","signDigest","message","domain","types","resolveNames","name","throwError","errors","UNSUPPORTED_OPERATION","operation","resolveName","populated","hash","password","options","progressCallback","Error","entropy","extraEntropy","json","account","wordlist","verifyMessage","verifyTypedData"],"sources":["C:\\Users\\kiril\\Desktop\\newenvai\\client\\node_modules\\@ethersproject\\wallet\\src.ts\\index.ts"],"sourcesContent":["\"use strict\";\n\nimport { getAddress } from \"@ethersproject/address\";\nimport { Provider, TransactionRequest } from \"@ethersproject/abstract-provider\";\nimport { ExternallyOwnedAccount, Signer, TypedDataDomain, TypedDataField, TypedDataSigner } from \"@ethersproject/abstract-signer\";\nimport { arrayify, Bytes, BytesLike, concat, hexDataSlice, isHexString, joinSignature, SignatureLike } from \"@ethersproject/bytes\";\nimport { hashMessage, _TypedDataEncoder } from \"@ethersproject/hash\";\nimport { defaultPath, HDNode, entropyToMnemonic, Mnemonic } from \"@ethersproject/hdnode\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { defineReadOnly, resolveProperties } from \"@ethersproject/properties\";\nimport { randomBytes } from \"@ethersproject/random\";\nimport { SigningKey } from \"@ethersproject/signing-key\";\nimport { decryptJsonWallet, decryptJsonWalletSync, encryptKeystore, ProgressCallback } from \"@ethersproject/json-wallets\";\nimport { computeAddress, recoverAddress, serialize, UnsignedTransaction } from \"@ethersproject/transactions\";\nimport { Wordlist } from \"@ethersproject/wordlists\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nfunction isAccount(value: any): value is ExternallyOwnedAccount {\n    return (value != null && isHexString(value.privateKey, 32) && value.address != null);\n}\n\nfunction hasMnemonic(value: any): value is { mnemonic: Mnemonic } {\n    const mnemonic = value.mnemonic;\n    return (mnemonic && mnemonic.phrase);\n}\n\nexport class Wallet extends Signer implements ExternallyOwnedAccount, TypedDataSigner {\n\n    readonly address: string;\n    readonly provider: Provider;\n\n    // Wrapping the _signingKey and _mnemonic in a getter function prevents\n    // leaking the private key in console.log; still, be careful! :)\n    readonly _signingKey: () => SigningKey;\n    readonly _mnemonic: () => Mnemonic;\n\n    constructor(privateKey: BytesLike | ExternallyOwnedAccount | SigningKey, provider?: Provider) {\n        super();\n\n        if (isAccount(privateKey)) {\n            const signingKey = new SigningKey(privateKey.privateKey);\n            defineReadOnly(this, \"_signingKey\", () => signingKey);\n            defineReadOnly(this, \"address\", computeAddress(this.publicKey));\n\n            if (this.address !== getAddress(privateKey.address)) {\n                logger.throwArgumentError(\"privateKey/address mismatch\", \"privateKey\", \"[REDACTED]\");\n            }\n\n            if (hasMnemonic(privateKey)) {\n                const srcMnemonic = privateKey.mnemonic;\n                defineReadOnly(this, \"_mnemonic\", () => (\n                    {\n                        phrase: srcMnemonic.phrase,\n                        path: srcMnemonic.path || defaultPath,\n                        locale: srcMnemonic.locale || \"en\"\n                    }\n                ));\n                const mnemonic = this.mnemonic;\n                const node = HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path);\n                if (computeAddress(node.privateKey) !== this.address) {\n                    logger.throwArgumentError(\"mnemonic/address mismatch\", \"privateKey\", \"[REDACTED]\");\n                }\n            } else {\n                defineReadOnly(this, \"_mnemonic\", (): Mnemonic => null);\n            }\n\n\n        } else {\n            if (SigningKey.isSigningKey(privateKey)) {\n                /* istanbul ignore if */\n                if (privateKey.curve !== \"secp256k1\") {\n                    logger.throwArgumentError(\"unsupported curve; must be secp256k1\", \"privateKey\", \"[REDACTED]\");\n                }\n                defineReadOnly(this, \"_signingKey\", () => (<SigningKey>privateKey));\n\n            } else {\n                // A lot of common tools do not prefix private keys with a 0x (see: #1166)\n                if (typeof(privateKey) === \"string\") {\n                    if (privateKey.match(/^[0-9a-f]*$/i) && privateKey.length === 64) {\n                        privateKey = \"0x\" + privateKey;\n                    }\n                }\n\n                const signingKey = new SigningKey(privateKey);\n                defineReadOnly(this, \"_signingKey\", () => signingKey);\n            }\n\n            defineReadOnly(this, \"_mnemonic\", (): Mnemonic => null);\n            defineReadOnly(this, \"address\", computeAddress(this.publicKey));\n        }\n\n        /* istanbul ignore if */\n        if (provider && !Provider.isProvider(provider)) {\n            logger.throwArgumentError(\"invalid provider\", \"provider\", provider);\n        }\n\n        defineReadOnly(this, \"provider\", provider || null);\n    }\n\n    get mnemonic(): Mnemonic { return this._mnemonic(); }\n    get privateKey(): string { return this._signingKey().privateKey; }\n    get publicKey(): string { return this._signingKey().publicKey; }\n\n    getAddress(): Promise<string> {\n        return Promise.resolve(this.address);\n    }\n\n    connect(provider: Provider): Wallet {\n        return new Wallet(this, provider);\n    }\n\n    signTransaction(transaction: TransactionRequest): Promise<string> {\n        return resolveProperties(transaction).then((tx) => {\n            if (tx.from != null) {\n                if (getAddress(tx.from) !== this.address) {\n                    logger.throwArgumentError(\"transaction from address mismatch\", \"transaction.from\", transaction.from);\n                }\n                delete tx.from;\n            }\n\n            const signature = this._signingKey().signDigest(keccak256(serialize(<UnsignedTransaction>tx)));\n            return serialize(<UnsignedTransaction>tx, signature);\n        });\n    }\n\n    async signMessage(message: Bytes | string): Promise<string> {\n        return joinSignature(this._signingKey().signDigest(hashMessage(message)));\n    }\n\n    async _signTypedData(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): Promise<string> {\n        // Populate any ENS names\n        const populated = await _TypedDataEncoder.resolveNames(domain, types, value, (name: string) => {\n            if (this.provider == null) {\n                logger.throwError(\"cannot resolve ENS names without a provider\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"resolveName\",\n                    value: name\n                });\n            }\n            return this.provider.resolveName(name);\n        });\n\n        return joinSignature(this._signingKey().signDigest(_TypedDataEncoder.hash(populated.domain, types, populated.value)));\n    }\n\n    encrypt(password: Bytes | string, options?: any, progressCallback?: ProgressCallback): Promise<string> {\n        if (typeof(options) === \"function\" && !progressCallback) {\n            progressCallback = options;\n            options = {};\n        }\n\n        if (progressCallback && typeof(progressCallback) !== \"function\") {\n            throw new Error(\"invalid callback\");\n        }\n\n        if (!options) { options = {}; }\n\n        return encryptKeystore(this, password, options, progressCallback);\n    }\n\n\n    /**\n     *  Static methods to create Wallet instances.\n     */\n    static createRandom(options?: any): Wallet {\n        let entropy: Uint8Array = randomBytes(16);\n\n        if (!options) { options = { }; }\n\n        if (options.extraEntropy) {\n            entropy = arrayify(hexDataSlice(keccak256(concat([ entropy, options.extraEntropy ])), 0, 16));\n        }\n\n        const mnemonic = entropyToMnemonic(entropy, options.locale);\n        return Wallet.fromMnemonic(mnemonic, options.path, options.locale);\n    }\n\n    static fromEncryptedJson(json: string, password: Bytes | string, progressCallback?: ProgressCallback): Promise<Wallet> {\n        return decryptJsonWallet(json, password, progressCallback).then((account) => {\n            return new Wallet(account);\n        });\n    }\n\n    static fromEncryptedJsonSync(json: string, password: Bytes | string): Wallet {\n        return new Wallet(decryptJsonWalletSync(json, password));\n    }\n\n    static fromMnemonic(mnemonic: string, path?: string, wordlist?: Wordlist): Wallet {\n        if (!path) { path = defaultPath; }\n        return new Wallet(HDNode.fromMnemonic(mnemonic, null, wordlist).derivePath(path));\n    }\n}\n\nexport function verifyMessage(message: Bytes | string, signature: SignatureLike): string {\n    return recoverAddress(hashMessage(message), signature);\n}\n\nexport function verifyTypedData(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>, signature: SignatureLike): string {\n    return recoverAddress(_TypedDataEncoder.hash(domain, types, value), signature);\n}\n"]},"metadata":{},"sourceType":"module"}