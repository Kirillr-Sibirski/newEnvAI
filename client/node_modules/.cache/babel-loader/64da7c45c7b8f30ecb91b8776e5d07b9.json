{"ast":null,"code":"\"use strict\";\n\nimport _assertThisInitialized from \"C:/Users/kiril/Desktop/newenvai/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"C:/Users/kiril/Desktop/newenvai/client/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/kiril/Desktop/newenvai/client/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _regeneratorRuntime from \"C:/Users/kiril/Desktop/newenvai/client/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _classCallCheck from \"C:/Users/kiril/Desktop/newenvai/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/kiril/Desktop/newenvai/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { ForkEvent, Provider } from \"@ethersproject/abstract-provider\";\nimport { encode as base64Encode } from \"@ethersproject/base64\";\nimport { Base58 } from \"@ethersproject/basex\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexConcat, hexDataLength, hexDataSlice, hexlify, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { HashZero } from \"@ethersproject/constants\";\nimport { dnsEncode, namehash } from \"@ethersproject/hash\";\nimport { getNetwork as _getNetwork } from \"@ethersproject/networks\";\nimport { defineReadOnly, getStatic, resolveProperties } from \"@ethersproject/properties\";\nimport { sha256 } from \"@ethersproject/sha2\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\nimport { fetchJson, poll } from \"@ethersproject/web\";\nimport bech32 from \"bech32\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nimport { Formatter } from \"./formatter\";\nvar MAX_CCIP_REDIRECTS = 10; //////////////////////////////\n// Event Serializeing\n\nfunction checkTopic(topic) {\n  if (topic == null) {\n    return \"null\";\n  }\n\n  if (hexDataLength(topic) !== 32) {\n    logger.throwArgumentError(\"invalid topic\", \"topic\", topic);\n  }\n\n  return topic.toLowerCase();\n}\n\nfunction serializeTopics(topics) {\n  // Remove trailing null AND-topics; they are redundant\n  topics = topics.slice();\n\n  while (topics.length > 0 && topics[topics.length - 1] == null) {\n    topics.pop();\n  }\n\n  return topics.map(function (topic) {\n    if (Array.isArray(topic)) {\n      // Only track unique OR-topics\n      var unique = {};\n      topic.forEach(function (topic) {\n        unique[checkTopic(topic)] = true;\n      }); // The order of OR-topics does not matter\n\n      var sorted = Object.keys(unique);\n      sorted.sort();\n      return sorted.join(\"|\");\n    } else {\n      return checkTopic(topic);\n    }\n  }).join(\"&\");\n}\n\nfunction deserializeTopics(data) {\n  if (data === \"\") {\n    return [];\n  }\n\n  return data.split(/&/g).map(function (topic) {\n    if (topic === \"\") {\n      return [];\n    }\n\n    var comps = topic.split(\"|\").map(function (topic) {\n      return topic === \"null\" ? null : topic;\n    });\n    return comps.length === 1 ? comps[0] : comps;\n  });\n}\n\nfunction getEventTag(eventName) {\n  if (typeof eventName === \"string\") {\n    eventName = eventName.toLowerCase();\n\n    if (hexDataLength(eventName) === 32) {\n      return \"tx:\" + eventName;\n    }\n\n    if (eventName.indexOf(\":\") === -1) {\n      return eventName;\n    }\n  } else if (Array.isArray(eventName)) {\n    return \"filter:*:\" + serializeTopics(eventName);\n  } else if (ForkEvent.isForkEvent(eventName)) {\n    logger.warn(\"not implemented\");\n    throw new Error(\"not implemented\");\n  } else if (eventName && typeof eventName === \"object\") {\n    return \"filter:\" + (eventName.address || \"*\") + \":\" + serializeTopics(eventName.topics || []);\n  }\n\n  throw new Error(\"invalid event - \" + eventName);\n} //////////////////////////////\n// Helper Object\n\n\nfunction getTime() {\n  return new Date().getTime();\n}\n\nfunction stall(duration) {\n  return new Promise(function (resolve) {\n    setTimeout(resolve, duration);\n  });\n} //////////////////////////////\n// Provider Object\n\n/**\n *  EventType\n *   - \"block\"\n *   - \"poll\"\n *   - \"didPoll\"\n *   - \"pending\"\n *   - \"error\"\n *   - \"network\"\n *   - filter\n *   - topics array\n *   - transaction hash\n */\n\n\nvar PollableEvents = [\"block\", \"network\", \"pending\", \"poll\"];\nexport var Event = /*#__PURE__*/function () {\n  function Event(tag, listener, once) {\n    _classCallCheck(this, Event);\n\n    defineReadOnly(this, \"tag\", tag);\n    defineReadOnly(this, \"listener\", listener);\n    defineReadOnly(this, \"once\", once);\n    this._lastBlockNumber = -2;\n    this._inflight = false;\n  }\n\n  _createClass(Event, [{\n    key: \"event\",\n    get: function get() {\n      switch (this.type) {\n        case \"tx\":\n          return this.hash;\n\n        case \"filter\":\n          return this.filter;\n      }\n\n      return this.tag;\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return this.tag.split(\":\")[0];\n    }\n  }, {\n    key: \"hash\",\n    get: function get() {\n      var comps = this.tag.split(\":\");\n\n      if (comps[0] !== \"tx\") {\n        return null;\n      }\n\n      return comps[1];\n    }\n  }, {\n    key: \"filter\",\n    get: function get() {\n      var comps = this.tag.split(\":\");\n\n      if (comps[0] !== \"filter\") {\n        return null;\n      }\n\n      var address = comps[1];\n      var topics = deserializeTopics(comps[2]);\n      var filter = {};\n\n      if (topics.length > 0) {\n        filter.topics = topics;\n      }\n\n      if (address && address !== \"*\") {\n        filter.address = address;\n      }\n\n      return filter;\n    }\n  }, {\n    key: \"pollable\",\n    value: function pollable() {\n      return this.tag.indexOf(\":\") >= 0 || PollableEvents.indexOf(this.tag) >= 0;\n    }\n  }]);\n\n  return Event;\n}();\n; // https://github.com/satoshilabs/slips/blob/master/slip-0044.md\n\nvar coinInfos = {\n  \"0\": {\n    symbol: \"btc\",\n    p2pkh: 0x00,\n    p2sh: 0x05,\n    prefix: \"bc\"\n  },\n  \"2\": {\n    symbol: \"ltc\",\n    p2pkh: 0x30,\n    p2sh: 0x32,\n    prefix: \"ltc\"\n  },\n  \"3\": {\n    symbol: \"doge\",\n    p2pkh: 0x1e,\n    p2sh: 0x16\n  },\n  \"60\": {\n    symbol: \"eth\",\n    ilk: \"eth\"\n  },\n  \"61\": {\n    symbol: \"etc\",\n    ilk: \"eth\"\n  },\n  \"700\": {\n    symbol: \"xdai\",\n    ilk: \"eth\"\n  }\n};\n\nfunction bytes32ify(value) {\n  return hexZeroPad(BigNumber.from(value).toHexString(), 32);\n} // Compute the Base58Check encoded data (checksum is first 4 bytes of sha256d)\n\n\nfunction base58Encode(data) {\n  return Base58.encode(concat([data, hexDataSlice(sha256(sha256(data)), 0, 4)]));\n}\n\nvar matcherIpfs = new RegExp(\"^(ipfs):/\\/(.*)$\", \"i\");\nvar matchers = [new RegExp(\"^(https):/\\/(.*)$\", \"i\"), new RegExp(\"^(data):(.*)$\", \"i\"), matcherIpfs, new RegExp(\"^eip155:[0-9]+/(erc[0-9]+):(.*)$\", \"i\")];\n\nfunction _parseString(result, start) {\n  try {\n    return toUtf8String(_parseBytes(result, start));\n  } catch (error) {}\n\n  return null;\n}\n\nfunction _parseBytes(result, start) {\n  if (result === \"0x\") {\n    return null;\n  }\n\n  var offset = BigNumber.from(hexDataSlice(result, start, start + 32)).toNumber();\n  var length = BigNumber.from(hexDataSlice(result, offset, offset + 32)).toNumber();\n  return hexDataSlice(result, offset + 32, offset + 32 + length);\n} // Trim off the ipfs:// prefix and return the default gateway URL\n\n\nfunction getIpfsLink(link) {\n  if (link.match(/^ipfs:\\/\\/ipfs\\//i)) {\n    link = link.substring(12);\n  } else if (link.match(/^ipfs:\\/\\//i)) {\n    link = link.substring(7);\n  } else {\n    logger.throwArgumentError(\"unsupported IPFS format\", \"link\", link);\n  }\n\n  return \"https://gateway.ipfs.io/ipfs/\".concat(link);\n}\n\nfunction numPad(value) {\n  var result = arrayify(value);\n\n  if (result.length > 32) {\n    throw new Error(\"internal; should not happen\");\n  }\n\n  var padded = new Uint8Array(32);\n  padded.set(result, 32 - result.length);\n  return padded;\n}\n\nfunction bytesPad(value) {\n  if (value.length % 32 === 0) {\n    return value;\n  }\n\n  var result = new Uint8Array(Math.ceil(value.length / 32) * 32);\n  result.set(value);\n  return result;\n} // ABI Encodes a series of (bytes, bytes, ...)\n\n\nfunction encodeBytes(datas) {\n  var result = [];\n  var byteCount = 0; // Add place-holders for pointers as we add items\n\n  for (var i = 0; i < datas.length; i++) {\n    result.push(null);\n    byteCount += 32;\n  }\n\n  for (var _i = 0; _i < datas.length; _i++) {\n    var data = arrayify(datas[_i]); // Update the bytes offset\n\n    result[_i] = numPad(byteCount); // The length and padded value of data\n\n    result.push(numPad(data.length));\n    result.push(bytesPad(data));\n    byteCount += 32 + Math.ceil(data.length / 32) * 32;\n  }\n\n  return hexConcat(result);\n}\n\nexport var Resolver = /*#__PURE__*/function () {\n  // The resolvedAddress is only for creating a ReverseLookup resolver\n  function Resolver(provider, address, name, resolvedAddress) {\n    _classCallCheck(this, Resolver);\n\n    defineReadOnly(this, \"provider\", provider);\n    defineReadOnly(this, \"name\", name);\n    defineReadOnly(this, \"address\", provider.formatter.address(address));\n    defineReadOnly(this, \"_resolvedAddress\", resolvedAddress);\n  }\n\n  _createClass(Resolver, [{\n    key: \"supportsWildcard\",\n    value: function supportsWildcard() {\n      var _this = this;\n\n      if (!this._supportsEip2544) {\n        // supportsInterface(bytes4 = selector(\"resolve(bytes,bytes)\"))\n        this._supportsEip2544 = this.provider.call({\n          to: this.address,\n          data: \"0x01ffc9a79061b92300000000000000000000000000000000000000000000000000000000\"\n        }).then(function (result) {\n          return BigNumber.from(result).eq(1);\n        }).catch(function (error) {\n          if (error.code === Logger.errors.CALL_EXCEPTION) {\n            return false;\n          } // Rethrow the error: link is down, etc. Let future attempts retry.\n\n\n          _this._supportsEip2544 = null;\n          throw error;\n        });\n      }\n\n      return this._supportsEip2544;\n    }\n  }, {\n    key: \"_fetch\",\n    value: function _fetch(selector, parameters) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var tx, parseBytes, result;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                // e.g. keccak256(\"addr(bytes32,uint256)\")\n                tx = {\n                  to: this.address,\n                  ccipReadEnabled: true,\n                  data: hexConcat([selector, namehash(this.name), parameters || \"0x\"])\n                }; // Wildcard support; use EIP-2544 to resolve the request\n\n                parseBytes = false;\n                _context.next = 4;\n                return this.supportsWildcard();\n\n              case 4:\n                if (!_context.sent) {\n                  _context.next = 7;\n                  break;\n                }\n\n                parseBytes = true; // selector(\"resolve(bytes,bytes)\")\n\n                tx.data = hexConcat([\"0x9061b923\", encodeBytes([dnsEncode(this.name), tx.data])]);\n\n              case 7:\n                _context.prev = 7;\n                _context.next = 10;\n                return this.provider.call(tx);\n\n              case 10:\n                result = _context.sent;\n\n                if (arrayify(result).length % 32 === 4) {\n                  logger.throwError(\"resolver threw error\", Logger.errors.CALL_EXCEPTION, {\n                    transaction: tx,\n                    data: result\n                  });\n                }\n\n                if (parseBytes) {\n                  result = _parseBytes(result, 0);\n                }\n\n                return _context.abrupt(\"return\", result);\n\n              case 16:\n                _context.prev = 16;\n                _context.t0 = _context[\"catch\"](7);\n\n                if (!(_context.t0.code === Logger.errors.CALL_EXCEPTION)) {\n                  _context.next = 20;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", null);\n\n              case 20:\n                throw _context.t0;\n\n              case 21:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[7, 16]]);\n      }));\n    }\n  }, {\n    key: \"_fetchBytes\",\n    value: function _fetchBytes(selector, parameters) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this._fetch(selector, parameters);\n\n              case 2:\n                result = _context2.sent;\n\n                if (!(result != null)) {\n                  _context2.next = 5;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", _parseBytes(result, 0));\n\n              case 5:\n                return _context2.abrupt(\"return\", null);\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    }\n  }, {\n    key: \"_getAddress\",\n    value: function _getAddress(coinType, hexBytes) {\n      var coinInfo = coinInfos[String(coinType)];\n\n      if (coinInfo == null) {\n        logger.throwError(\"unsupported coin type: \".concat(coinType), Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"getAddress(\".concat(coinType, \")\")\n        });\n      }\n\n      if (coinInfo.ilk === \"eth\") {\n        return this.provider.formatter.address(hexBytes);\n      }\n\n      var bytes = arrayify(hexBytes); // P2PKH: OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG\n\n      if (coinInfo.p2pkh != null) {\n        var p2pkh = hexBytes.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);\n\n        if (p2pkh) {\n          var length = parseInt(p2pkh[1], 16);\n\n          if (p2pkh[2].length === length * 2 && length >= 1 && length <= 75) {\n            return base58Encode(concat([[coinInfo.p2pkh], \"0x\" + p2pkh[2]]));\n          }\n        }\n      } // P2SH: OP_HASH160 <scriptHash> OP_EQUAL\n\n\n      if (coinInfo.p2sh != null) {\n        var p2sh = hexBytes.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);\n\n        if (p2sh) {\n          var _length = parseInt(p2sh[1], 16);\n\n          if (p2sh[2].length === _length * 2 && _length >= 1 && _length <= 75) {\n            return base58Encode(concat([[coinInfo.p2sh], \"0x\" + p2sh[2]]));\n          }\n        }\n      } // Bech32\n\n\n      if (coinInfo.prefix != null) {\n        var _length2 = bytes[1]; // https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#witness-program\n\n        var _version = bytes[0];\n\n        if (_version === 0x00) {\n          if (_length2 !== 20 && _length2 !== 32) {\n            _version = -1;\n          }\n        } else {\n          _version = -1;\n        }\n\n        if (_version >= 0 && bytes.length === 2 + _length2 && _length2 >= 1 && _length2 <= 75) {\n          var words = bech32.toWords(bytes.slice(2));\n          words.unshift(_version);\n          return bech32.encode(coinInfo.prefix, words);\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"getAddress\",\n    value: function getAddress(coinType) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var result, hexBytes, address;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (coinType == null) {\n                  coinType = 60;\n                } // If Ethereum, use the standard `addr(bytes32)`\n\n\n                if (!(coinType === 60)) {\n                  _context3.next = 16;\n                  break;\n                }\n\n                _context3.prev = 2;\n                _context3.next = 5;\n                return this._fetch(\"0x3b3b57de\");\n\n              case 5:\n                result = _context3.sent;\n\n                if (!(result === \"0x\" || result === HashZero)) {\n                  _context3.next = 8;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", null);\n\n              case 8:\n                return _context3.abrupt(\"return\", this.provider.formatter.callAddress(result));\n\n              case 11:\n                _context3.prev = 11;\n                _context3.t0 = _context3[\"catch\"](2);\n\n                if (!(_context3.t0.code === Logger.errors.CALL_EXCEPTION)) {\n                  _context3.next = 15;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", null);\n\n              case 15:\n                throw _context3.t0;\n\n              case 16:\n                _context3.next = 18;\n                return this._fetchBytes(\"0xf1cb7e06\", bytes32ify(coinType));\n\n              case 18:\n                hexBytes = _context3.sent;\n\n                if (!(hexBytes == null || hexBytes === \"0x\")) {\n                  _context3.next = 21;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", null);\n\n              case 21:\n                // Compute the address\n                address = this._getAddress(coinType, hexBytes);\n\n                if (address == null) {\n                  logger.throwError(\"invalid or unsupported coin data\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"getAddress(\".concat(coinType, \")\"),\n                    coinType: coinType,\n                    data: hexBytes\n                  });\n                }\n\n                return _context3.abrupt(\"return\", address);\n\n              case 24:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[2, 11]]);\n      }));\n    }\n  }, {\n    key: \"getAvatar\",\n    value: function getAvatar() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var linkage, avatar, i, match, scheme, selector, owner, comps, addr, tokenId, tokenOwner, balance, tx, metadataUrl, metadata, imageUrl, ipfs;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                linkage = [{\n                  type: \"name\",\n                  content: this.name\n                }];\n                _context4.prev = 1;\n                _context4.next = 4;\n                return this.getText(\"avatar\");\n\n              case 4:\n                avatar = _context4.sent;\n\n                if (!(avatar == null)) {\n                  _context4.next = 7;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", null);\n\n              case 7:\n                i = 0;\n\n              case 8:\n                if (!(i < matchers.length)) {\n                  _context4.next = 91;\n                  break;\n                }\n\n                match = avatar.match(matchers[i]);\n\n                if (!(match == null)) {\n                  _context4.next = 12;\n                  break;\n                }\n\n                return _context4.abrupt(\"continue\", 88);\n\n              case 12:\n                scheme = match[1].toLowerCase();\n                _context4.t0 = scheme;\n                _context4.next = _context4.t0 === \"https\" ? 16 : _context4.t0 === \"data\" ? 18 : _context4.t0 === \"ipfs\" ? 20 : _context4.t0 === \"erc721\" ? 22 : _context4.t0 === \"erc1155\" ? 22 : 88;\n                break;\n\n              case 16:\n                linkage.push({\n                  type: \"url\",\n                  content: avatar\n                });\n                return _context4.abrupt(\"return\", {\n                  linkage: linkage,\n                  url: avatar\n                });\n\n              case 18:\n                linkage.push({\n                  type: \"data\",\n                  content: avatar\n                });\n                return _context4.abrupt(\"return\", {\n                  linkage: linkage,\n                  url: avatar\n                });\n\n              case 20:\n                linkage.push({\n                  type: \"ipfs\",\n                  content: avatar\n                });\n                return _context4.abrupt(\"return\", {\n                  linkage: linkage,\n                  url: getIpfsLink(avatar)\n                });\n\n              case 22:\n                // Depending on the ERC type, use tokenURI(uint256) or url(uint256)\n                selector = scheme === \"erc721\" ? \"0xc87b56dd\" : \"0x0e89341c\";\n                linkage.push({\n                  type: scheme,\n                  content: avatar\n                }); // The owner of this name\n\n                _context4.t1 = this._resolvedAddress;\n\n                if (_context4.t1) {\n                  _context4.next = 29;\n                  break;\n                }\n\n                _context4.next = 28;\n                return this.getAddress();\n\n              case 28:\n                _context4.t1 = _context4.sent;\n\n              case 29:\n                owner = _context4.t1;\n                comps = (match[2] || \"\").split(\"/\");\n\n                if (!(comps.length !== 2)) {\n                  _context4.next = 33;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", null);\n\n              case 33:\n                _context4.next = 35;\n                return this.provider.formatter.address(comps[0]);\n\n              case 35:\n                addr = _context4.sent;\n                tokenId = hexZeroPad(BigNumber.from(comps[1]).toHexString(), 32); // Check that this account owns the token\n\n                if (!(scheme === \"erc721\")) {\n                  _context4.next = 48;\n                  break;\n                }\n\n                _context4.t2 = this.provider.formatter;\n                _context4.next = 41;\n                return this.provider.call({\n                  to: addr,\n                  data: hexConcat([\"0x6352211e\", tokenId])\n                });\n\n              case 41:\n                _context4.t3 = _context4.sent;\n                tokenOwner = _context4.t2.callAddress.call(_context4.t2, _context4.t3);\n\n                if (!(owner !== tokenOwner)) {\n                  _context4.next = 45;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", null);\n\n              case 45:\n                linkage.push({\n                  type: \"owner\",\n                  content: tokenOwner\n                });\n                _context4.next = 57;\n                break;\n\n              case 48:\n                if (!(scheme === \"erc1155\")) {\n                  _context4.next = 57;\n                  break;\n                }\n\n                _context4.t4 = BigNumber;\n                _context4.next = 52;\n                return this.provider.call({\n                  to: addr,\n                  data: hexConcat([\"0x00fdd58e\", hexZeroPad(owner, 32), tokenId])\n                });\n\n              case 52:\n                _context4.t5 = _context4.sent;\n                balance = _context4.t4.from.call(_context4.t4, _context4.t5);\n\n                if (!balance.isZero()) {\n                  _context4.next = 56;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", null);\n\n              case 56:\n                linkage.push({\n                  type: \"balance\",\n                  content: balance.toString()\n                });\n\n              case 57:\n                // Call the token contract for the metadata URL\n                tx = {\n                  to: this.provider.formatter.address(comps[0]),\n                  data: hexConcat([selector, tokenId])\n                };\n                _context4.t6 = _parseString;\n                _context4.next = 61;\n                return this.provider.call(tx);\n\n              case 61:\n                _context4.t7 = _context4.sent;\n                metadataUrl = (0, _context4.t6)(_context4.t7, 0);\n\n                if (!(metadataUrl == null)) {\n                  _context4.next = 65;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", null);\n\n              case 65:\n                linkage.push({\n                  type: \"metadata-url-base\",\n                  content: metadataUrl\n                }); // ERC-1155 allows a generic {id} in the URL\n\n                if (scheme === \"erc1155\") {\n                  metadataUrl = metadataUrl.replace(\"{id}\", tokenId.substring(2));\n                  linkage.push({\n                    type: \"metadata-url-expanded\",\n                    content: metadataUrl\n                  });\n                } // Transform IPFS metadata links\n\n\n                if (metadataUrl.match(/^ipfs:/i)) {\n                  metadataUrl = getIpfsLink(metadataUrl);\n                }\n\n                linkage.push({\n                  type: \"metadata-url\",\n                  content: metadataUrl\n                }); // Get the token metadata\n\n                _context4.next = 71;\n                return fetchJson(metadataUrl);\n\n              case 71:\n                metadata = _context4.sent;\n\n                if (metadata) {\n                  _context4.next = 74;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", null);\n\n              case 74:\n                linkage.push({\n                  type: \"metadata\",\n                  content: JSON.stringify(metadata)\n                }); // Pull the image URL out\n\n                imageUrl = metadata.image;\n\n                if (!(typeof imageUrl !== \"string\")) {\n                  _context4.next = 78;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", null);\n\n              case 78:\n                if (!imageUrl.match(/^(https:\\/\\/|data:)/i)) {\n                  _context4.next = 81;\n                  break;\n                }\n\n                _context4.next = 86;\n                break;\n\n              case 81:\n                // Transform IPFS link to gateway\n                ipfs = imageUrl.match(matcherIpfs);\n\n                if (!(ipfs == null)) {\n                  _context4.next = 84;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", null);\n\n              case 84:\n                linkage.push({\n                  type: \"url-ipfs\",\n                  content: imageUrl\n                });\n                imageUrl = getIpfsLink(imageUrl);\n\n              case 86:\n                linkage.push({\n                  type: \"url\",\n                  content: imageUrl\n                });\n                return _context4.abrupt(\"return\", {\n                  linkage: linkage,\n                  url: imageUrl\n                });\n\n              case 88:\n                i++;\n                _context4.next = 8;\n                break;\n\n              case 91:\n                _context4.next = 95;\n                break;\n\n              case 93:\n                _context4.prev = 93;\n                _context4.t8 = _context4[\"catch\"](1);\n\n              case 95:\n                return _context4.abrupt(\"return\", null);\n\n              case 96:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[1, 93]]);\n      }));\n    }\n  }, {\n    key: \"getContentHash\",\n    value: function getContentHash() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var hexBytes, ipfs, length, ipns, _length3, swarm, skynet, urlSafe, hash;\n\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this._fetchBytes(\"0xbc1c58d1\");\n\n              case 2:\n                hexBytes = _context5.sent;\n\n                if (!(hexBytes == null || hexBytes === \"0x\")) {\n                  _context5.next = 5;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\", null);\n\n              case 5:\n                // IPFS (CID: 1, Type: DAG-PB)\n                ipfs = hexBytes.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n\n                if (!ipfs) {\n                  _context5.next = 10;\n                  break;\n                }\n\n                length = parseInt(ipfs[3], 16);\n\n                if (!(ipfs[4].length === length * 2)) {\n                  _context5.next = 10;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\", \"ipfs:/\\/\" + Base58.encode(\"0x\" + ipfs[1]));\n\n              case 10:\n                // IPNS (CID: 1, Type: libp2p-key)\n                ipns = hexBytes.match(/^0xe5010172(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n\n                if (!ipns) {\n                  _context5.next = 15;\n                  break;\n                }\n\n                _length3 = parseInt(ipns[3], 16);\n\n                if (!(ipns[4].length === _length3 * 2)) {\n                  _context5.next = 15;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\", \"ipns:/\\/\" + Base58.encode(\"0x\" + ipns[1]));\n\n              case 15:\n                // Swarm (CID: 1, Type: swarm-manifest; hash/length hard-coded to keccak256/32)\n                swarm = hexBytes.match(/^0xe40101fa011b20([0-9a-f]*)$/);\n\n                if (!swarm) {\n                  _context5.next = 19;\n                  break;\n                }\n\n                if (!(swarm[1].length === 32 * 2)) {\n                  _context5.next = 19;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\", \"bzz:/\\/\" + swarm[1]);\n\n              case 19:\n                skynet = hexBytes.match(/^0x90b2c605([0-9a-f]*)$/);\n\n                if (!skynet) {\n                  _context5.next = 25;\n                  break;\n                }\n\n                if (!(skynet[1].length === 34 * 2)) {\n                  _context5.next = 25;\n                  break;\n                }\n\n                // URL Safe base64; https://datatracker.ietf.org/doc/html/rfc4648#section-5\n                urlSafe = {\n                  \"=\": \"\",\n                  \"+\": \"-\",\n                  \"/\": \"_\"\n                };\n                hash = base64Encode(\"0x\" + skynet[1]).replace(/[=+\\/]/g, function (a) {\n                  return urlSafe[a];\n                });\n                return _context5.abrupt(\"return\", \"sia:/\\/\" + hash);\n\n              case 25:\n                return _context5.abrupt(\"return\", logger.throwError(\"invalid or unsupported content hash data\", Logger.errors.UNSUPPORTED_OPERATION, {\n                  operation: \"getContentHash()\",\n                  data: hexBytes\n                }));\n\n              case 26:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n    }\n  }, {\n    key: \"getText\",\n    value: function getText(key) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        var keyBytes, hexBytes;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                // The key encoded as parameter to fetchBytes\n                keyBytes = toUtf8Bytes(key); // The nodehash consumes the first slot, so the string pointer targets\n                // offset 64, with the length at offset 64 and data starting at offset 96\n\n                keyBytes = concat([bytes32ify(64), bytes32ify(keyBytes.length), keyBytes]); // Pad to word-size (32 bytes)\n\n                if (keyBytes.length % 32 !== 0) {\n                  keyBytes = concat([keyBytes, hexZeroPad(\"0x\", 32 - key.length % 32)]);\n                }\n\n                _context6.next = 5;\n                return this._fetchBytes(\"0x59d1d43c\", hexlify(keyBytes));\n\n              case 5:\n                hexBytes = _context6.sent;\n\n                if (!(hexBytes == null || hexBytes === \"0x\")) {\n                  _context6.next = 8;\n                  break;\n                }\n\n                return _context6.abrupt(\"return\", null);\n\n              case 8:\n                return _context6.abrupt(\"return\", toUtf8String(hexBytes));\n\n              case 9:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n    }\n  }]);\n\n  return Resolver;\n}();\nvar defaultFormatter = null;\nvar nextPollId = 1;\nexport var BaseProvider = /*#__PURE__*/function (_Provider) {\n  _inherits(BaseProvider, _Provider);\n\n  var _super = _createSuper(BaseProvider);\n\n  /**\n   *  ready\n   *\n   *  A Promise<Network> that resolves only once the provider is ready.\n   *\n   *  Sub-classes that call the super with a network without a chainId\n   *  MUST set this. Standard named networks have a known chainId.\n   *\n   */\n  function BaseProvider(network) {\n    var _this2;\n\n    _classCallCheck(this, BaseProvider);\n\n    _this2 = _super.call(this); // Events being listened to\n\n    _this2._events = [];\n    _this2._emitted = {\n      block: -2\n    };\n    _this2.disableCcipRead = false;\n    _this2.formatter = (this instanceof BaseProvider ? this.constructor : void 0).getFormatter(); // If network is any, this Provider allows the underlying\n    // network to change dynamically, and we auto-detect the\n    // current network\n\n    defineReadOnly(_assertThisInitialized(_this2), \"anyNetwork\", network === \"any\");\n\n    if (_this2.anyNetwork) {\n      network = _this2.detectNetwork();\n    }\n\n    if (network instanceof Promise) {\n      _this2._networkPromise = network; // Squash any \"unhandled promise\" errors; that do not need to be handled\n\n      network.catch(function (error) {}); // Trigger initial network setting (async)\n\n      _this2._ready().catch(function (error) {});\n    } else {\n      var knownNetwork = getStatic(this instanceof BaseProvider ? this.constructor : void 0, \"getNetwork\")(network);\n\n      if (knownNetwork) {\n        defineReadOnly(_assertThisInitialized(_this2), \"_network\", knownNetwork);\n\n        _this2.emit(\"network\", knownNetwork, null);\n      } else {\n        logger.throwArgumentError(\"invalid network\", \"network\", network);\n      }\n    }\n\n    _this2._maxInternalBlockNumber = -1024;\n    _this2._lastBlockNumber = -2;\n    _this2._maxFilterBlockRange = 10;\n    _this2._pollingInterval = 4000;\n    _this2._fastQueryDate = 0;\n    return _this2;\n  }\n\n  _createClass(BaseProvider, [{\n    key: \"_ready\",\n    value: function _ready() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n        var network;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                if (!(this._network == null)) {\n                  _context7.next = 17;\n                  break;\n                }\n\n                network = null;\n\n                if (!this._networkPromise) {\n                  _context7.next = 11;\n                  break;\n                }\n\n                _context7.prev = 3;\n                _context7.next = 6;\n                return this._networkPromise;\n\n              case 6:\n                network = _context7.sent;\n                _context7.next = 11;\n                break;\n\n              case 9:\n                _context7.prev = 9;\n                _context7.t0 = _context7[\"catch\"](3);\n\n              case 11:\n                if (!(network == null)) {\n                  _context7.next = 15;\n                  break;\n                }\n\n                _context7.next = 14;\n                return this.detectNetwork();\n\n              case 14:\n                network = _context7.sent;\n\n              case 15:\n                // This should never happen; every Provider sub-class should have\n                // suggested a network by here (or have thrown).\n                if (!network) {\n                  logger.throwError(\"no network detected\", Logger.errors.UNKNOWN_ERROR, {});\n                } // Possible this call stacked so do not call defineReadOnly again\n\n\n                if (this._network == null) {\n                  if (this.anyNetwork) {\n                    this._network = network;\n                  } else {\n                    defineReadOnly(this, \"_network\", network);\n                  }\n\n                  this.emit(\"network\", network, null);\n                }\n\n              case 17:\n                return _context7.abrupt(\"return\", this._network);\n\n              case 18:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this, [[3, 9]]);\n      }));\n    } // This will always return the most recently established network.\n    // For \"any\", this can change (a \"network\" event is emitted before\n    // any change is reflected); otherwise this cannot change\n\n  }, {\n    key: \"ready\",\n    get: function get() {\n      var _this3 = this;\n\n      return poll(function () {\n        return _this3._ready().then(function (network) {\n          return network;\n        }, function (error) {\n          // If the network isn't running yet, we will wait\n          if (error.code === Logger.errors.NETWORK_ERROR && error.event === \"noNetwork\") {\n            return undefined;\n          }\n\n          throw error;\n        });\n      });\n    } // @TODO: Remove this and just create a singleton formatter\n\n  }, {\n    key: \"ccipReadFetch\",\n    value: function ccipReadFetch(tx, calldata, urls) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n        var sender, data, errorMessages, i, url, href, json, result, errorMessage;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                if (!(this.disableCcipRead || urls.length === 0)) {\n                  _context8.next = 2;\n                  break;\n                }\n\n                return _context8.abrupt(\"return\", null);\n\n              case 2:\n                sender = tx.to.toLowerCase();\n                data = calldata.toLowerCase();\n                errorMessages = [];\n                i = 0;\n\n              case 6:\n                if (!(i < urls.length)) {\n                  _context8.next = 22;\n                  break;\n                }\n\n                url = urls[i]; // URL expansion\n\n                href = url.replace(\"{sender}\", sender).replace(\"{data}\", data); // If no {data} is present, use POST; otherwise GET\n\n                json = url.indexOf(\"{data}\") >= 0 ? null : JSON.stringify({\n                  data: data,\n                  sender: sender\n                });\n                _context8.next = 12;\n                return fetchJson({\n                  url: href,\n                  errorPassThrough: true\n                }, json, function (value, response) {\n                  value.status = response.statusCode;\n                  return value;\n                });\n\n              case 12:\n                result = _context8.sent;\n\n                if (!result.data) {\n                  _context8.next = 15;\n                  break;\n                }\n\n                return _context8.abrupt(\"return\", result.data);\n\n              case 15:\n                errorMessage = result.message || \"unknown error\"; // 4xx indicates the result is not present; stop\n\n                if (!(result.status >= 400 && result.status < 500)) {\n                  _context8.next = 18;\n                  break;\n                }\n\n                return _context8.abrupt(\"return\", logger.throwError(\"response not found during CCIP fetch: \".concat(errorMessage), Logger.errors.SERVER_ERROR, {\n                  url: url,\n                  errorMessage: errorMessage\n                }));\n\n              case 18:\n                // 5xx indicates server issue; try the next url\n                errorMessages.push(errorMessage);\n\n              case 19:\n                i++;\n                _context8.next = 6;\n                break;\n\n              case 22:\n                return _context8.abrupt(\"return\", logger.throwError(\"error encountered during CCIP fetch: \".concat(errorMessages.map(function (m) {\n                  return JSON.stringify(m);\n                }).join(\", \")), Logger.errors.SERVER_ERROR, {\n                  urls: urls,\n                  errorMessages: errorMessages\n                }));\n\n              case 23:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n    } // Fetches the blockNumber, but will reuse any result that is less\n    // than maxAge old or has been requested since the last request\n\n  }, {\n    key: \"_getInternalBlockNumber\",\n    value: function _getInternalBlockNumber(maxAge) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {\n        var _this4 = this;\n\n        var internalBlockNumber, result, reqTime, checkInternalBlockNumber;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _context9.next = 2;\n                return this._ready();\n\n              case 2:\n                if (!(maxAge > 0)) {\n                  _context9.next = 20;\n                  break;\n                }\n\n              case 3:\n                if (!this._internalBlockNumber) {\n                  _context9.next = 20;\n                  break;\n                }\n\n                // ...\"remember\" which fetch we started with\n                internalBlockNumber = this._internalBlockNumber;\n                _context9.prev = 5;\n                _context9.next = 8;\n                return internalBlockNumber;\n\n              case 8:\n                result = _context9.sent;\n\n                if (!(getTime() - result.respTime <= maxAge)) {\n                  _context9.next = 11;\n                  break;\n                }\n\n                return _context9.abrupt(\"return\", result.blockNumber);\n\n              case 11:\n                return _context9.abrupt(\"break\", 20);\n\n              case 14:\n                _context9.prev = 14;\n                _context9.t0 = _context9[\"catch\"](5);\n\n                if (!(this._internalBlockNumber === internalBlockNumber)) {\n                  _context9.next = 18;\n                  break;\n                }\n\n                return _context9.abrupt(\"break\", 20);\n\n              case 18:\n                _context9.next = 3;\n                break;\n\n              case 20:\n                reqTime = getTime();\n                checkInternalBlockNumber = resolveProperties({\n                  blockNumber: this.perform(\"getBlockNumber\", {}),\n                  networkError: this.getNetwork().then(function (network) {\n                    return null;\n                  }, function (error) {\n                    return error;\n                  })\n                }).then(function (_ref) {\n                  var blockNumber = _ref.blockNumber,\n                      networkError = _ref.networkError;\n\n                  if (networkError) {\n                    // Unremember this bad internal block number\n                    if (_this4._internalBlockNumber === checkInternalBlockNumber) {\n                      _this4._internalBlockNumber = null;\n                    }\n\n                    throw networkError;\n                  }\n\n                  var respTime = getTime();\n                  blockNumber = BigNumber.from(blockNumber).toNumber();\n\n                  if (blockNumber < _this4._maxInternalBlockNumber) {\n                    blockNumber = _this4._maxInternalBlockNumber;\n                  }\n\n                  _this4._maxInternalBlockNumber = blockNumber;\n\n                  _this4._setFastBlockNumber(blockNumber); // @TODO: Still need this?\n\n\n                  return {\n                    blockNumber: blockNumber,\n                    reqTime: reqTime,\n                    respTime: respTime\n                  };\n                });\n                this._internalBlockNumber = checkInternalBlockNumber; // Swallow unhandled exceptions; if needed they are handled else where\n\n                checkInternalBlockNumber.catch(function (error) {\n                  // Don't null the dead (rejected) fetch, if it has already been updated\n                  if (_this4._internalBlockNumber === checkInternalBlockNumber) {\n                    _this4._internalBlockNumber = null;\n                  }\n                });\n                _context9.next = 26;\n                return checkInternalBlockNumber;\n\n              case 26:\n                return _context9.abrupt(\"return\", _context9.sent.blockNumber);\n\n              case 27:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this, [[5, 14]]);\n      }));\n    }\n  }, {\n    key: \"poll\",\n    value: function poll() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {\n        var _this5 = this;\n\n        var pollId, runners, blockNumber, i;\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                pollId = nextPollId++; // Track all running promises, so we can trigger a post-poll once they are complete\n\n                runners = [];\n                blockNumber = null;\n                _context10.prev = 3;\n                _context10.next = 6;\n                return this._getInternalBlockNumber(100 + this.pollingInterval / 2);\n\n              case 6:\n                blockNumber = _context10.sent;\n                _context10.next = 13;\n                break;\n\n              case 9:\n                _context10.prev = 9;\n                _context10.t0 = _context10[\"catch\"](3);\n                this.emit(\"error\", _context10.t0);\n                return _context10.abrupt(\"return\");\n\n              case 13:\n                this._setFastBlockNumber(blockNumber); // Emit a poll event after we have the latest (fast) block number\n\n\n                this.emit(\"poll\", pollId, blockNumber); // If the block has not changed, meh.\n\n                if (!(blockNumber === this._lastBlockNumber)) {\n                  _context10.next = 18;\n                  break;\n                }\n\n                this.emit(\"didPoll\", pollId);\n                return _context10.abrupt(\"return\");\n\n              case 18:\n                // First polling cycle, trigger a \"block\" events\n                if (this._emitted.block === -2) {\n                  this._emitted.block = blockNumber - 1;\n                }\n\n                if (Math.abs(this._emitted.block - blockNumber) > 1000) {\n                  logger.warn(\"network block skew detected; skipping block events (emitted=\".concat(this._emitted.block, \" blockNumber\").concat(blockNumber, \")\"));\n                  this.emit(\"error\", logger.makeError(\"network block skew detected\", Logger.errors.NETWORK_ERROR, {\n                    blockNumber: blockNumber,\n                    event: \"blockSkew\",\n                    previousBlockNumber: this._emitted.block\n                  }));\n                  this.emit(\"block\", blockNumber);\n                } else {\n                  // Notify all listener for each block that has passed\n                  for (i = this._emitted.block + 1; i <= blockNumber; i++) {\n                    this.emit(\"block\", i);\n                  }\n                } // The emitted block was updated, check for obsolete events\n\n\n                if (this._emitted.block !== blockNumber) {\n                  this._emitted.block = blockNumber;\n                  Object.keys(this._emitted).forEach(function (key) {\n                    // The block event does not expire\n                    if (key === \"block\") {\n                      return;\n                    } // The block we were at when we emitted this event\n\n\n                    var eventBlockNumber = _this5._emitted[key]; // We cannot garbage collect pending transactions or blocks here\n                    // They should be garbage collected by the Provider when setting\n                    // \"pending\" events\n\n                    if (eventBlockNumber === \"pending\") {\n                      return;\n                    } // Evict any transaction hashes or block hashes over 12 blocks\n                    // old, since they should not return null anyways\n\n\n                    if (blockNumber - eventBlockNumber > 12) {\n                      delete _this5._emitted[key];\n                    }\n                  });\n                } // First polling cycle\n\n\n                if (this._lastBlockNumber === -2) {\n                  this._lastBlockNumber = blockNumber - 1;\n                } // Find all transaction hashes we are waiting on\n\n\n                this._events.forEach(function (event) {\n                  switch (event.type) {\n                    case \"tx\":\n                      {\n                        var hash = event.hash;\n\n                        var runner = _this5.getTransactionReceipt(hash).then(function (receipt) {\n                          if (!receipt || receipt.blockNumber == null) {\n                            return null;\n                          }\n\n                          _this5._emitted[\"t:\" + hash] = receipt.blockNumber;\n\n                          _this5.emit(hash, receipt);\n\n                          return null;\n                        }).catch(function (error) {\n                          _this5.emit(\"error\", error);\n                        });\n\n                        runners.push(runner);\n                        break;\n                      }\n\n                    case \"filter\":\n                      {\n                        // We only allow a single getLogs to be in-flight at a time\n                        if (!event._inflight) {\n                          event._inflight = true; // Filter from the last known event; due to load-balancing\n                          // and some nodes returning updated block numbers before\n                          // indexing events, a logs result with 0 entries cannot be\n                          // trusted and we must retry a range which includes it again\n\n                          var filter = event.filter;\n                          filter.fromBlock = event._lastBlockNumber + 1;\n                          filter.toBlock = blockNumber; // Prevent fitler ranges from growing too wild\n\n                          if (filter.toBlock - _this5._maxFilterBlockRange > filter.fromBlock) {\n                            filter.fromBlock = filter.toBlock - _this5._maxFilterBlockRange;\n                          }\n\n                          var _runner = _this5.getLogs(filter).then(function (logs) {\n                            // Allow the next getLogs\n                            event._inflight = false;\n\n                            if (logs.length === 0) {\n                              return;\n                            }\n\n                            logs.forEach(function (log) {\n                              // Only when we get an event for a given block number\n                              // can we trust the events are indexed\n                              if (log.blockNumber > event._lastBlockNumber) {\n                                event._lastBlockNumber = log.blockNumber;\n                              } // Make sure we stall requests to fetch blocks and txs\n\n\n                              _this5._emitted[\"b:\" + log.blockHash] = log.blockNumber;\n                              _this5._emitted[\"t:\" + log.transactionHash] = log.blockNumber;\n\n                              _this5.emit(filter, log);\n                            });\n                          }).catch(function (error) {\n                            _this5.emit(\"error\", error); // Allow another getLogs (the range was not updated)\n\n\n                            event._inflight = false;\n                          });\n\n                          runners.push(_runner);\n                        }\n\n                        break;\n                      }\n                  }\n                });\n\n                this._lastBlockNumber = blockNumber; // Once all events for this loop have been processed, emit \"didPoll\"\n\n                Promise.all(runners).then(function () {\n                  _this5.emit(\"didPoll\", pollId);\n                }).catch(function (error) {\n                  _this5.emit(\"error\", error);\n                });\n                return _context10.abrupt(\"return\");\n\n              case 26:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this, [[3, 9]]);\n      }));\n    } // Deprecated; do not use this\n\n  }, {\n    key: \"resetEventsBlock\",\n    value: function resetEventsBlock(blockNumber) {\n      this._lastBlockNumber = blockNumber - 1;\n\n      if (this.polling) {\n        this.poll();\n      }\n    }\n  }, {\n    key: \"network\",\n    get: function get() {\n      return this._network;\n    } // This method should query the network if the underlying network\n    // can change, such as when connected to a JSON-RPC backend\n\n  }, {\n    key: \"detectNetwork\",\n    value: function detectNetwork() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {\n        return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                return _context11.abrupt(\"return\", logger.throwError(\"provider does not support network detection\", Logger.errors.UNSUPPORTED_OPERATION, {\n                  operation: \"provider.detectNetwork\"\n                }));\n\n              case 1:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11);\n      }));\n    }\n  }, {\n    key: \"getNetwork\",\n    value: function getNetwork() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee12() {\n        var network, currentNetwork, error;\n        return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                _context12.next = 2;\n                return this._ready();\n\n              case 2:\n                network = _context12.sent;\n                _context12.next = 5;\n                return this.detectNetwork();\n\n              case 5:\n                currentNetwork = _context12.sent;\n\n                if (!(network.chainId !== currentNetwork.chainId)) {\n                  _context12.next = 23;\n                  break;\n                }\n\n                if (!this.anyNetwork) {\n                  _context12.next = 20;\n                  break;\n                }\n\n                this._network = currentNetwork; // Reset all internal block number guards and caches\n\n                this._lastBlockNumber = -2;\n                this._fastBlockNumber = null;\n                this._fastBlockNumberPromise = null;\n                this._fastQueryDate = 0;\n                this._emitted.block = -2;\n                this._maxInternalBlockNumber = -1024;\n                this._internalBlockNumber = null; // The \"network\" event MUST happen before this method resolves\n                // so any events have a chance to unregister, so we stall an\n                // additional event loop before returning from /this/ call\n\n                this.emit(\"network\", currentNetwork, network);\n                _context12.next = 19;\n                return stall(0);\n\n              case 19:\n                return _context12.abrupt(\"return\", this._network);\n\n              case 20:\n                error = logger.makeError(\"underlying network changed\", Logger.errors.NETWORK_ERROR, {\n                  event: \"changed\",\n                  network: network,\n                  detectedNetwork: currentNetwork\n                });\n                this.emit(\"error\", error);\n                throw error;\n\n              case 23:\n                return _context12.abrupt(\"return\", network);\n\n              case 24:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n    }\n  }, {\n    key: \"blockNumber\",\n    get: function get() {\n      var _this6 = this;\n\n      this._getInternalBlockNumber(100 + this.pollingInterval / 2).then(function (blockNumber) {\n        _this6._setFastBlockNumber(blockNumber);\n      }, function (error) {});\n\n      return this._fastBlockNumber != null ? this._fastBlockNumber : -1;\n    }\n  }, {\n    key: \"polling\",\n    get: function get() {\n      return this._poller != null;\n    },\n    set: function set(value) {\n      var _this7 = this;\n\n      if (value && !this._poller) {\n        this._poller = setInterval(function () {\n          _this7.poll();\n        }, this.pollingInterval);\n\n        if (!this._bootstrapPoll) {\n          this._bootstrapPoll = setTimeout(function () {\n            _this7.poll(); // We block additional polls until the polling interval\n            // is done, to prevent overwhelming the poll function\n\n\n            _this7._bootstrapPoll = setTimeout(function () {\n              // If polling was disabled, something may require a poke\n              // since starting the bootstrap poll and it was disabled\n              if (!_this7._poller) {\n                _this7.poll();\n              } // Clear out the bootstrap so we can do another\n\n\n              _this7._bootstrapPoll = null;\n            }, _this7.pollingInterval);\n          }, 0);\n        }\n      } else if (!value && this._poller) {\n        clearInterval(this._poller);\n        this._poller = null;\n      }\n    }\n  }, {\n    key: \"pollingInterval\",\n    get: function get() {\n      return this._pollingInterval;\n    },\n    set: function set(value) {\n      var _this8 = this;\n\n      if (typeof value !== \"number\" || value <= 0 || parseInt(String(value)) != value) {\n        throw new Error(\"invalid polling interval\");\n      }\n\n      this._pollingInterval = value;\n\n      if (this._poller) {\n        clearInterval(this._poller);\n        this._poller = setInterval(function () {\n          _this8.poll();\n        }, this._pollingInterval);\n      }\n    }\n  }, {\n    key: \"_getFastBlockNumber\",\n    value: function _getFastBlockNumber() {\n      var _this9 = this;\n\n      var now = getTime(); // Stale block number, request a newer value\n\n      if (now - this._fastQueryDate > 2 * this._pollingInterval) {\n        this._fastQueryDate = now;\n        this._fastBlockNumberPromise = this.getBlockNumber().then(function (blockNumber) {\n          if (_this9._fastBlockNumber == null || blockNumber > _this9._fastBlockNumber) {\n            _this9._fastBlockNumber = blockNumber;\n          }\n\n          return _this9._fastBlockNumber;\n        });\n      }\n\n      return this._fastBlockNumberPromise;\n    }\n  }, {\n    key: \"_setFastBlockNumber\",\n    value: function _setFastBlockNumber(blockNumber) {\n      // Older block, maybe a stale request\n      if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) {\n        return;\n      } // Update the time we updated the blocknumber\n\n\n      this._fastQueryDate = getTime(); // Newer block number, use  it\n\n      if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n        this._fastBlockNumber = blockNumber;\n        this._fastBlockNumberPromise = Promise.resolve(blockNumber);\n      }\n    }\n  }, {\n    key: \"waitForTransaction\",\n    value: function waitForTransaction(transactionHash, confirmations, timeout) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee13() {\n        return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                return _context13.abrupt(\"return\", this._waitForTransaction(transactionHash, confirmations == null ? 1 : confirmations, timeout || 0, null));\n\n              case 1:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n    }\n  }, {\n    key: \"_waitForTransaction\",\n    value: function _waitForTransaction(transactionHash, confirmations, timeout, replaceable) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee16() {\n        var _this10 = this;\n\n        var receipt;\n        return _regeneratorRuntime().wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                _context16.next = 2;\n                return this.getTransactionReceipt(transactionHash);\n\n              case 2:\n                receipt = _context16.sent;\n\n                if (!((receipt ? receipt.confirmations : 0) >= confirmations)) {\n                  _context16.next = 5;\n                  break;\n                }\n\n                return _context16.abrupt(\"return\", receipt);\n\n              case 5:\n                return _context16.abrupt(\"return\", new Promise(function (resolve, reject) {\n                  var cancelFuncs = [];\n                  var done = false;\n\n                  var alreadyDone = function alreadyDone() {\n                    if (done) {\n                      return true;\n                    }\n\n                    done = true;\n                    cancelFuncs.forEach(function (func) {\n                      func();\n                    });\n                    return false;\n                  };\n\n                  var minedHandler = function minedHandler(receipt) {\n                    if (receipt.confirmations < confirmations) {\n                      return;\n                    }\n\n                    if (alreadyDone()) {\n                      return;\n                    }\n\n                    resolve(receipt);\n                  };\n\n                  _this10.on(transactionHash, minedHandler);\n\n                  cancelFuncs.push(function () {\n                    _this10.removeListener(transactionHash, minedHandler);\n                  });\n\n                  if (replaceable) {\n                    var lastBlockNumber = replaceable.startBlock;\n                    var scannedBlock = null;\n\n                    var replaceHandler = function replaceHandler(blockNumber) {\n                      return __awaiter(_this10, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee15() {\n                        var _this11 = this;\n\n                        return _regeneratorRuntime().wrap(function _callee15$(_context15) {\n                          while (1) {\n                            switch (_context15.prev = _context15.next) {\n                              case 0:\n                                if (!done) {\n                                  _context15.next = 2;\n                                  break;\n                                }\n\n                                return _context15.abrupt(\"return\");\n\n                              case 2:\n                                _context15.next = 4;\n                                return stall(1000);\n\n                              case 4:\n                                this.getTransactionCount(replaceable.from).then(function (nonce) {\n                                  return __awaiter(_this11, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee14() {\n                                    var mined, block, ti, tx, _receipt, reason;\n\n                                    return _regeneratorRuntime().wrap(function _callee14$(_context14) {\n                                      while (1) {\n                                        switch (_context14.prev = _context14.next) {\n                                          case 0:\n                                            if (!done) {\n                                              _context14.next = 2;\n                                              break;\n                                            }\n\n                                            return _context14.abrupt(\"return\");\n\n                                          case 2:\n                                            if (!(nonce <= replaceable.nonce)) {\n                                              _context14.next = 6;\n                                              break;\n                                            }\n\n                                            lastBlockNumber = blockNumber;\n                                            _context14.next = 41;\n                                            break;\n\n                                          case 6:\n                                            _context14.next = 8;\n                                            return this.getTransaction(transactionHash);\n\n                                          case 8:\n                                            mined = _context14.sent;\n\n                                            if (!(mined && mined.blockNumber != null)) {\n                                              _context14.next = 11;\n                                              break;\n                                            }\n\n                                            return _context14.abrupt(\"return\");\n\n                                          case 11:\n                                            // First time scanning. We start a little earlier for some\n                                            // wiggle room here to handle the eventually consistent nature\n                                            // of blockchain (e.g. the getTransactionCount was for a\n                                            // different block)\n                                            if (scannedBlock == null) {\n                                              scannedBlock = lastBlockNumber - 3;\n\n                                              if (scannedBlock < replaceable.startBlock) {\n                                                scannedBlock = replaceable.startBlock;\n                                              }\n                                            }\n\n                                          case 12:\n                                            if (!(scannedBlock <= blockNumber)) {\n                                              _context14.next = 41;\n                                              break;\n                                            }\n\n                                            if (!done) {\n                                              _context14.next = 15;\n                                              break;\n                                            }\n\n                                            return _context14.abrupt(\"return\");\n\n                                          case 15:\n                                            _context14.next = 17;\n                                            return this.getBlockWithTransactions(scannedBlock);\n\n                                          case 17:\n                                            block = _context14.sent;\n                                            ti = 0;\n\n                                          case 19:\n                                            if (!(ti < block.transactions.length)) {\n                                              _context14.next = 38;\n                                              break;\n                                            }\n\n                                            tx = block.transactions[ti]; // Successfully mined!\n\n                                            if (!(tx.hash === transactionHash)) {\n                                              _context14.next = 23;\n                                              break;\n                                            }\n\n                                            return _context14.abrupt(\"return\");\n\n                                          case 23:\n                                            if (!(tx.from === replaceable.from && tx.nonce === replaceable.nonce)) {\n                                              _context14.next = 35;\n                                              break;\n                                            }\n\n                                            if (!done) {\n                                              _context14.next = 26;\n                                              break;\n                                            }\n\n                                            return _context14.abrupt(\"return\");\n\n                                          case 26:\n                                            _context14.next = 28;\n                                            return this.waitForTransaction(tx.hash, confirmations);\n\n                                          case 28:\n                                            _receipt = _context14.sent;\n\n                                            if (!alreadyDone()) {\n                                              _context14.next = 31;\n                                              break;\n                                            }\n\n                                            return _context14.abrupt(\"return\");\n\n                                          case 31:\n                                            // The reason we were replaced\n                                            reason = \"replaced\";\n\n                                            if (tx.data === replaceable.data && tx.to === replaceable.to && tx.value.eq(replaceable.value)) {\n                                              reason = \"repriced\";\n                                            } else if (tx.data === \"0x\" && tx.from === tx.to && tx.value.isZero()) {\n                                              reason = \"cancelled\";\n                                            } // Explain why we were replaced\n\n\n                                            reject(logger.makeError(\"transaction was replaced\", Logger.errors.TRANSACTION_REPLACED, {\n                                              cancelled: reason === \"replaced\" || reason === \"cancelled\",\n                                              reason: reason,\n                                              replacement: this._wrapTransaction(tx),\n                                              hash: transactionHash,\n                                              receipt: _receipt\n                                            }));\n                                            return _context14.abrupt(\"return\");\n\n                                          case 35:\n                                            ti++;\n                                            _context14.next = 19;\n                                            break;\n\n                                          case 38:\n                                            scannedBlock++;\n                                            _context14.next = 12;\n                                            break;\n\n                                          case 41:\n                                            if (!done) {\n                                              _context14.next = 43;\n                                              break;\n                                            }\n\n                                            return _context14.abrupt(\"return\");\n\n                                          case 43:\n                                            this.once(\"block\", replaceHandler);\n\n                                          case 44:\n                                          case \"end\":\n                                            return _context14.stop();\n                                        }\n                                      }\n                                    }, _callee14, this);\n                                  }));\n                                }, function (error) {\n                                  if (done) {\n                                    return;\n                                  }\n\n                                  _this11.once(\"block\", replaceHandler);\n                                });\n\n                              case 5:\n                              case \"end\":\n                                return _context15.stop();\n                            }\n                          }\n                        }, _callee15, this);\n                      }));\n                    };\n\n                    if (done) {\n                      return;\n                    }\n\n                    _this10.once(\"block\", replaceHandler);\n\n                    cancelFuncs.push(function () {\n                      _this10.removeListener(\"block\", replaceHandler);\n                    });\n                  }\n\n                  if (typeof timeout === \"number\" && timeout > 0) {\n                    var timer = setTimeout(function () {\n                      if (alreadyDone()) {\n                        return;\n                      }\n\n                      reject(logger.makeError(\"timeout exceeded\", Logger.errors.TIMEOUT, {\n                        timeout: timeout\n                      }));\n                    }, timeout);\n\n                    if (timer.unref) {\n                      timer.unref();\n                    }\n\n                    cancelFuncs.push(function () {\n                      clearTimeout(timer);\n                    });\n                  }\n                }));\n\n              case 6:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n    }\n  }, {\n    key: \"getBlockNumber\",\n    value: function getBlockNumber() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee17() {\n        return _regeneratorRuntime().wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                return _context17.abrupt(\"return\", this._getInternalBlockNumber(0));\n\n              case 1:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this);\n      }));\n    }\n  }, {\n    key: \"getGasPrice\",\n    value: function getGasPrice() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee18() {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                _context18.next = 2;\n                return this.getNetwork();\n\n              case 2:\n                _context18.next = 4;\n                return this.perform(\"getGasPrice\", {});\n\n              case 4:\n                result = _context18.sent;\n                _context18.prev = 5;\n                return _context18.abrupt(\"return\", BigNumber.from(result));\n\n              case 9:\n                _context18.prev = 9;\n                _context18.t0 = _context18[\"catch\"](5);\n                return _context18.abrupt(\"return\", logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                  method: \"getGasPrice\",\n                  result: result,\n                  error: _context18.t0\n                }));\n\n              case 12:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this, [[5, 9]]);\n      }));\n    }\n  }, {\n    key: \"getBalance\",\n    value: function getBalance(addressOrName, blockTag) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee19() {\n        var params, result;\n        return _regeneratorRuntime().wrap(function _callee19$(_context19) {\n          while (1) {\n            switch (_context19.prev = _context19.next) {\n              case 0:\n                _context19.next = 2;\n                return this.getNetwork();\n\n              case 2:\n                _context19.next = 4;\n                return resolveProperties({\n                  address: this._getAddress(addressOrName),\n                  blockTag: this._getBlockTag(blockTag)\n                });\n\n              case 4:\n                params = _context19.sent;\n                _context19.next = 7;\n                return this.perform(\"getBalance\", params);\n\n              case 7:\n                result = _context19.sent;\n                _context19.prev = 8;\n                return _context19.abrupt(\"return\", BigNumber.from(result));\n\n              case 12:\n                _context19.prev = 12;\n                _context19.t0 = _context19[\"catch\"](8);\n                return _context19.abrupt(\"return\", logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                  method: \"getBalance\",\n                  params: params,\n                  result: result,\n                  error: _context19.t0\n                }));\n\n              case 15:\n              case \"end\":\n                return _context19.stop();\n            }\n          }\n        }, _callee19, this, [[8, 12]]);\n      }));\n    }\n  }, {\n    key: \"getTransactionCount\",\n    value: function getTransactionCount(addressOrName, blockTag) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee20() {\n        var params, result;\n        return _regeneratorRuntime().wrap(function _callee20$(_context20) {\n          while (1) {\n            switch (_context20.prev = _context20.next) {\n              case 0:\n                _context20.next = 2;\n                return this.getNetwork();\n\n              case 2:\n                _context20.next = 4;\n                return resolveProperties({\n                  address: this._getAddress(addressOrName),\n                  blockTag: this._getBlockTag(blockTag)\n                });\n\n              case 4:\n                params = _context20.sent;\n                _context20.next = 7;\n                return this.perform(\"getTransactionCount\", params);\n\n              case 7:\n                result = _context20.sent;\n                _context20.prev = 8;\n                return _context20.abrupt(\"return\", BigNumber.from(result).toNumber());\n\n              case 12:\n                _context20.prev = 12;\n                _context20.t0 = _context20[\"catch\"](8);\n                return _context20.abrupt(\"return\", logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                  method: \"getTransactionCount\",\n                  params: params,\n                  result: result,\n                  error: _context20.t0\n                }));\n\n              case 15:\n              case \"end\":\n                return _context20.stop();\n            }\n          }\n        }, _callee20, this, [[8, 12]]);\n      }));\n    }\n  }, {\n    key: \"getCode\",\n    value: function getCode(addressOrName, blockTag) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee21() {\n        var params, result;\n        return _regeneratorRuntime().wrap(function _callee21$(_context21) {\n          while (1) {\n            switch (_context21.prev = _context21.next) {\n              case 0:\n                _context21.next = 2;\n                return this.getNetwork();\n\n              case 2:\n                _context21.next = 4;\n                return resolveProperties({\n                  address: this._getAddress(addressOrName),\n                  blockTag: this._getBlockTag(blockTag)\n                });\n\n              case 4:\n                params = _context21.sent;\n                _context21.next = 7;\n                return this.perform(\"getCode\", params);\n\n              case 7:\n                result = _context21.sent;\n                _context21.prev = 8;\n                return _context21.abrupt(\"return\", hexlify(result));\n\n              case 12:\n                _context21.prev = 12;\n                _context21.t0 = _context21[\"catch\"](8);\n                return _context21.abrupt(\"return\", logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                  method: \"getCode\",\n                  params: params,\n                  result: result,\n                  error: _context21.t0\n                }));\n\n              case 15:\n              case \"end\":\n                return _context21.stop();\n            }\n          }\n        }, _callee21, this, [[8, 12]]);\n      }));\n    }\n  }, {\n    key: \"getStorageAt\",\n    value: function getStorageAt(addressOrName, position, blockTag) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee22() {\n        var params, result;\n        return _regeneratorRuntime().wrap(function _callee22$(_context22) {\n          while (1) {\n            switch (_context22.prev = _context22.next) {\n              case 0:\n                _context22.next = 2;\n                return this.getNetwork();\n\n              case 2:\n                _context22.next = 4;\n                return resolveProperties({\n                  address: this._getAddress(addressOrName),\n                  blockTag: this._getBlockTag(blockTag),\n                  position: Promise.resolve(position).then(function (p) {\n                    return hexValue(p);\n                  })\n                });\n\n              case 4:\n                params = _context22.sent;\n                _context22.next = 7;\n                return this.perform(\"getStorageAt\", params);\n\n              case 7:\n                result = _context22.sent;\n                _context22.prev = 8;\n                return _context22.abrupt(\"return\", hexlify(result));\n\n              case 12:\n                _context22.prev = 12;\n                _context22.t0 = _context22[\"catch\"](8);\n                return _context22.abrupt(\"return\", logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                  method: \"getStorageAt\",\n                  params: params,\n                  result: result,\n                  error: _context22.t0\n                }));\n\n              case 15:\n              case \"end\":\n                return _context22.stop();\n            }\n          }\n        }, _callee22, this, [[8, 12]]);\n      }));\n    } // This should be called by any subclass wrapping a TransactionResponse\n\n  }, {\n    key: \"_wrapTransaction\",\n    value: function _wrapTransaction(tx, hash, startBlock) {\n      var _this12 = this;\n\n      if (hash != null && hexDataLength(hash) !== 32) {\n        throw new Error(\"invalid response - sendTransaction\");\n      }\n\n      var result = tx; // Check the hash we expect is the same as the hash the server reported\n\n      if (hash != null && tx.hash !== hash) {\n        logger.throwError(\"Transaction hash mismatch from Provider.sendTransaction.\", Logger.errors.UNKNOWN_ERROR, {\n          expectedHash: tx.hash,\n          returnedHash: hash\n        });\n      }\n\n      result.wait = function (confirms, timeout) {\n        return __awaiter(_this12, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee23() {\n          var replacement, receipt;\n          return _regeneratorRuntime().wrap(function _callee23$(_context23) {\n            while (1) {\n              switch (_context23.prev = _context23.next) {\n                case 0:\n                  if (confirms == null) {\n                    confirms = 1;\n                  }\n\n                  if (timeout == null) {\n                    timeout = 0;\n                  } // Get the details to detect replacement\n\n\n                  replacement = undefined;\n\n                  if (confirms !== 0 && startBlock != null) {\n                    replacement = {\n                      data: tx.data,\n                      from: tx.from,\n                      nonce: tx.nonce,\n                      to: tx.to,\n                      value: tx.value,\n                      startBlock: startBlock\n                    };\n                  }\n\n                  _context23.next = 6;\n                  return this._waitForTransaction(tx.hash, confirms, timeout, replacement);\n\n                case 6:\n                  receipt = _context23.sent;\n\n                  if (!(receipt == null && confirms === 0)) {\n                    _context23.next = 9;\n                    break;\n                  }\n\n                  return _context23.abrupt(\"return\", null);\n\n                case 9:\n                  // No longer pending, allow the polling loop to garbage collect this\n                  this._emitted[\"t:\" + tx.hash] = receipt.blockNumber;\n\n                  if (receipt.status === 0) {\n                    logger.throwError(\"transaction failed\", Logger.errors.CALL_EXCEPTION, {\n                      transactionHash: tx.hash,\n                      transaction: tx,\n                      receipt: receipt\n                    });\n                  }\n\n                  return _context23.abrupt(\"return\", receipt);\n\n                case 12:\n                case \"end\":\n                  return _context23.stop();\n              }\n            }\n          }, _callee23, this);\n        }));\n      };\n\n      return result;\n    }\n  }, {\n    key: \"sendTransaction\",\n    value: function sendTransaction(signedTransaction) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee24() {\n        var hexTx, tx, blockNumber, hash;\n        return _regeneratorRuntime().wrap(function _callee24$(_context24) {\n          while (1) {\n            switch (_context24.prev = _context24.next) {\n              case 0:\n                _context24.next = 2;\n                return this.getNetwork();\n\n              case 2:\n                _context24.next = 4;\n                return Promise.resolve(signedTransaction).then(function (t) {\n                  return hexlify(t);\n                });\n\n              case 4:\n                hexTx = _context24.sent;\n                tx = this.formatter.transaction(signedTransaction);\n\n                if (tx.confirmations == null) {\n                  tx.confirmations = 0;\n                }\n\n                _context24.next = 9;\n                return this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n\n              case 9:\n                blockNumber = _context24.sent;\n                _context24.prev = 10;\n                _context24.next = 13;\n                return this.perform(\"sendTransaction\", {\n                  signedTransaction: hexTx\n                });\n\n              case 13:\n                hash = _context24.sent;\n                return _context24.abrupt(\"return\", this._wrapTransaction(tx, hash, blockNumber));\n\n              case 17:\n                _context24.prev = 17;\n                _context24.t0 = _context24[\"catch\"](10);\n                _context24.t0.transaction = tx;\n                _context24.t0.transactionHash = tx.hash;\n                throw _context24.t0;\n\n              case 22:\n              case \"end\":\n                return _context24.stop();\n            }\n          }\n        }, _callee24, this, [[10, 17]]);\n      }));\n    }\n  }, {\n    key: \"_getTransactionRequest\",\n    value: function _getTransactionRequest(transaction) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee25() {\n        var _this13 = this;\n\n        var values, tx;\n        return _regeneratorRuntime().wrap(function _callee25$(_context25) {\n          while (1) {\n            switch (_context25.prev = _context25.next) {\n              case 0:\n                _context25.next = 2;\n                return transaction;\n\n              case 2:\n                values = _context25.sent;\n                tx = {};\n                [\"from\", \"to\"].forEach(function (key) {\n                  if (values[key] == null) {\n                    return;\n                  }\n\n                  tx[key] = Promise.resolve(values[key]).then(function (v) {\n                    return v ? _this13._getAddress(v) : null;\n                  });\n                });\n                [\"gasLimit\", \"gasPrice\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"value\"].forEach(function (key) {\n                  if (values[key] == null) {\n                    return;\n                  }\n\n                  tx[key] = Promise.resolve(values[key]).then(function (v) {\n                    return v ? BigNumber.from(v) : null;\n                  });\n                });\n                [\"type\"].forEach(function (key) {\n                  if (values[key] == null) {\n                    return;\n                  }\n\n                  tx[key] = Promise.resolve(values[key]).then(function (v) {\n                    return v != null ? v : null;\n                  });\n                });\n\n                if (values.accessList) {\n                  tx.accessList = this.formatter.accessList(values.accessList);\n                }\n\n                [\"data\"].forEach(function (key) {\n                  if (values[key] == null) {\n                    return;\n                  }\n\n                  tx[key] = Promise.resolve(values[key]).then(function (v) {\n                    return v ? hexlify(v) : null;\n                  });\n                });\n                _context25.t0 = this.formatter;\n                _context25.next = 12;\n                return resolveProperties(tx);\n\n              case 12:\n                _context25.t1 = _context25.sent;\n                return _context25.abrupt(\"return\", _context25.t0.transactionRequest.call(_context25.t0, _context25.t1));\n\n              case 14:\n              case \"end\":\n                return _context25.stop();\n            }\n          }\n        }, _callee25, this);\n      }));\n    }\n  }, {\n    key: \"_getFilter\",\n    value: function _getFilter(filter) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee26() {\n        var _this14 = this;\n\n        var result;\n        return _regeneratorRuntime().wrap(function _callee26$(_context26) {\n          while (1) {\n            switch (_context26.prev = _context26.next) {\n              case 0:\n                _context26.next = 2;\n                return filter;\n\n              case 2:\n                filter = _context26.sent;\n                result = {};\n\n                if (filter.address != null) {\n                  result.address = this._getAddress(filter.address);\n                }\n\n                [\"blockHash\", \"topics\"].forEach(function (key) {\n                  if (filter[key] == null) {\n                    return;\n                  }\n\n                  result[key] = filter[key];\n                });\n                [\"fromBlock\", \"toBlock\"].forEach(function (key) {\n                  if (filter[key] == null) {\n                    return;\n                  }\n\n                  result[key] = _this14._getBlockTag(filter[key]);\n                });\n                _context26.t0 = this.formatter;\n                _context26.next = 10;\n                return resolveProperties(result);\n\n              case 10:\n                _context26.t1 = _context26.sent;\n                return _context26.abrupt(\"return\", _context26.t0.filter.call(_context26.t0, _context26.t1));\n\n              case 12:\n              case \"end\":\n                return _context26.stop();\n            }\n          }\n        }, _callee26, this);\n      }));\n    }\n  }, {\n    key: \"_call\",\n    value: function _call(transaction, blockTag, attempt) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee27() {\n        var txSender, result, data, sender, urls, urlsOffset, urlsLength, urlsData, u, url, calldata, callbackSelector, extraData, ccipResult, tx;\n        return _regeneratorRuntime().wrap(function _callee27$(_context27) {\n          while (1) {\n            switch (_context27.prev = _context27.next) {\n              case 0:\n                if (attempt >= MAX_CCIP_REDIRECTS) {\n                  logger.throwError(\"CCIP read exceeded maximum redirections\", Logger.errors.SERVER_ERROR, {\n                    redirects: attempt,\n                    transaction: transaction\n                  });\n                }\n\n                txSender = transaction.to;\n                _context27.next = 4;\n                return this.perform(\"call\", {\n                  transaction: transaction,\n                  blockTag: blockTag\n                });\n\n              case 4:\n                result = _context27.sent;\n\n                if (!(attempt >= 0 && blockTag === \"latest\" && txSender != null && result.substring(0, 10) === \"0x556f1830\" && hexDataLength(result) % 32 === 4)) {\n                  _context27.next = 31;\n                  break;\n                }\n\n                _context27.prev = 6;\n                data = hexDataSlice(result, 4); // Check the sender of the OffchainLookup matches the transaction\n\n                sender = hexDataSlice(data, 0, 32);\n\n                if (!BigNumber.from(sender).eq(txSender)) {\n                  logger.throwError(\"CCIP Read sender did not match\", Logger.errors.CALL_EXCEPTION, {\n                    name: \"OffchainLookup\",\n                    signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                    transaction: transaction,\n                    data: result\n                  });\n                } // Read the URLs from the response\n\n\n                urls = [];\n                urlsOffset = BigNumber.from(hexDataSlice(data, 32, 64)).toNumber();\n                urlsLength = BigNumber.from(hexDataSlice(data, urlsOffset, urlsOffset + 32)).toNumber();\n                urlsData = hexDataSlice(data, urlsOffset + 32);\n\n                for (u = 0; u < urlsLength; u++) {\n                  url = _parseString(urlsData, u * 32);\n\n                  if (url == null) {\n                    logger.throwError(\"CCIP Read contained corrupt URL string\", Logger.errors.CALL_EXCEPTION, {\n                      name: \"OffchainLookup\",\n                      signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                      transaction: transaction,\n                      data: result\n                    });\n                  }\n\n                  urls.push(url);\n                } // Get the CCIP calldata to forward\n\n\n                calldata = _parseBytes(data, 64); // Get the callbackSelector (bytes4)\n\n                if (!BigNumber.from(hexDataSlice(data, 100, 128)).isZero()) {\n                  logger.throwError(\"CCIP Read callback selector included junk\", Logger.errors.CALL_EXCEPTION, {\n                    name: \"OffchainLookup\",\n                    signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                    transaction: transaction,\n                    data: result\n                  });\n                }\n\n                callbackSelector = hexDataSlice(data, 96, 100); // Get the extra data to send back to the contract as context\n\n                extraData = _parseBytes(data, 128);\n                _context27.next = 21;\n                return this.ccipReadFetch(transaction, calldata, urls);\n\n              case 21:\n                ccipResult = _context27.sent;\n\n                if (ccipResult == null) {\n                  logger.throwError(\"CCIP Read disabled or provided no URLs\", Logger.errors.CALL_EXCEPTION, {\n                    name: \"OffchainLookup\",\n                    signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                    transaction: transaction,\n                    data: result\n                  });\n                }\n\n                tx = {\n                  to: txSender,\n                  data: hexConcat([callbackSelector, encodeBytes([ccipResult, extraData])])\n                };\n                return _context27.abrupt(\"return\", this._call(tx, blockTag, attempt + 1));\n\n              case 27:\n                _context27.prev = 27;\n                _context27.t0 = _context27[\"catch\"](6);\n\n                if (!(_context27.t0.code === Logger.errors.SERVER_ERROR)) {\n                  _context27.next = 31;\n                  break;\n                }\n\n                throw _context27.t0;\n\n              case 31:\n                _context27.prev = 31;\n                return _context27.abrupt(\"return\", hexlify(result));\n\n              case 35:\n                _context27.prev = 35;\n                _context27.t1 = _context27[\"catch\"](31);\n                return _context27.abrupt(\"return\", logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                  method: \"call\",\n                  params: {\n                    transaction: transaction,\n                    blockTag: blockTag\n                  },\n                  result: result,\n                  error: _context27.t1\n                }));\n\n              case 38:\n              case \"end\":\n                return _context27.stop();\n            }\n          }\n        }, _callee27, this, [[6, 27], [31, 35]]);\n      }));\n    }\n  }, {\n    key: \"call\",\n    value: function call(transaction, blockTag) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee28() {\n        var resolved;\n        return _regeneratorRuntime().wrap(function _callee28$(_context28) {\n          while (1) {\n            switch (_context28.prev = _context28.next) {\n              case 0:\n                _context28.next = 2;\n                return this.getNetwork();\n\n              case 2:\n                _context28.next = 4;\n                return resolveProperties({\n                  transaction: this._getTransactionRequest(transaction),\n                  blockTag: this._getBlockTag(blockTag),\n                  ccipReadEnabled: Promise.resolve(transaction.ccipReadEnabled)\n                });\n\n              case 4:\n                resolved = _context28.sent;\n                return _context28.abrupt(\"return\", this._call(resolved.transaction, resolved.blockTag, resolved.ccipReadEnabled ? 0 : -1));\n\n              case 6:\n              case \"end\":\n                return _context28.stop();\n            }\n          }\n        }, _callee28, this);\n      }));\n    }\n  }, {\n    key: \"estimateGas\",\n    value: function estimateGas(transaction) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee29() {\n        var params, result;\n        return _regeneratorRuntime().wrap(function _callee29$(_context29) {\n          while (1) {\n            switch (_context29.prev = _context29.next) {\n              case 0:\n                _context29.next = 2;\n                return this.getNetwork();\n\n              case 2:\n                _context29.next = 4;\n                return resolveProperties({\n                  transaction: this._getTransactionRequest(transaction)\n                });\n\n              case 4:\n                params = _context29.sent;\n                _context29.next = 7;\n                return this.perform(\"estimateGas\", params);\n\n              case 7:\n                result = _context29.sent;\n                _context29.prev = 8;\n                return _context29.abrupt(\"return\", BigNumber.from(result));\n\n              case 12:\n                _context29.prev = 12;\n                _context29.t0 = _context29[\"catch\"](8);\n                return _context29.abrupt(\"return\", logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                  method: \"estimateGas\",\n                  params: params,\n                  result: result,\n                  error: _context29.t0\n                }));\n\n              case 15:\n              case \"end\":\n                return _context29.stop();\n            }\n          }\n        }, _callee29, this, [[8, 12]]);\n      }));\n    }\n  }, {\n    key: \"_getAddress\",\n    value: function _getAddress(addressOrName) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee30() {\n        var address;\n        return _regeneratorRuntime().wrap(function _callee30$(_context30) {\n          while (1) {\n            switch (_context30.prev = _context30.next) {\n              case 0:\n                _context30.next = 2;\n                return addressOrName;\n\n              case 2:\n                addressOrName = _context30.sent;\n\n                if (typeof addressOrName !== \"string\") {\n                  logger.throwArgumentError(\"invalid address or ENS name\", \"name\", addressOrName);\n                }\n\n                _context30.next = 6;\n                return this.resolveName(addressOrName);\n\n              case 6:\n                address = _context30.sent;\n\n                if (address == null) {\n                  logger.throwError(\"ENS name not configured\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"resolveName(\".concat(JSON.stringify(addressOrName), \")\")\n                  });\n                }\n\n                return _context30.abrupt(\"return\", address);\n\n              case 9:\n              case \"end\":\n                return _context30.stop();\n            }\n          }\n        }, _callee30, this);\n      }));\n    }\n  }, {\n    key: \"_getBlock\",\n    value: function _getBlock(blockHashOrBlockTag, includeTransactions) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee32() {\n        var _this15 = this;\n\n        var blockNumber, params;\n        return _regeneratorRuntime().wrap(function _callee32$(_context32) {\n          while (1) {\n            switch (_context32.prev = _context32.next) {\n              case 0:\n                _context32.next = 2;\n                return this.getNetwork();\n\n              case 2:\n                _context32.next = 4;\n                return blockHashOrBlockTag;\n\n              case 4:\n                blockHashOrBlockTag = _context32.sent;\n                // If blockTag is a number (not \"latest\", etc), this is the block number\n                blockNumber = -128;\n                params = {\n                  includeTransactions: !!includeTransactions\n                };\n\n                if (!isHexString(blockHashOrBlockTag, 32)) {\n                  _context32.next = 11;\n                  break;\n                }\n\n                params.blockHash = blockHashOrBlockTag;\n                _context32.next = 21;\n                break;\n\n              case 11:\n                _context32.prev = 11;\n                _context32.next = 14;\n                return this._getBlockTag(blockHashOrBlockTag);\n\n              case 14:\n                params.blockTag = _context32.sent;\n\n                if (isHexString(params.blockTag)) {\n                  blockNumber = parseInt(params.blockTag.substring(2), 16);\n                }\n\n                _context32.next = 21;\n                break;\n\n              case 18:\n                _context32.prev = 18;\n                _context32.t0 = _context32[\"catch\"](11);\n                logger.throwArgumentError(\"invalid block hash or block tag\", \"blockHashOrBlockTag\", blockHashOrBlockTag);\n\n              case 21:\n                return _context32.abrupt(\"return\", poll(function () {\n                  return __awaiter(_this15, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee31() {\n                    var _this16 = this;\n\n                    var block, _blockNumber, i, tx, confirmations, blockWithTxs;\n\n                    return _regeneratorRuntime().wrap(function _callee31$(_context31) {\n                      while (1) {\n                        switch (_context31.prev = _context31.next) {\n                          case 0:\n                            _context31.next = 2;\n                            return this.perform(\"getBlock\", params);\n\n                          case 2:\n                            block = _context31.sent;\n\n                            if (!(block == null)) {\n                              _context31.next = 11;\n                              break;\n                            }\n\n                            if (!(params.blockHash != null)) {\n                              _context31.next = 7;\n                              break;\n                            }\n\n                            if (!(this._emitted[\"b:\" + params.blockHash] == null)) {\n                              _context31.next = 7;\n                              break;\n                            }\n\n                            return _context31.abrupt(\"return\", null);\n\n                          case 7:\n                            if (!(params.blockTag != null)) {\n                              _context31.next = 10;\n                              break;\n                            }\n\n                            if (!(blockNumber > this._emitted.block)) {\n                              _context31.next = 10;\n                              break;\n                            }\n\n                            return _context31.abrupt(\"return\", null);\n\n                          case 10:\n                            return _context31.abrupt(\"return\", undefined);\n\n                          case 11:\n                            if (!includeTransactions) {\n                              _context31.next = 34;\n                              break;\n                            }\n\n                            _blockNumber = null;\n                            i = 0;\n\n                          case 14:\n                            if (!(i < block.transactions.length)) {\n                              _context31.next = 31;\n                              break;\n                            }\n\n                            tx = block.transactions[i];\n\n                            if (!(tx.blockNumber == null)) {\n                              _context31.next = 20;\n                              break;\n                            }\n\n                            tx.confirmations = 0;\n                            _context31.next = 28;\n                            break;\n\n                          case 20:\n                            if (!(tx.confirmations == null)) {\n                              _context31.next = 28;\n                              break;\n                            }\n\n                            if (!(_blockNumber == null)) {\n                              _context31.next = 25;\n                              break;\n                            }\n\n                            _context31.next = 24;\n                            return this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n\n                          case 24:\n                            _blockNumber = _context31.sent;\n\n                          case 25:\n                            // Add the confirmations using the fast block number (pessimistic)\n                            confirmations = _blockNumber - tx.blockNumber + 1;\n\n                            if (confirmations <= 0) {\n                              confirmations = 1;\n                            }\n\n                            tx.confirmations = confirmations;\n\n                          case 28:\n                            i++;\n                            _context31.next = 14;\n                            break;\n\n                          case 31:\n                            blockWithTxs = this.formatter.blockWithTransactions(block);\n                            blockWithTxs.transactions = blockWithTxs.transactions.map(function (tx) {\n                              return _this16._wrapTransaction(tx);\n                            });\n                            return _context31.abrupt(\"return\", blockWithTxs);\n\n                          case 34:\n                            return _context31.abrupt(\"return\", this.formatter.block(block));\n\n                          case 35:\n                          case \"end\":\n                            return _context31.stop();\n                        }\n                      }\n                    }, _callee31, this);\n                  }));\n                }, {\n                  oncePoll: this\n                }));\n\n              case 22:\n              case \"end\":\n                return _context32.stop();\n            }\n          }\n        }, _callee32, this, [[11, 18]]);\n      }));\n    }\n  }, {\n    key: \"getBlock\",\n    value: function getBlock(blockHashOrBlockTag) {\n      return this._getBlock(blockHashOrBlockTag, false);\n    }\n  }, {\n    key: \"getBlockWithTransactions\",\n    value: function getBlockWithTransactions(blockHashOrBlockTag) {\n      return this._getBlock(blockHashOrBlockTag, true);\n    }\n  }, {\n    key: \"getTransaction\",\n    value: function getTransaction(transactionHash) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee34() {\n        var _this17 = this;\n\n        var params;\n        return _regeneratorRuntime().wrap(function _callee34$(_context34) {\n          while (1) {\n            switch (_context34.prev = _context34.next) {\n              case 0:\n                _context34.next = 2;\n                return this.getNetwork();\n\n              case 2:\n                _context34.next = 4;\n                return transactionHash;\n\n              case 4:\n                transactionHash = _context34.sent;\n                params = {\n                  transactionHash: this.formatter.hash(transactionHash, true)\n                };\n                return _context34.abrupt(\"return\", poll(function () {\n                  return __awaiter(_this17, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee33() {\n                    var result, tx, blockNumber, confirmations;\n                    return _regeneratorRuntime().wrap(function _callee33$(_context33) {\n                      while (1) {\n                        switch (_context33.prev = _context33.next) {\n                          case 0:\n                            _context33.next = 2;\n                            return this.perform(\"getTransaction\", params);\n\n                          case 2:\n                            result = _context33.sent;\n\n                            if (!(result == null)) {\n                              _context33.next = 7;\n                              break;\n                            }\n\n                            if (!(this._emitted[\"t:\" + transactionHash] == null)) {\n                              _context33.next = 6;\n                              break;\n                            }\n\n                            return _context33.abrupt(\"return\", null);\n\n                          case 6:\n                            return _context33.abrupt(\"return\", undefined);\n\n                          case 7:\n                            tx = this.formatter.transactionResponse(result);\n\n                            if (!(tx.blockNumber == null)) {\n                              _context33.next = 12;\n                              break;\n                            }\n\n                            tx.confirmations = 0;\n                            _context33.next = 19;\n                            break;\n\n                          case 12:\n                            if (!(tx.confirmations == null)) {\n                              _context33.next = 19;\n                              break;\n                            }\n\n                            _context33.next = 15;\n                            return this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n\n                          case 15:\n                            blockNumber = _context33.sent;\n                            // Add the confirmations using the fast block number (pessimistic)\n                            confirmations = blockNumber - tx.blockNumber + 1;\n\n                            if (confirmations <= 0) {\n                              confirmations = 1;\n                            }\n\n                            tx.confirmations = confirmations;\n\n                          case 19:\n                            return _context33.abrupt(\"return\", this._wrapTransaction(tx));\n\n                          case 20:\n                          case \"end\":\n                            return _context33.stop();\n                        }\n                      }\n                    }, _callee33, this);\n                  }));\n                }, {\n                  oncePoll: this\n                }));\n\n              case 7:\n              case \"end\":\n                return _context34.stop();\n            }\n          }\n        }, _callee34, this);\n      }));\n    }\n  }, {\n    key: \"getTransactionReceipt\",\n    value: function getTransactionReceipt(transactionHash) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee36() {\n        var _this18 = this;\n\n        var params;\n        return _regeneratorRuntime().wrap(function _callee36$(_context36) {\n          while (1) {\n            switch (_context36.prev = _context36.next) {\n              case 0:\n                _context36.next = 2;\n                return this.getNetwork();\n\n              case 2:\n                _context36.next = 4;\n                return transactionHash;\n\n              case 4:\n                transactionHash = _context36.sent;\n                params = {\n                  transactionHash: this.formatter.hash(transactionHash, true)\n                };\n                return _context36.abrupt(\"return\", poll(function () {\n                  return __awaiter(_this18, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee35() {\n                    var result, receipt, blockNumber, confirmations;\n                    return _regeneratorRuntime().wrap(function _callee35$(_context35) {\n                      while (1) {\n                        switch (_context35.prev = _context35.next) {\n                          case 0:\n                            _context35.next = 2;\n                            return this.perform(\"getTransactionReceipt\", params);\n\n                          case 2:\n                            result = _context35.sent;\n\n                            if (!(result == null)) {\n                              _context35.next = 7;\n                              break;\n                            }\n\n                            if (!(this._emitted[\"t:\" + transactionHash] == null)) {\n                              _context35.next = 6;\n                              break;\n                            }\n\n                            return _context35.abrupt(\"return\", null);\n\n                          case 6:\n                            return _context35.abrupt(\"return\", undefined);\n\n                          case 7:\n                            if (!(result.blockHash == null)) {\n                              _context35.next = 9;\n                              break;\n                            }\n\n                            return _context35.abrupt(\"return\", undefined);\n\n                          case 9:\n                            receipt = this.formatter.receipt(result);\n\n                            if (!(receipt.blockNumber == null)) {\n                              _context35.next = 14;\n                              break;\n                            }\n\n                            receipt.confirmations = 0;\n                            _context35.next = 21;\n                            break;\n\n                          case 14:\n                            if (!(receipt.confirmations == null)) {\n                              _context35.next = 21;\n                              break;\n                            }\n\n                            _context35.next = 17;\n                            return this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n\n                          case 17:\n                            blockNumber = _context35.sent;\n                            // Add the confirmations using the fast block number (pessimistic)\n                            confirmations = blockNumber - receipt.blockNumber + 1;\n\n                            if (confirmations <= 0) {\n                              confirmations = 1;\n                            }\n\n                            receipt.confirmations = confirmations;\n\n                          case 21:\n                            return _context35.abrupt(\"return\", receipt);\n\n                          case 22:\n                          case \"end\":\n                            return _context35.stop();\n                        }\n                      }\n                    }, _callee35, this);\n                  }));\n                }, {\n                  oncePoll: this\n                }));\n\n              case 7:\n              case \"end\":\n                return _context36.stop();\n            }\n          }\n        }, _callee36, this);\n      }));\n    }\n  }, {\n    key: \"getLogs\",\n    value: function getLogs(filter) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee37() {\n        var params, logs;\n        return _regeneratorRuntime().wrap(function _callee37$(_context37) {\n          while (1) {\n            switch (_context37.prev = _context37.next) {\n              case 0:\n                _context37.next = 2;\n                return this.getNetwork();\n\n              case 2:\n                _context37.next = 4;\n                return resolveProperties({\n                  filter: this._getFilter(filter)\n                });\n\n              case 4:\n                params = _context37.sent;\n                _context37.next = 7;\n                return this.perform(\"getLogs\", params);\n\n              case 7:\n                logs = _context37.sent;\n                logs.forEach(function (log) {\n                  if (log.removed == null) {\n                    log.removed = false;\n                  }\n                });\n                return _context37.abrupt(\"return\", Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs));\n\n              case 10:\n              case \"end\":\n                return _context37.stop();\n            }\n          }\n        }, _callee37, this);\n      }));\n    }\n  }, {\n    key: \"getEtherPrice\",\n    value: function getEtherPrice() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee38() {\n        return _regeneratorRuntime().wrap(function _callee38$(_context38) {\n          while (1) {\n            switch (_context38.prev = _context38.next) {\n              case 0:\n                _context38.next = 2;\n                return this.getNetwork();\n\n              case 2:\n                return _context38.abrupt(\"return\", this.perform(\"getEtherPrice\", {}));\n\n              case 3:\n              case \"end\":\n                return _context38.stop();\n            }\n          }\n        }, _callee38, this);\n      }));\n    }\n  }, {\n    key: \"_getBlockTag\",\n    value: function _getBlockTag(blockTag) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee39() {\n        var blockNumber;\n        return _regeneratorRuntime().wrap(function _callee39$(_context39) {\n          while (1) {\n            switch (_context39.prev = _context39.next) {\n              case 0:\n                _context39.next = 2;\n                return blockTag;\n\n              case 2:\n                blockTag = _context39.sent;\n\n                if (!(typeof blockTag === \"number\" && blockTag < 0)) {\n                  _context39.next = 11;\n                  break;\n                }\n\n                if (blockTag % 1) {\n                  logger.throwArgumentError(\"invalid BlockTag\", \"blockTag\", blockTag);\n                }\n\n                _context39.next = 7;\n                return this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n\n              case 7:\n                blockNumber = _context39.sent;\n                blockNumber += blockTag;\n\n                if (blockNumber < 0) {\n                  blockNumber = 0;\n                }\n\n                return _context39.abrupt(\"return\", this.formatter.blockTag(blockNumber));\n\n              case 11:\n                return _context39.abrupt(\"return\", this.formatter.blockTag(blockTag));\n\n              case 12:\n              case \"end\":\n                return _context39.stop();\n            }\n          }\n        }, _callee39, this);\n      }));\n    }\n  }, {\n    key: \"getResolver\",\n    value: function getResolver(name) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee40() {\n        var currentName, addr, resolver;\n        return _regeneratorRuntime().wrap(function _callee40$(_context40) {\n          while (1) {\n            switch (_context40.prev = _context40.next) {\n              case 0:\n                currentName = name;\n\n              case 1:\n                if (!true) {\n                  _context40.next = 22;\n                  break;\n                }\n\n                if (!(currentName === \"\" || currentName === \".\")) {\n                  _context40.next = 4;\n                  break;\n                }\n\n                return _context40.abrupt(\"return\", null);\n\n              case 4:\n                if (!(name !== \"eth\" && currentName === \"eth\")) {\n                  _context40.next = 6;\n                  break;\n                }\n\n                return _context40.abrupt(\"return\", null);\n\n              case 6:\n                _context40.next = 8;\n                return this._getResolver(currentName, \"getResolver\");\n\n              case 8:\n                addr = _context40.sent;\n\n                if (!(addr != null)) {\n                  _context40.next = 19;\n                  break;\n                }\n\n                resolver = new Resolver(this, addr, name); // Legacy resolver found, using EIP-2544 so it isn't safe to use\n\n                _context40.t0 = currentName !== name;\n\n                if (!_context40.t0) {\n                  _context40.next = 16;\n                  break;\n                }\n\n                _context40.next = 15;\n                return resolver.supportsWildcard();\n\n              case 15:\n                _context40.t0 = !_context40.sent;\n\n              case 16:\n                if (!_context40.t0) {\n                  _context40.next = 18;\n                  break;\n                }\n\n                return _context40.abrupt(\"return\", null);\n\n              case 18:\n                return _context40.abrupt(\"return\", resolver);\n\n              case 19:\n                // Get the parent node\n                currentName = currentName.split(\".\").slice(1).join(\".\");\n                _context40.next = 1;\n                break;\n\n              case 22:\n              case \"end\":\n                return _context40.stop();\n            }\n          }\n        }, _callee40, this);\n      }));\n    }\n  }, {\n    key: \"_getResolver\",\n    value: function _getResolver(name, operation) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee41() {\n        var network, addrData;\n        return _regeneratorRuntime().wrap(function _callee41$(_context41) {\n          while (1) {\n            switch (_context41.prev = _context41.next) {\n              case 0:\n                if (operation == null) {\n                  operation = \"ENS\";\n                }\n\n                _context41.next = 3;\n                return this.getNetwork();\n\n              case 3:\n                network = _context41.sent;\n\n                // No ENS...\n                if (!network.ensAddress) {\n                  logger.throwError(\"network does not support ENS\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: operation,\n                    network: network.name\n                  });\n                }\n\n                _context41.prev = 5;\n                _context41.next = 8;\n                return this.call({\n                  to: network.ensAddress,\n                  data: \"0x0178b8bf\" + namehash(name).substring(2)\n                });\n\n              case 8:\n                addrData = _context41.sent;\n                return _context41.abrupt(\"return\", this.formatter.callAddress(addrData));\n\n              case 12:\n                _context41.prev = 12;\n                _context41.t0 = _context41[\"catch\"](5);\n\n              case 14:\n                return _context41.abrupt(\"return\", null);\n\n              case 15:\n              case \"end\":\n                return _context41.stop();\n            }\n          }\n        }, _callee41, this, [[5, 12]]);\n      }));\n    }\n  }, {\n    key: \"resolveName\",\n    value: function resolveName(name) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee42() {\n        var resolver;\n        return _regeneratorRuntime().wrap(function _callee42$(_context42) {\n          while (1) {\n            switch (_context42.prev = _context42.next) {\n              case 0:\n                _context42.next = 2;\n                return name;\n\n              case 2:\n                name = _context42.sent;\n                _context42.prev = 3;\n                return _context42.abrupt(\"return\", Promise.resolve(this.formatter.address(name)));\n\n              case 7:\n                _context42.prev = 7;\n                _context42.t0 = _context42[\"catch\"](3);\n\n                if (!isHexString(name)) {\n                  _context42.next = 11;\n                  break;\n                }\n\n                throw _context42.t0;\n\n              case 11:\n                if (typeof name !== \"string\") {\n                  logger.throwArgumentError(\"invalid ENS name\", \"name\", name);\n                } // Get the addr from the resolver\n\n\n                _context42.next = 14;\n                return this.getResolver(name);\n\n              case 14:\n                resolver = _context42.sent;\n\n                if (resolver) {\n                  _context42.next = 17;\n                  break;\n                }\n\n                return _context42.abrupt(\"return\", null);\n\n              case 17:\n                _context42.next = 19;\n                return resolver.getAddress();\n\n              case 19:\n                return _context42.abrupt(\"return\", _context42.sent);\n\n              case 20:\n              case \"end\":\n                return _context42.stop();\n            }\n          }\n        }, _callee42, this, [[3, 7]]);\n      }));\n    }\n  }, {\n    key: \"lookupAddress\",\n    value: function lookupAddress(address) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee43() {\n        var node, resolverAddr, name, addr;\n        return _regeneratorRuntime().wrap(function _callee43$(_context43) {\n          while (1) {\n            switch (_context43.prev = _context43.next) {\n              case 0:\n                _context43.next = 2;\n                return address;\n\n              case 2:\n                address = _context43.sent;\n                address = this.formatter.address(address);\n                node = address.substring(2).toLowerCase() + \".addr.reverse\";\n                _context43.next = 7;\n                return this._getResolver(node, \"lookupAddress\");\n\n              case 7:\n                resolverAddr = _context43.sent;\n\n                if (!(resolverAddr == null)) {\n                  _context43.next = 10;\n                  break;\n                }\n\n                return _context43.abrupt(\"return\", null);\n\n              case 10:\n                _context43.t0 = _parseString;\n                _context43.next = 13;\n                return this.call({\n                  to: resolverAddr,\n                  data: \"0x691f3431\" + namehash(node).substring(2)\n                });\n\n              case 13:\n                _context43.t1 = _context43.sent;\n                name = (0, _context43.t0)(_context43.t1, 0);\n                _context43.next = 17;\n                return this.resolveName(name);\n\n              case 17:\n                addr = _context43.sent;\n\n                if (!(addr != address)) {\n                  _context43.next = 20;\n                  break;\n                }\n\n                return _context43.abrupt(\"return\", null);\n\n              case 20:\n                return _context43.abrupt(\"return\", name);\n\n              case 21:\n              case \"end\":\n                return _context43.stop();\n            }\n          }\n        }, _callee43, this);\n      }));\n    }\n  }, {\n    key: \"getAvatar\",\n    value: function getAvatar(nameOrAddress) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee44() {\n        var resolver, address, node, resolverAddress, _avatar, name, avatar;\n\n        return _regeneratorRuntime().wrap(function _callee44$(_context44) {\n          while (1) {\n            switch (_context44.prev = _context44.next) {\n              case 0:\n                resolver = null;\n\n                if (!isHexString(nameOrAddress)) {\n                  _context44.next = 40;\n                  break;\n                }\n\n                // Address; reverse lookup\n                address = this.formatter.address(nameOrAddress);\n                node = address.substring(2).toLowerCase() + \".addr.reverse\";\n                _context44.next = 6;\n                return this._getResolver(node, \"getAvatar\");\n\n              case 6:\n                resolverAddress = _context44.sent;\n\n                if (resolverAddress) {\n                  _context44.next = 9;\n                  break;\n                }\n\n                return _context44.abrupt(\"return\", null);\n\n              case 9:\n                // Try resolving the avatar against the addr.reverse resolver\n                resolver = new Resolver(this, resolverAddress, node);\n                _context44.prev = 10;\n                _context44.next = 13;\n                return resolver.getAvatar();\n\n              case 13:\n                _avatar = _context44.sent;\n\n                if (!_avatar) {\n                  _context44.next = 16;\n                  break;\n                }\n\n                return _context44.abrupt(\"return\", _avatar.url);\n\n              case 16:\n                _context44.next = 22;\n                break;\n\n              case 18:\n                _context44.prev = 18;\n                _context44.t0 = _context44[\"catch\"](10);\n\n                if (!(_context44.t0.code !== Logger.errors.CALL_EXCEPTION)) {\n                  _context44.next = 22;\n                  break;\n                }\n\n                throw _context44.t0;\n\n              case 22:\n                _context44.prev = 22;\n                _context44.t1 = _parseString;\n                _context44.next = 26;\n                return this.call({\n                  to: resolverAddress,\n                  data: \"0x691f3431\" + namehash(node).substring(2)\n                });\n\n              case 26:\n                _context44.t2 = _context44.sent;\n                name = (0, _context44.t1)(_context44.t2, 0);\n                _context44.next = 30;\n                return this.getResolver(name);\n\n              case 30:\n                resolver = _context44.sent;\n                _context44.next = 38;\n                break;\n\n              case 33:\n                _context44.prev = 33;\n                _context44.t3 = _context44[\"catch\"](22);\n\n                if (!(_context44.t3.code !== Logger.errors.CALL_EXCEPTION)) {\n                  _context44.next = 37;\n                  break;\n                }\n\n                throw _context44.t3;\n\n              case 37:\n                return _context44.abrupt(\"return\", null);\n\n              case 38:\n                _context44.next = 45;\n                break;\n\n              case 40:\n                _context44.next = 42;\n                return this.getResolver(nameOrAddress);\n\n              case 42:\n                resolver = _context44.sent;\n\n                if (resolver) {\n                  _context44.next = 45;\n                  break;\n                }\n\n                return _context44.abrupt(\"return\", null);\n\n              case 45:\n                _context44.next = 47;\n                return resolver.getAvatar();\n\n              case 47:\n                avatar = _context44.sent;\n\n                if (!(avatar == null)) {\n                  _context44.next = 50;\n                  break;\n                }\n\n                return _context44.abrupt(\"return\", null);\n\n              case 50:\n                return _context44.abrupt(\"return\", avatar.url);\n\n              case 51:\n              case \"end\":\n                return _context44.stop();\n            }\n          }\n        }, _callee44, this, [[10, 18], [22, 33]]);\n      }));\n    }\n  }, {\n    key: \"perform\",\n    value: function perform(method, params) {\n      return logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, {\n        operation: method\n      });\n    }\n  }, {\n    key: \"_startEvent\",\n    value: function _startEvent(event) {\n      this.polling = this._events.filter(function (e) {\n        return e.pollable();\n      }).length > 0;\n    }\n  }, {\n    key: \"_stopEvent\",\n    value: function _stopEvent(event) {\n      this.polling = this._events.filter(function (e) {\n        return e.pollable();\n      }).length > 0;\n    }\n  }, {\n    key: \"_addEventListener\",\n    value: function _addEventListener(eventName, listener, once) {\n      var event = new Event(getEventTag(eventName), listener, once);\n\n      this._events.push(event);\n\n      this._startEvent(event);\n\n      return this;\n    }\n  }, {\n    key: \"on\",\n    value: function on(eventName, listener) {\n      return this._addEventListener(eventName, listener, false);\n    }\n  }, {\n    key: \"once\",\n    value: function once(eventName, listener) {\n      return this._addEventListener(eventName, listener, true);\n    }\n  }, {\n    key: \"emit\",\n    value: function emit(eventName) {\n      var _this19 = this;\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      var result = false;\n      var stopped = [];\n      var eventTag = getEventTag(eventName);\n      this._events = this._events.filter(function (event) {\n        if (event.tag !== eventTag) {\n          return true;\n        }\n\n        setTimeout(function () {\n          event.listener.apply(_this19, args);\n        }, 0);\n        result = true;\n\n        if (event.once) {\n          stopped.push(event);\n          return false;\n        }\n\n        return true;\n      });\n      stopped.forEach(function (event) {\n        _this19._stopEvent(event);\n      });\n      return result;\n    }\n  }, {\n    key: \"listenerCount\",\n    value: function listenerCount(eventName) {\n      if (!eventName) {\n        return this._events.length;\n      }\n\n      var eventTag = getEventTag(eventName);\n      return this._events.filter(function (event) {\n        return event.tag === eventTag;\n      }).length;\n    }\n  }, {\n    key: \"listeners\",\n    value: function listeners(eventName) {\n      if (eventName == null) {\n        return this._events.map(function (event) {\n          return event.listener;\n        });\n      }\n\n      var eventTag = getEventTag(eventName);\n      return this._events.filter(function (event) {\n        return event.tag === eventTag;\n      }).map(function (event) {\n        return event.listener;\n      });\n    }\n  }, {\n    key: \"off\",\n    value: function off(eventName, listener) {\n      var _this20 = this;\n\n      if (listener == null) {\n        return this.removeAllListeners(eventName);\n      }\n\n      var stopped = [];\n      var found = false;\n      var eventTag = getEventTag(eventName);\n      this._events = this._events.filter(function (event) {\n        if (event.tag !== eventTag || event.listener != listener) {\n          return true;\n        }\n\n        if (found) {\n          return true;\n        }\n\n        found = true;\n        stopped.push(event);\n        return false;\n      });\n      stopped.forEach(function (event) {\n        _this20._stopEvent(event);\n      });\n      return this;\n    }\n  }, {\n    key: \"removeAllListeners\",\n    value: function removeAllListeners(eventName) {\n      var _this21 = this;\n\n      var stopped = [];\n\n      if (eventName == null) {\n        stopped = this._events;\n        this._events = [];\n      } else {\n        var eventTag = getEventTag(eventName);\n        this._events = this._events.filter(function (event) {\n          if (event.tag !== eventTag) {\n            return true;\n          }\n\n          stopped.push(event);\n          return false;\n        });\n      }\n\n      stopped.forEach(function (event) {\n        _this21._stopEvent(event);\n      });\n      return this;\n    }\n  }], [{\n    key: \"getFormatter\",\n    value: function getFormatter() {\n      if (defaultFormatter == null) {\n        defaultFormatter = new Formatter();\n      }\n\n      return defaultFormatter;\n    } // @TODO: Remove this and just use getNetwork\n\n  }, {\n    key: \"getNetwork\",\n    value: function getNetwork(network) {\n      return _getNetwork(network == null ? \"homestead\" : network);\n    }\n  }]);\n\n  return BaseProvider;\n}(Provider);","map":{"version":3,"mappings":"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","names":["ForkEvent","Provider","encode","base64Encode","Base58","BigNumber","arrayify","concat","hexConcat","hexDataLength","hexDataSlice","hexlify","hexValue","hexZeroPad","isHexString","HashZero","dnsEncode","namehash","getNetwork","defineReadOnly","getStatic","resolveProperties","sha256","toUtf8Bytes","toUtf8String","fetchJson","poll","bech32","Logger","version","logger","Formatter","MAX_CCIP_REDIRECTS","checkTopic","topic","throwArgumentError","toLowerCase","serializeTopics","topics","slice","length","pop","map","Array","isArray","unique","forEach","sorted","Object","keys","sort","join","deserializeTopics","data","split","comps","getEventTag","eventName","indexOf","isForkEvent","warn","Error","address","getTime","Date","stall","duration","Promise","resolve","setTimeout","PollableEvents","Event","tag","listener","once","_lastBlockNumber","_inflight","type","hash","filter","coinInfos","symbol","p2pkh","p2sh","prefix","ilk","bytes32ify","value","from","toHexString","base58Encode","matcherIpfs","RegExp","matchers","_parseString","result","start","_parseBytes","error","offset","toNumber","getIpfsLink","link","match","substring","numPad","padded","Uint8Array","set","bytesPad","Math","ceil","encodeBytes","datas","byteCount","i","push","Resolver","provider","name","resolvedAddress","formatter","_supportsEip2544","call","to","then","eq","catch","code","errors","CALL_EXCEPTION","selector","parameters","tx","ccipReadEnabled","parseBytes","supportsWildcard","throwError","transaction","_fetch","coinType","hexBytes","coinInfo","String","UNSUPPORTED_OPERATION","operation","bytes","parseInt","words","toWords","unshift","callAddress","_fetchBytes","_getAddress","linkage","content","getText","avatar","scheme","url","_resolvedAddress","getAddress","owner","addr","tokenId","tokenOwner","balance","isZero","toString","metadataUrl","replace","metadata","JSON","stringify","imageUrl","image","ipfs","ipns","swarm","skynet","urlSafe","a","key","keyBytes","defaultFormatter","nextPollId","BaseProvider","network","_events","_emitted","block","disableCcipRead","getFormatter","anyNetwork","detectNetwork","_networkPromise","_ready","knownNetwork","emit","_maxInternalBlockNumber","_maxFilterBlockRange","_pollingInterval","_fastQueryDate","_network","UNKNOWN_ERROR","NETWORK_ERROR","event","undefined","calldata","urls","sender","errorMessages","href","json","errorPassThrough","response","status","statusCode","errorMessage","message","SERVER_ERROR","m","maxAge","_internalBlockNumber","internalBlockNumber","respTime","blockNumber","reqTime","checkInternalBlockNumber","perform","networkError","_setFastBlockNumber","pollId","runners","_getInternalBlockNumber","pollingInterval","abs","makeError","previousBlockNumber","eventBlockNumber","runner","getTransactionReceipt","receipt","fromBlock","toBlock","getLogs","logs","log","blockHash","transactionHash","all","polling","currentNetwork","chainId","_fastBlockNumber","_fastBlockNumberPromise","detectedNetwork","_poller","setInterval","_bootstrapPoll","clearInterval","now","getBlockNumber","confirmations","timeout","_waitForTransaction","replaceable","reject","cancelFuncs","done","alreadyDone","func","minedHandler","on","removeListener","lastBlockNumber","startBlock","scannedBlock","replaceHandler","__awaiter","getTransactionCount","nonce","getTransaction","mined","getBlockWithTransactions","ti","transactions","waitForTransaction","reason","TRANSACTION_REPLACED","cancelled","replacement","_wrapTransaction","timer","TIMEOUT","unref","clearTimeout","method","addressOrName","blockTag","_getBlockTag","params","position","p","expectedHash","returnedHash","wait","confirms","signedTransaction","t","hexTx","values","v","accessList","transactionRequest","attempt","redirects","txSender","signature","urlsOffset","urlsLength","urlsData","u","callbackSelector","extraData","ccipReadFetch","ccipResult","_call","_getTransactionRequest","resolved","resolveName","blockHashOrBlockTag","includeTransactions","blockWithTxs","blockWithTransactions","oncePoll","_getBlock","transactionResponse","_getFilter","removed","arrayOf","filterLog","bind","currentName","_getResolver","resolver","ensAddress","addrData","getResolver","node","resolverAddr","nameOrAddress","resolverAddress","getAvatar","NOT_IMPLEMENTED","e","pollable","_startEvent","_addEventListener","args","stopped","eventTag","apply","_stopEvent","removeAllListeners","found"],"sources":["C:\\Users\\kiril\\Desktop\\newenvai\\client\\node_modules\\@ethersproject\\providers\\src.ts\\base-provider.ts"],"sourcesContent":["\"use strict\";\n\nimport {\n    Block, BlockTag, BlockWithTransactions, EventType, Filter, FilterByBlockHash, ForkEvent,\n    Listener, Log, Provider, TransactionReceipt, TransactionRequest, TransactionResponse\n} from \"@ethersproject/abstract-provider\";\nimport { encode as base64Encode } from \"@ethersproject/base64\";\nimport { Base58 } from \"@ethersproject/basex\";\nimport { BigNumber, BigNumberish } from \"@ethersproject/bignumber\";\nimport { arrayify, BytesLike, concat, hexConcat, hexDataLength, hexDataSlice, hexlify, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { HashZero } from \"@ethersproject/constants\";\nimport { dnsEncode, namehash } from \"@ethersproject/hash\";\nimport { getNetwork, Network, Networkish } from \"@ethersproject/networks\";\nimport { Deferrable, defineReadOnly, getStatic, resolveProperties } from \"@ethersproject/properties\";\nimport { Transaction } from \"@ethersproject/transactions\";\nimport { sha256 } from \"@ethersproject/sha2\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\nimport { fetchJson, poll } from \"@ethersproject/web\";\n\nimport bech32 from \"bech32\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { Formatter } from \"./formatter\";\n\nconst MAX_CCIP_REDIRECTS = 10;\n\n//////////////////////////////\n// Event Serializeing\n\nfunction checkTopic(topic: string): string {\n     if (topic == null) { return \"null\"; }\n     if (hexDataLength(topic) !== 32) {\n         logger.throwArgumentError(\"invalid topic\", \"topic\", topic);\n     }\n     return topic.toLowerCase();\n}\n\nfunction serializeTopics(topics: Array<string | Array<string>>): string {\n    // Remove trailing null AND-topics; they are redundant\n    topics = topics.slice();\n    while (topics.length > 0 && topics[topics.length - 1] == null) { topics.pop(); }\n\n    return topics.map((topic) => {\n        if (Array.isArray(topic)) {\n\n            // Only track unique OR-topics\n            const unique: { [ topic: string ]: boolean } = { }\n            topic.forEach((topic) => {\n                unique[checkTopic(topic)] = true;\n            });\n\n            // The order of OR-topics does not matter\n            const sorted = Object.keys(unique);\n            sorted.sort();\n\n            return sorted.join(\"|\");\n\n        } else {\n            return checkTopic(topic);\n        }\n    }).join(\"&\");\n}\n\nfunction deserializeTopics(data: string): Array<string | Array<string>> {\n    if (data === \"\") { return [ ]; }\n\n    return data.split(/&/g).map((topic) => {\n        if (topic === \"\") { return [ ]; }\n\n        const comps = topic.split(\"|\").map((topic) => {\n            return ((topic === \"null\") ? null: topic);\n        });\n\n        return ((comps.length === 1) ? comps[0]: comps);\n    });\n}\n\nfunction getEventTag(eventName: EventType): string {\n    if (typeof(eventName) === \"string\") {\n        eventName = eventName.toLowerCase();\n\n        if (hexDataLength(eventName) === 32) {\n            return \"tx:\" + eventName;\n        }\n\n        if (eventName.indexOf(\":\") === -1) {\n            return eventName;\n        }\n\n    } else if (Array.isArray(eventName)) {\n        return \"filter:*:\" + serializeTopics(eventName);\n\n    } else if (ForkEvent.isForkEvent(eventName)) {\n        logger.warn(\"not implemented\");\n        throw new Error(\"not implemented\");\n\n    } else if (eventName && typeof(eventName) === \"object\") {\n        return \"filter:\" + (eventName.address || \"*\") + \":\" + serializeTopics(eventName.topics || []);\n    }\n\n    throw new Error(\"invalid event - \" + eventName);\n}\n\n//////////////////////////////\n// Helper Object\n\nfunction getTime() {\n    return (new Date()).getTime();\n}\n\nfunction stall(duration: number): Promise<void> {\n    return new Promise((resolve) => {\n        setTimeout(resolve, duration);\n    });\n}\n\n//////////////////////////////\n// Provider Object\n\n\n/**\n *  EventType\n *   - \"block\"\n *   - \"poll\"\n *   - \"didPoll\"\n *   - \"pending\"\n *   - \"error\"\n *   - \"network\"\n *   - filter\n *   - topics array\n *   - transaction hash\n */\n\nconst PollableEvents = [ \"block\", \"network\", \"pending\", \"poll\" ];\n\nexport class Event {\n    readonly listener: Listener;\n    readonly once: boolean;\n    readonly tag: string;\n\n    _lastBlockNumber: number\n    _inflight: boolean;\n\n    constructor(tag: string, listener: Listener, once: boolean) {\n        defineReadOnly(this, \"tag\", tag);\n        defineReadOnly(this, \"listener\", listener);\n        defineReadOnly(this, \"once\", once);\n\n        this._lastBlockNumber = -2;\n        this._inflight = false;\n    }\n\n    get event(): EventType {\n        switch (this.type) {\n            case \"tx\":\n               return this.hash;\n            case \"filter\":\n               return this.filter;\n        }\n        return this.tag;\n    }\n\n    get type(): string {\n        return this.tag.split(\":\")[0]\n    }\n\n    get hash(): string {\n        const comps = this.tag.split(\":\");\n        if (comps[0] !== \"tx\") { return null; }\n        return comps[1];\n    }\n\n    get filter(): Filter {\n        const comps = this.tag.split(\":\");\n        if (comps[0] !== \"filter\") { return null; }\n        const address = comps[1];\n\n        const topics = deserializeTopics(comps[2]);\n        const filter: Filter = { };\n\n        if (topics.length > 0) { filter.topics = topics; }\n        if (address && address !== \"*\") { filter.address = address; }\n\n        return filter;\n    }\n\n    pollable(): boolean {\n        return (this.tag.indexOf(\":\") >= 0 || PollableEvents.indexOf(this.tag) >= 0);\n    }\n}\n\nexport interface EnsResolver {\n\n    // Name this Resolver is associated with\n    readonly name: string;\n\n    // The address of the resolver\n    readonly address: string;\n\n    // Multichain address resolution (also normal address resolution)\n    // See: https://eips.ethereum.org/EIPS/eip-2304\n    getAddress(coinType?: 60): Promise<null | string>\n\n    // Contenthash field\n    // See: https://eips.ethereum.org/EIPS/eip-1577\n    getContentHash(): Promise<null | string>;\n\n    // Storage of text records\n    // See: https://eips.ethereum.org/EIPS/eip-634\n    getText(key: string): Promise<null | string>;\n};\n\nexport interface EnsProvider {\n    resolveName(name: string): Promise<null | string>;\n    lookupAddress(address: string): Promise<null | string>;\n    getResolver(name: string): Promise<null | EnsResolver>;\n}\n\ntype CoinInfo = {\n    symbol: string,\n    ilk?: string,     // General family\n    prefix?: string,  // Bech32 prefix\n    p2pkh?: number,   // Pay-to-Public-Key-Hash Version\n    p2sh?: number,    // Pay-to-Script-Hash Version\n};\n\n// https://github.com/satoshilabs/slips/blob/master/slip-0044.md\nconst coinInfos: { [ coinType: string ]: CoinInfo } = {\n    \"0\":   { symbol: \"btc\",  p2pkh: 0x00, p2sh: 0x05, prefix: \"bc\" },\n    \"2\":   { symbol: \"ltc\",  p2pkh: 0x30, p2sh: 0x32, prefix: \"ltc\" },\n    \"3\":   { symbol: \"doge\", p2pkh: 0x1e, p2sh: 0x16 },\n    \"60\":  { symbol: \"eth\",  ilk: \"eth\" },\n    \"61\":  { symbol: \"etc\",  ilk: \"eth\" },\n    \"700\": { symbol: \"xdai\", ilk: \"eth\" },\n};\n\nfunction bytes32ify(value: number): string {\n    return hexZeroPad(BigNumber.from(value).toHexString(), 32);\n}\n\n// Compute the Base58Check encoded data (checksum is first 4 bytes of sha256d)\nfunction base58Encode(data: Uint8Array): string {\n    return Base58.encode(concat([ data, hexDataSlice(sha256(sha256(data)), 0, 4) ]));\n}\n\nexport interface Avatar {\n    url: string;\n    linkage: Array<{ type: string, content: string }>;\n}\n\nconst matcherIpfs = new RegExp(\"^(ipfs):/\\/(.*)$\", \"i\");\nconst matchers = [\n    new RegExp(\"^(https):/\\/(.*)$\", \"i\"),\n    new RegExp(\"^(data):(.*)$\", \"i\"),\n    matcherIpfs,\n    new RegExp(\"^eip155:[0-9]+/(erc[0-9]+):(.*)$\", \"i\"),\n];\n\nfunction _parseString(result: string, start: number): null | string {\n    try {\n        return toUtf8String(_parseBytes(result, start));\n    } catch(error) { }\n    return null;\n}\n\nfunction _parseBytes(result: string, start: number): null | string {\n    if (result === \"0x\") { return null; }\n\n    const offset = BigNumber.from(hexDataSlice(result, start, start + 32)).toNumber();\n    const length = BigNumber.from(hexDataSlice(result, offset, offset + 32)).toNumber();\n\n    return hexDataSlice(result, offset + 32, offset + 32 + length);\n}\n\n// Trim off the ipfs:// prefix and return the default gateway URL\nfunction getIpfsLink(link: string): string {\n    if (link.match(/^ipfs:\\/\\/ipfs\\//i)) {\n        link = link.substring(12);\n    } else if (link.match(/^ipfs:\\/\\//i)) {\n        link = link.substring(7);\n    } else {\n        logger.throwArgumentError(\"unsupported IPFS format\", \"link\", link);\n    }\n\n    return `https:/\\/gateway.ipfs.io/ipfs/${ link }`;\n}\n\nfunction numPad(value: number): Uint8Array {\n    const result = arrayify(value);\n    if (result.length > 32) { throw new Error(\"internal; should not happen\"); }\n\n    const padded = new Uint8Array(32);\n    padded.set(result, 32 - result.length);\n    return padded;\n}\n\nfunction bytesPad(value: Uint8Array): Uint8Array {\n    if ((value.length % 32) === 0) { return value; }\n\n    const result = new Uint8Array(Math.ceil(value.length / 32) * 32);\n    result.set(value);\n    return result;\n}\n\n// ABI Encodes a series of (bytes, bytes, ...)\nfunction encodeBytes(datas: Array<BytesLike>) {\n    const result: Array<Uint8Array> = [ ];\n\n    let byteCount = 0;\n\n    // Add place-holders for pointers as we add items\n    for (let i = 0; i < datas.length; i++) {\n        result.push(null);\n        byteCount += 32;\n    }\n\n    for (let i = 0; i < datas.length; i++) {\n        const data = arrayify(datas[i]);\n\n        // Update the bytes offset\n        result[i] = numPad(byteCount);\n\n        // The length and padded value of data\n        result.push(numPad(data.length));\n        result.push(bytesPad(data));\n        byteCount += 32 + Math.ceil(data.length / 32) * 32;\n    }\n\n    return hexConcat(result);\n}\n\nexport class Resolver implements EnsResolver {\n    readonly provider: BaseProvider;\n\n    readonly name: string;\n    readonly address: string;\n\n    readonly _resolvedAddress: null | string;\n\n    // For EIP-2544 names, the ancestor that provided the resolver\n    _supportsEip2544: null | Promise<boolean>;\n\n    // The resolvedAddress is only for creating a ReverseLookup resolver\n    constructor(provider: BaseProvider, address: string, name: string, resolvedAddress?: string) {\n        defineReadOnly(this, \"provider\", provider);\n        defineReadOnly(this, \"name\", name);\n        defineReadOnly(this, \"address\", provider.formatter.address(address));\n        defineReadOnly(this, \"_resolvedAddress\", resolvedAddress);\n    }\n\n    supportsWildcard(): Promise<boolean> {\n        if (!this._supportsEip2544) {\n            // supportsInterface(bytes4 = selector(\"resolve(bytes,bytes)\"))\n            this._supportsEip2544 = this.provider.call({\n                to: this.address,\n                data: \"0x01ffc9a79061b92300000000000000000000000000000000000000000000000000000000\"\n            }).then((result) => {\n                return BigNumber.from(result).eq(1);\n            }).catch((error) => {\n                if (error.code === Logger.errors.CALL_EXCEPTION) { return false; }\n                // Rethrow the error: link is down, etc. Let future attempts retry.\n                this._supportsEip2544 = null;\n                throw error;\n            });\n        }\n\n        return this._supportsEip2544;\n    }\n\n    async _fetch(selector: string, parameters?: string): Promise<null | string> {\n\n        // e.g. keccak256(\"addr(bytes32,uint256)\")\n        const tx = {\n            to: this.address,\n            ccipReadEnabled: true,\n            data: hexConcat([ selector, namehash(this.name), (parameters || \"0x\") ])\n        };\n\n        // Wildcard support; use EIP-2544 to resolve the request\n        let parseBytes = false;\n        if (await this.supportsWildcard()) {\n            parseBytes = true;\n\n            // selector(\"resolve(bytes,bytes)\")\n            tx.data = hexConcat([ \"0x9061b923\", encodeBytes([ dnsEncode(this.name), tx.data ]) ]);\n        }\n\n        try {\n            let result = await this.provider.call(tx);\n            if ((arrayify(result).length % 32) === 4) {\n                logger.throwError(\"resolver threw error\", Logger.errors.CALL_EXCEPTION, {\n                    transaction: tx, data: result\n                });\n            }\n            if (parseBytes) { result = _parseBytes(result, 0); }\n            return result;\n        } catch (error) {\n            if (error.code === Logger.errors.CALL_EXCEPTION) { return null; }\n            throw error;\n        }\n    }\n\n    async _fetchBytes(selector: string, parameters?: string): Promise<null | string> {\n        const result = await this._fetch(selector, parameters);\n        if (result != null) { return _parseBytes(result, 0); }\n        return null;\n    }\n\n    _getAddress(coinType: number, hexBytes: string): string {\n        const coinInfo = coinInfos[String(coinType)];\n\n        if (coinInfo == null) {\n            logger.throwError(`unsupported coin type: ${ coinType }`, Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: `getAddress(${ coinType })`\n            });\n        }\n\n        if (coinInfo.ilk === \"eth\") {\n            return this.provider.formatter.address(hexBytes);\n        }\n\n        const bytes = arrayify(hexBytes);\n\n        // P2PKH: OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG\n        if (coinInfo.p2pkh != null) {\n            const p2pkh = hexBytes.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);\n            if (p2pkh) {\n                const length = parseInt(p2pkh[1], 16);\n                if (p2pkh[2].length === length * 2 && length >= 1 && length <= 75) {\n                    return base58Encode(concat([ [ coinInfo.p2pkh ], (\"0x\" + p2pkh[2]) ]));\n                }\n            }\n        }\n\n        // P2SH: OP_HASH160 <scriptHash> OP_EQUAL\n        if (coinInfo.p2sh != null) {\n            const p2sh = hexBytes.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);\n            if (p2sh) {\n                const length = parseInt(p2sh[1], 16);\n                if (p2sh[2].length === length * 2 && length >= 1 && length <= 75) {\n                    return base58Encode(concat([ [ coinInfo.p2sh ], (\"0x\" + p2sh[2]) ]));\n                }\n            }\n        }\n\n        // Bech32\n        if (coinInfo.prefix != null) {\n            const length = bytes[1];\n\n            // https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#witness-program\n            let version = bytes[0];\n            if (version === 0x00) {\n                if (length !== 20 && length !== 32) {\n                    version = -1;\n                }\n            } else {\n                version = -1;\n            }\n\n            if (version >= 0 && bytes.length === 2 + length && length >= 1 && length <= 75) {\n                const words = bech32.toWords(bytes.slice(2));\n                words.unshift(version);\n                return bech32.encode(coinInfo.prefix, words);\n            }\n        }\n\n        return null;\n    }\n\n\n    async getAddress(coinType?: number): Promise<string> {\n        if (coinType == null) { coinType = 60; }\n\n        // If Ethereum, use the standard `addr(bytes32)`\n        if (coinType === 60) {\n            try {\n                // keccak256(\"addr(bytes32)\")\n                const result = await this._fetch(\"0x3b3b57de\");\n\n                // No address\n                if (result === \"0x\" || result === HashZero) { return null; }\n\n                return this.provider.formatter.callAddress(result);\n            } catch (error) {\n                if (error.code === Logger.errors.CALL_EXCEPTION) { return null; }\n                throw error;\n            }\n        }\n\n        // keccak256(\"addr(bytes32,uint256\")\n        const hexBytes = await this._fetchBytes(\"0xf1cb7e06\", bytes32ify(coinType));\n\n        // No address\n        if (hexBytes == null || hexBytes === \"0x\") { return null; }\n\n        // Compute the address\n        const address = this._getAddress(coinType, hexBytes);\n\n        if (address == null) {\n            logger.throwError(`invalid or unsupported coin data`, Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: `getAddress(${ coinType })`,\n                coinType: coinType,\n                data: hexBytes\n            });\n        }\n\n        return address;\n    }\n\n    async getAvatar(): Promise<null | Avatar> {\n        const linkage: Array<{ type: string, content: string }> = [ { type: \"name\", content: this.name } ];\n        try {\n            // test data for ricmoo.eth\n            //const avatar = \"eip155:1/erc721:0x265385c7f4132228A0d54EB1A9e7460b91c0cC68/29233\";\n            const avatar = await this.getText(\"avatar\");\n            if (avatar == null) { return null; }\n\n            for (let i = 0; i < matchers.length; i++) {\n                const match = avatar.match(matchers[i]);\n                if (match == null) { continue; }\n\n                const scheme = match[1].toLowerCase();\n\n                switch (scheme) {\n                    case \"https\":\n                        linkage.push({ type: \"url\", content: avatar });\n                        return { linkage, url: avatar };\n\n                    case \"data\":\n                        linkage.push({ type: \"data\", content: avatar });\n                        return { linkage, url: avatar };\n\n                    case \"ipfs\":\n                        linkage.push({ type: \"ipfs\", content: avatar });\n                        return { linkage, url: getIpfsLink(avatar) };\n\n                    case \"erc721\":\n                    case \"erc1155\": {\n                        // Depending on the ERC type, use tokenURI(uint256) or url(uint256)\n                        const selector = (scheme === \"erc721\") ? \"0xc87b56dd\": \"0x0e89341c\";\n                        linkage.push({ type: scheme, content: avatar });\n\n                        // The owner of this name\n                        const owner = (this._resolvedAddress || await this.getAddress());\n\n                        const comps = (match[2] || \"\").split(\"/\");\n                        if (comps.length !== 2) { return null; }\n\n                        const addr = await this.provider.formatter.address(comps[0]);\n                        const tokenId = hexZeroPad(BigNumber.from(comps[1]).toHexString(), 32);\n\n                        // Check that this account owns the token\n                        if (scheme === \"erc721\") {\n                            // ownerOf(uint256 tokenId)\n                            const tokenOwner = this.provider.formatter.callAddress(await this.provider.call({\n                                to: addr, data: hexConcat([ \"0x6352211e\", tokenId ])\n                            }));\n                            if (owner !== tokenOwner) { return null; }\n                            linkage.push({ type: \"owner\", content: tokenOwner });\n\n                        } else if (scheme === \"erc1155\") {\n                            // balanceOf(address owner, uint256 tokenId)\n                            const balance = BigNumber.from(await this.provider.call({\n                                to: addr, data: hexConcat([ \"0x00fdd58e\", hexZeroPad(owner, 32), tokenId ])\n                            }));\n                            if (balance.isZero()) { return null; }\n                            linkage.push({ type: \"balance\", content: balance.toString() });\n                        }\n\n                        // Call the token contract for the metadata URL\n                        const tx = {\n                            to: this.provider.formatter.address(comps[0]),\n                            data: hexConcat([ selector, tokenId ])\n                        };\n\n                        let metadataUrl = _parseString(await this.provider.call(tx), 0);\n                        if (metadataUrl == null) { return null; }\n                        linkage.push({ type: \"metadata-url-base\", content: metadataUrl });\n\n                        // ERC-1155 allows a generic {id} in the URL\n                        if (scheme === \"erc1155\") {\n                            metadataUrl = metadataUrl.replace(\"{id}\", tokenId.substring(2));\n                            linkage.push({ type: \"metadata-url-expanded\", content: metadataUrl });\n                        }\n\n                        // Transform IPFS metadata links\n                        if (metadataUrl.match(/^ipfs:/i)) {\n                            metadataUrl = getIpfsLink(metadataUrl);\n                        }\n\n                        linkage.push({ type: \"metadata-url\", content: metadataUrl });\n\n                        // Get the token metadata\n                        const metadata = await fetchJson(metadataUrl);\n                        if (!metadata) { return null; }\n                        linkage.push({ type: \"metadata\", content: JSON.stringify(metadata) });\n\n                        // Pull the image URL out\n                        let imageUrl = metadata.image;\n                        if (typeof(imageUrl) !== \"string\") { return null; }\n\n                        if (imageUrl.match(/^(https:\\/\\/|data:)/i)) {\n                            // Allow\n                        } else {\n                            // Transform IPFS link to gateway\n                            const ipfs = imageUrl.match(matcherIpfs);\n                            if (ipfs == null) { return null; }\n\n                            linkage.push({ type: \"url-ipfs\", content: imageUrl });\n                            imageUrl = getIpfsLink(imageUrl);\n                        }\n\n                        linkage.push({ type: \"url\", content: imageUrl });\n\n                        return { linkage, url: imageUrl };\n                    }\n                }\n            }\n        } catch (error) { }\n\n        return null;\n    }\n\n    async getContentHash(): Promise<string> {\n\n        // keccak256(\"contenthash()\")\n        const hexBytes = await this._fetchBytes(\"0xbc1c58d1\");\n\n        // No contenthash\n        if (hexBytes == null || hexBytes === \"0x\") { return null; }\n\n        // IPFS (CID: 1, Type: DAG-PB)\n        const ipfs = hexBytes.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n        if (ipfs) {\n            const length = parseInt(ipfs[3], 16);\n            if (ipfs[4].length === length * 2) {\n                return \"ipfs:/\\/\" + Base58.encode(\"0x\" + ipfs[1]);\n            }\n        }\n\n        // IPNS (CID: 1, Type: libp2p-key)\n        const ipns = hexBytes.match(/^0xe5010172(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n        if (ipns) {\n            const length = parseInt(ipns[3], 16);\n            if (ipns[4].length === length * 2) {\n                return \"ipns:/\\/\" + Base58.encode(\"0x\" + ipns[1]);\n            }\n        }\n\n        // Swarm (CID: 1, Type: swarm-manifest; hash/length hard-coded to keccak256/32)\n        const swarm = hexBytes.match(/^0xe40101fa011b20([0-9a-f]*)$/)\n        if (swarm) {\n            if (swarm[1].length === (32 * 2)) {\n                return \"bzz:/\\/\" + swarm[1]\n            }\n        }\n\n        const skynet = hexBytes.match(/^0x90b2c605([0-9a-f]*)$/);\n        if (skynet) {\n            if (skynet[1].length === (34 * 2)) {\n                // URL Safe base64; https://datatracker.ietf.org/doc/html/rfc4648#section-5\n                const urlSafe: Record<string, string> = { \"=\": \"\", \"+\": \"-\", \"/\": \"_\" };\n                const hash = base64Encode(\"0x\" + skynet[1]).replace(/[=+\\/]/g, (a) => (urlSafe[a]));\n                return \"sia:/\\/\" + hash;\n            }\n        }\n\n        return logger.throwError(`invalid or unsupported content hash data`, Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"getContentHash()\",\n            data: hexBytes\n        });\n    }\n\n    async getText(key: string): Promise<string> {\n\n        // The key encoded as parameter to fetchBytes\n        let keyBytes = toUtf8Bytes(key);\n\n        // The nodehash consumes the first slot, so the string pointer targets\n        // offset 64, with the length at offset 64 and data starting at offset 96\n        keyBytes = concat([ bytes32ify(64), bytes32ify(keyBytes.length), keyBytes ]);\n\n        // Pad to word-size (32 bytes)\n        if ((keyBytes.length % 32) !== 0) {\n            keyBytes = concat([ keyBytes, hexZeroPad(\"0x\", 32 - (key.length % 32)) ])\n        }\n\n        const hexBytes = await this._fetchBytes(\"0x59d1d43c\", hexlify(keyBytes));\n        if (hexBytes == null || hexBytes === \"0x\") { return null; }\n\n        return toUtf8String(hexBytes);\n    }\n}\n\nlet defaultFormatter: Formatter = null;\n\nlet nextPollId = 1;\n\nexport class BaseProvider extends Provider implements EnsProvider {\n    _networkPromise: Promise<Network>;\n    _network: Network;\n\n    _events: Array<Event>;\n\n    formatter: Formatter;\n\n    // To help mitigate the eventually consistent nature of the blockchain\n    // we keep a mapping of events we emit. If we emit an event X, we expect\n    // that a user should be able to query for that event in the callback,\n    // if the node returns null, we stall the response until we get back a\n    // meaningful value, since we may be hitting a re-org, or a node that\n    // has not indexed the event yet.\n    // Events:\n    //   - t:{hash}    - Transaction hash\n    //   - b:{hash}    - BlockHash\n    //   - block       - The most recent emitted block\n    _emitted: { [ eventName: string ]: number | \"pending\" };\n\n    _pollingInterval: number;\n    _poller: NodeJS.Timer;\n    _bootstrapPoll: NodeJS.Timer;\n\n    _lastBlockNumber: number;\n    _maxFilterBlockRange: number;\n\n    _fastBlockNumber: number;\n    _fastBlockNumberPromise: Promise<number>;\n    _fastQueryDate: number;\n\n    _maxInternalBlockNumber: number;\n    _internalBlockNumber: Promise<{ blockNumber: number, reqTime: number, respTime: number }>;\n\n    readonly anyNetwork: boolean;\n\n    disableCcipRead: boolean;\n\n\n    /**\n     *  ready\n     *\n     *  A Promise<Network> that resolves only once the provider is ready.\n     *\n     *  Sub-classes that call the super with a network without a chainId\n     *  MUST set this. Standard named networks have a known chainId.\n     *\n     */\n\n    constructor(network: Networkish | Promise<Network>) {\n        super();\n\n        // Events being listened to\n        this._events = [];\n\n        this._emitted = { block: -2 };\n\n        this.disableCcipRead = false;\n\n        this.formatter = new.target.getFormatter();\n\n        // If network is any, this Provider allows the underlying\n        // network to change dynamically, and we auto-detect the\n        // current network\n        defineReadOnly(this, \"anyNetwork\", (network === \"any\"));\n        if (this.anyNetwork) { network = this.detectNetwork(); }\n\n        if (network instanceof Promise) {\n            this._networkPromise = network;\n\n            // Squash any \"unhandled promise\" errors; that do not need to be handled\n            network.catch((error) => { });\n\n            // Trigger initial network setting (async)\n            this._ready().catch((error) => { });\n\n        } else {\n            const knownNetwork = getStatic<(network: Networkish) => Network>(new.target, \"getNetwork\")(network);\n            if (knownNetwork) {\n                defineReadOnly(this, \"_network\", knownNetwork);\n                this.emit(\"network\", knownNetwork, null);\n\n            } else {\n                logger.throwArgumentError(\"invalid network\", \"network\", network);\n            }\n        }\n\n        this._maxInternalBlockNumber = -1024;\n\n        this._lastBlockNumber = -2;\n        this._maxFilterBlockRange = 10;\n\n        this._pollingInterval = 4000;\n\n        this._fastQueryDate = 0;\n    }\n\n    async _ready(): Promise<Network> {\n        if (this._network == null) {\n            let network: Network = null;\n            if (this._networkPromise) {\n                try {\n                    network = await this._networkPromise;\n                } catch (error) { }\n            }\n\n            // Try the Provider's network detection (this MUST throw if it cannot)\n            if (network == null) {\n                network = await this.detectNetwork();\n            }\n\n            // This should never happen; every Provider sub-class should have\n            // suggested a network by here (or have thrown).\n            if (!network) {\n                logger.throwError(\"no network detected\", Logger.errors.UNKNOWN_ERROR, { });\n            }\n\n            // Possible this call stacked so do not call defineReadOnly again\n            if (this._network == null) {\n                if (this.anyNetwork) {\n                    this._network = network;\n                } else {\n                    defineReadOnly(this, \"_network\", network);\n                }\n                this.emit(\"network\", network, null);\n            }\n        }\n\n        return this._network;\n    }\n\n    // This will always return the most recently established network.\n    // For \"any\", this can change (a \"network\" event is emitted before\n    // any change is reflected); otherwise this cannot change\n    get ready(): Promise<Network> {\n        return poll(() => {\n            return this._ready().then((network) => {\n                return network;\n            }, (error) => {\n                // If the network isn't running yet, we will wait\n                if (error.code === Logger.errors.NETWORK_ERROR && error.event === \"noNetwork\") {\n                    return undefined;\n                }\n                throw error;\n            });\n        });\n    }\n\n    // @TODO: Remove this and just create a singleton formatter\n    static getFormatter(): Formatter {\n        if (defaultFormatter == null) {\n            defaultFormatter = new Formatter();\n        }\n        return defaultFormatter;\n    }\n\n    // @TODO: Remove this and just use getNetwork\n    static getNetwork(network: Networkish): Network {\n        return getNetwork((network == null) ? \"homestead\": network);\n    }\n\n    async ccipReadFetch(tx: Transaction, calldata: string, urls: Array<string>): Promise<null | string> {\n        if (this.disableCcipRead || urls.length === 0) { return null; }\n\n        const sender = tx.to.toLowerCase();\n        const data = calldata.toLowerCase();\n\n        const errorMessages: Array<string> = [ ];\n\n        for (let i = 0; i < urls.length; i++) {\n            const url = urls[i];\n\n            // URL expansion\n            const href = url.replace(\"{sender}\", sender).replace(\"{data}\", data);\n\n            // If no {data} is present, use POST; otherwise GET\n            const json: string | null = (url.indexOf(\"{data}\") >= 0) ? null: JSON.stringify({ data, sender });\n\n            const result = await fetchJson({ url: href, errorPassThrough: true }, json, (value, response) => {\n                value.status = response.statusCode;\n                return value;\n            });\n\n            if (result.data) { return result.data; }\n\n            const errorMessage = (result.message || \"unknown error\");\n\n            // 4xx indicates the result is not present; stop\n            if (result.status >= 400 && result.status < 500) {\n                return logger.throwError(`response not found during CCIP fetch: ${ errorMessage }`, Logger.errors.SERVER_ERROR, { url, errorMessage });\n            }\n\n            // 5xx indicates server issue; try the next url\n            errorMessages.push(errorMessage);\n        }\n\n        return logger.throwError(`error encountered during CCIP fetch: ${ errorMessages.map((m) => JSON.stringify(m)).join(\", \") }`, Logger.errors.SERVER_ERROR, {\n            urls, errorMessages\n        });\n    }\n\n    // Fetches the blockNumber, but will reuse any result that is less\n    // than maxAge old or has been requested since the last request\n    async _getInternalBlockNumber(maxAge: number): Promise<number> {\n        await this._ready();\n\n        // Allowing stale data up to maxAge old\n        if (maxAge > 0) {\n\n            // While there are pending internal block requests...\n            while (this._internalBlockNumber) {\n\n                // ...\"remember\" which fetch we started with\n                const internalBlockNumber = this._internalBlockNumber;\n\n                try {\n                    // Check the result is not too stale\n                    const result = await internalBlockNumber;\n                    if ((getTime() - result.respTime) <= maxAge) {\n                        return result.blockNumber;\n                    }\n\n                    // Too old; fetch a new value\n                    break;\n\n                } catch(error) {\n\n                    // The fetch rejected; if we are the first to get the\n                    // rejection, drop through so we replace it with a new\n                    // fetch; all others blocked will then get that fetch\n                    // which won't match the one they \"remembered\" and loop\n                    if (this._internalBlockNumber === internalBlockNumber) {\n                        break;\n                    }\n                }\n            }\n        }\n\n        const reqTime = getTime();\n\n        const checkInternalBlockNumber = resolveProperties({\n            blockNumber: this.perform(\"getBlockNumber\", { }),\n            networkError: this.getNetwork().then((network) => (null), (error) => (error))\n        }).then(({ blockNumber, networkError }) => {\n            if (networkError) {\n                // Unremember this bad internal block number\n                if (this._internalBlockNumber === checkInternalBlockNumber) {\n                    this._internalBlockNumber = null;\n                }\n                throw networkError;\n            }\n\n            const respTime = getTime();\n\n            blockNumber = BigNumber.from(blockNumber).toNumber();\n            if (blockNumber < this._maxInternalBlockNumber) { blockNumber = this._maxInternalBlockNumber; }\n\n            this._maxInternalBlockNumber = blockNumber;\n            this._setFastBlockNumber(blockNumber); // @TODO: Still need this?\n            return { blockNumber, reqTime, respTime };\n        });\n\n        this._internalBlockNumber = checkInternalBlockNumber;\n\n        // Swallow unhandled exceptions; if needed they are handled else where\n        checkInternalBlockNumber.catch((error) => {\n            // Don't null the dead (rejected) fetch, if it has already been updated\n            if (this._internalBlockNumber === checkInternalBlockNumber) {\n                this._internalBlockNumber = null;\n            }\n        });\n\n        return (await checkInternalBlockNumber).blockNumber;\n    }\n\n    async poll(): Promise<void> {\n        const pollId = nextPollId++;\n\n        // Track all running promises, so we can trigger a post-poll once they are complete\n        const runners: Array<Promise<void>> = [];\n\n        let blockNumber: number = null;\n        try {\n            blockNumber = await this._getInternalBlockNumber(100 + this.pollingInterval / 2);\n        } catch (error) {\n            this.emit(\"error\", error);\n            return;\n        }\n        this._setFastBlockNumber(blockNumber);\n\n        // Emit a poll event after we have the latest (fast) block number\n        this.emit(\"poll\", pollId, blockNumber);\n\n        // If the block has not changed, meh.\n        if (blockNumber === this._lastBlockNumber) {\n            this.emit(\"didPoll\", pollId);\n            return;\n        }\n\n        // First polling cycle, trigger a \"block\" events\n        if (this._emitted.block === -2) {\n            this._emitted.block = blockNumber - 1;\n        }\n\n        if (Math.abs((<number>(this._emitted.block)) - blockNumber) > 1000) {\n            logger.warn(`network block skew detected; skipping block events (emitted=${ this._emitted.block } blockNumber${ blockNumber })`);\n            this.emit(\"error\", logger.makeError(\"network block skew detected\", Logger.errors.NETWORK_ERROR, {\n                blockNumber: blockNumber,\n                event: \"blockSkew\",\n                previousBlockNumber: this._emitted.block\n            }));\n            this.emit(\"block\", blockNumber);\n\n        } else {\n            // Notify all listener for each block that has passed\n            for (let i = (<number>this._emitted.block) + 1; i <= blockNumber; i++) {\n                this.emit(\"block\", i);\n            }\n        }\n\n        // The emitted block was updated, check for obsolete events\n        if ((<number>this._emitted.block) !== blockNumber) {\n            this._emitted.block = blockNumber;\n\n            Object.keys(this._emitted).forEach((key) => {\n                // The block event does not expire\n                if (key === \"block\") { return; }\n\n                // The block we were at when we emitted this event\n                const eventBlockNumber = this._emitted[key];\n\n                // We cannot garbage collect pending transactions or blocks here\n                // They should be garbage collected by the Provider when setting\n                // \"pending\" events\n                if (eventBlockNumber === \"pending\") { return; }\n\n                // Evict any transaction hashes or block hashes over 12 blocks\n                // old, since they should not return null anyways\n                if (blockNumber - eventBlockNumber > 12) {\n                    delete this._emitted[key];\n                }\n            });\n        }\n\n        // First polling cycle\n        if (this._lastBlockNumber === -2) {\n            this._lastBlockNumber = blockNumber - 1;\n        }\n        // Find all transaction hashes we are waiting on\n        this._events.forEach((event) => {\n            switch (event.type) {\n                case \"tx\": {\n                    const hash = event.hash;\n                    let runner = this.getTransactionReceipt(hash).then((receipt) => {\n                        if (!receipt || receipt.blockNumber == null) { return null; }\n                        this._emitted[\"t:\" + hash] = receipt.blockNumber;\n                        this.emit(hash, receipt);\n                        return null;\n                    }).catch((error: Error) => { this.emit(\"error\", error); });\n\n                    runners.push(runner);\n\n                    break;\n                }\n\n                case \"filter\": {\n                    // We only allow a single getLogs to be in-flight at a time\n                    if (!event._inflight) {\n                        event._inflight = true;\n\n                        // Filter from the last known event; due to load-balancing\n                        // and some nodes returning updated block numbers before\n                        // indexing events, a logs result with 0 entries cannot be\n                        // trusted and we must retry a range which includes it again\n                        const filter = event.filter;\n                        filter.fromBlock = event._lastBlockNumber + 1;\n                        filter.toBlock = blockNumber;\n\n                        // Prevent fitler ranges from growing too wild\n                        if (filter.toBlock - this._maxFilterBlockRange > filter.fromBlock) {\n                            filter.fromBlock = filter.toBlock - this._maxFilterBlockRange;\n                        }\n\n                        const runner = this.getLogs(filter).then((logs) => {\n                            // Allow the next getLogs\n                            event._inflight = false;\n\n                            if (logs.length === 0) { return; }\n\n                            logs.forEach((log: Log) => {\n                                // Only when we get an event for a given block number\n                                // can we trust the events are indexed\n                                if (log.blockNumber > event._lastBlockNumber) {\n                                    event._lastBlockNumber = log.blockNumber;\n                                }\n\n                                // Make sure we stall requests to fetch blocks and txs\n                                this._emitted[\"b:\" + log.blockHash] = log.blockNumber;\n                                this._emitted[\"t:\" + log.transactionHash] = log.blockNumber;\n\n                                this.emit(filter, log);\n                            });\n                        }).catch((error: Error) => {\n                            this.emit(\"error\", error);\n\n                            // Allow another getLogs (the range was not updated)\n                            event._inflight = false;\n                        });\n                        runners.push(runner);\n                    }\n\n                    break;\n                }\n            }\n        });\n\n        this._lastBlockNumber = blockNumber;\n\n        // Once all events for this loop have been processed, emit \"didPoll\"\n        Promise.all(runners).then(() => {\n            this.emit(\"didPoll\", pollId);\n        }).catch((error) => { this.emit(\"error\", error); });\n\n        return;\n    }\n\n    // Deprecated; do not use this\n    resetEventsBlock(blockNumber: number): void {\n        this._lastBlockNumber = blockNumber - 1;\n        if (this.polling) { this.poll(); }\n    }\n\n    get network(): Network {\n        return this._network;\n    }\n\n    // This method should query the network if the underlying network\n    // can change, such as when connected to a JSON-RPC backend\n    async detectNetwork(): Promise<Network> {\n        return logger.throwError(\"provider does not support network detection\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"provider.detectNetwork\"\n        });\n    }\n\n    async getNetwork(): Promise<Network> {\n        const network = await this._ready();\n\n        // Make sure we are still connected to the same network; this is\n        // only an external call for backends which can have the underlying\n        // network change spontaneously\n        const currentNetwork = await this.detectNetwork();\n        if (network.chainId !== currentNetwork.chainId) {\n\n            // We are allowing network changes, things can get complex fast;\n            // make sure you know what you are doing if you use \"any\"\n            if (this.anyNetwork) {\n                this._network = currentNetwork;\n\n                // Reset all internal block number guards and caches\n                this._lastBlockNumber = -2;\n                this._fastBlockNumber = null;\n                this._fastBlockNumberPromise = null;\n                this._fastQueryDate = 0;\n                this._emitted.block = -2;\n                this._maxInternalBlockNumber = -1024;\n                this._internalBlockNumber = null;\n\n                // The \"network\" event MUST happen before this method resolves\n                // so any events have a chance to unregister, so we stall an\n                // additional event loop before returning from /this/ call\n                this.emit(\"network\", currentNetwork, network);\n                await stall(0);\n\n                return this._network;\n            }\n\n            const error = logger.makeError(\"underlying network changed\", Logger.errors.NETWORK_ERROR, {\n                event: \"changed\",\n                network: network,\n                detectedNetwork: currentNetwork\n            });\n\n            this.emit(\"error\", error);\n            throw error;\n        }\n\n        return network;\n    }\n\n    get blockNumber(): number {\n        this._getInternalBlockNumber(100 + this.pollingInterval / 2).then((blockNumber) => {\n            this._setFastBlockNumber(blockNumber);\n        }, (error) => { });\n\n        return (this._fastBlockNumber != null) ? this._fastBlockNumber: -1;\n    }\n\n    get polling(): boolean {\n        return (this._poller != null);\n    }\n\n    set polling(value: boolean) {\n        if (value && !this._poller) {\n            this._poller = setInterval(() => { this.poll(); }, this.pollingInterval);\n\n            if (!this._bootstrapPoll) {\n                this._bootstrapPoll = setTimeout(() => {\n                    this.poll();\n\n                    // We block additional polls until the polling interval\n                    // is done, to prevent overwhelming the poll function\n                    this._bootstrapPoll = setTimeout(() => {\n                        // If polling was disabled, something may require a poke\n                        // since starting the bootstrap poll and it was disabled\n                        if (!this._poller) { this.poll(); }\n\n                        // Clear out the bootstrap so we can do another\n                        this._bootstrapPoll = null;\n                    }, this.pollingInterval);\n                }, 0);\n            }\n\n        } else if (!value && this._poller) {\n            clearInterval(this._poller);\n            this._poller = null;\n        }\n    }\n\n    get pollingInterval(): number {\n        return this._pollingInterval;\n    }\n\n    set pollingInterval(value: number) {\n        if (typeof(value) !== \"number\" || value <= 0 || parseInt(String(value)) != value) {\n            throw new Error(\"invalid polling interval\");\n        }\n\n        this._pollingInterval = value;\n\n        if (this._poller) {\n            clearInterval(this._poller);\n            this._poller = setInterval(() => { this.poll(); }, this._pollingInterval);\n        }\n    }\n\n    _getFastBlockNumber(): Promise<number> {\n        const now = getTime();\n\n        // Stale block number, request a newer value\n        if ((now - this._fastQueryDate) > 2 * this._pollingInterval) {\n            this._fastQueryDate = now;\n            this._fastBlockNumberPromise = this.getBlockNumber().then((blockNumber) => {\n                if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n                    this._fastBlockNumber = blockNumber;\n                }\n                return this._fastBlockNumber;\n            });\n        }\n\n        return this._fastBlockNumberPromise;\n    }\n\n    _setFastBlockNumber(blockNumber: number): void {\n        // Older block, maybe a stale request\n        if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) { return; }\n\n        // Update the time we updated the blocknumber\n        this._fastQueryDate = getTime();\n\n        // Newer block number, use  it\n        if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n            this._fastBlockNumber = blockNumber;\n            this._fastBlockNumberPromise = Promise.resolve(blockNumber);\n        }\n    }\n\n    async waitForTransaction(transactionHash: string, confirmations?: number, timeout?: number): Promise<TransactionReceipt> {\n        return this._waitForTransaction(transactionHash, (confirmations == null) ? 1: confirmations, timeout || 0, null);\n    }\n\n    async _waitForTransaction(transactionHash: string, confirmations: number, timeout: number, replaceable: { data: string, from: string, nonce: number, to: string, value: BigNumber, startBlock: number }): Promise<TransactionReceipt> {\n        const receipt = await this.getTransactionReceipt(transactionHash);\n\n        // Receipt is already good\n        if ((receipt ? receipt.confirmations: 0) >= confirmations) { return receipt; }\n\n        // Poll until the receipt is good...\n        return new Promise((resolve, reject) => {\n            const cancelFuncs: Array<() => void> = [];\n\n            let done = false;\n            const alreadyDone = function() {\n                if (done) { return true; }\n                done = true;\n                cancelFuncs.forEach((func) => { func(); });\n                return false;\n            };\n\n            const minedHandler = (receipt: TransactionReceipt) => {\n                if (receipt.confirmations < confirmations) { return; }\n                if (alreadyDone()) { return; }\n                resolve(receipt);\n            }\n            this.on(transactionHash, minedHandler);\n            cancelFuncs.push(() => { this.removeListener(transactionHash, minedHandler); });\n\n            if (replaceable) {\n                let lastBlockNumber = replaceable.startBlock;\n                let scannedBlock: number = null;\n                const replaceHandler = async (blockNumber: number) => {\n                    if (done) { return; }\n\n                    // Wait 1 second; this is only used in the case of a fault, so\n                    // we will trade off a little bit of latency for more consistent\n                    // results and fewer JSON-RPC calls\n                    await stall(1000);\n\n                    this.getTransactionCount(replaceable.from).then(async (nonce) => {\n                        if (done) { return; }\n\n                        if (nonce <= replaceable.nonce) {\n                            lastBlockNumber = blockNumber;\n\n                        } else {\n                            // First check if the transaction was mined\n                            {\n                                const mined = await this.getTransaction(transactionHash);\n                                if (mined && mined.blockNumber != null) { return; }\n                            }\n\n                            // First time scanning. We start a little earlier for some\n                            // wiggle room here to handle the eventually consistent nature\n                            // of blockchain (e.g. the getTransactionCount was for a\n                            // different block)\n                            if (scannedBlock == null) {\n                                scannedBlock = lastBlockNumber - 3;\n                                if (scannedBlock < replaceable.startBlock) {\n                                    scannedBlock = replaceable.startBlock;\n                                }\n                            }\n\n                            while (scannedBlock <= blockNumber) {\n                                if (done) { return; }\n\n                                const block = await this.getBlockWithTransactions(scannedBlock);\n                                for (let ti = 0; ti < block.transactions.length; ti++) {\n                                    const tx = block.transactions[ti];\n\n                                    // Successfully mined!\n                                    if (tx.hash === transactionHash) { return; }\n\n                                    // Matches our transaction from and nonce; its a replacement\n                                    if (tx.from === replaceable.from && tx.nonce === replaceable.nonce) {\n                                        if (done) { return; }\n\n                                        // Get the receipt of the replacement\n                                        const receipt = await this.waitForTransaction(tx.hash, confirmations);\n\n                                        // Already resolved or rejected (prolly a timeout)\n                                        if (alreadyDone()) { return; }\n\n                                        // The reason we were replaced\n                                        let reason = \"replaced\";\n                                        if (tx.data === replaceable.data && tx.to === replaceable.to && tx.value.eq(replaceable.value)) {\n                                            reason = \"repriced\";\n                                        } else  if (tx.data === \"0x\" && tx.from === tx.to && tx.value.isZero()) {\n                                            reason = \"cancelled\"\n                                        }\n\n                                        // Explain why we were replaced\n                                        reject(logger.makeError(\"transaction was replaced\", Logger.errors.TRANSACTION_REPLACED, {\n                                            cancelled: (reason === \"replaced\" || reason === \"cancelled\"),\n                                            reason,\n                                            replacement: this._wrapTransaction(tx),\n                                            hash: transactionHash,\n                                            receipt\n                                        }));\n\n                                        return;\n                                    }\n                                }\n                                scannedBlock++;\n                            }\n                        }\n\n                        if (done) { return; }\n                        this.once(\"block\", replaceHandler);\n\n                    }, (error) => {\n                        if (done) { return; }\n                        this.once(\"block\", replaceHandler);\n                    });\n                };\n\n                if (done) { return; }\n                this.once(\"block\", replaceHandler);\n\n                cancelFuncs.push(() => {\n                    this.removeListener(\"block\", replaceHandler);\n                });\n            }\n\n            if (typeof(timeout) === \"number\" && timeout > 0) {\n                const timer = setTimeout(() => {\n                    if (alreadyDone()) { return; }\n                    reject(logger.makeError(\"timeout exceeded\", Logger.errors.TIMEOUT, { timeout: timeout }));\n                }, timeout);\n                if (timer.unref) { timer.unref(); }\n\n                cancelFuncs.push(() => { clearTimeout(timer); });\n            }\n        });\n    }\n\n    async getBlockNumber(): Promise<number> {\n        return this._getInternalBlockNumber(0);\n    }\n\n    async getGasPrice(): Promise<BigNumber> {\n        await this.getNetwork();\n\n        const result = await this.perform(\"getGasPrice\", { });\n        try {\n            return BigNumber.from(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getGasPrice\",\n                result, error\n            });\n        }\n    }\n\n    async getBalance(addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<BigNumber> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            address: this._getAddress(addressOrName),\n            blockTag: this._getBlockTag(blockTag)\n        });\n\n        const result = await this.perform(\"getBalance\", params);\n        try {\n            return BigNumber.from(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getBalance\",\n                params, result, error\n            });\n        }\n    }\n\n    async getTransactionCount(addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<number> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            address: this._getAddress(addressOrName),\n            blockTag: this._getBlockTag(blockTag)\n        });\n\n        const result = await this.perform(\"getTransactionCount\", params);\n        try {\n            return BigNumber.from(result).toNumber();\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getTransactionCount\",\n                params, result, error\n            });\n        }\n    }\n\n    async getCode(addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            address: this._getAddress(addressOrName),\n            blockTag: this._getBlockTag(blockTag)\n        });\n\n        const result = await this.perform(\"getCode\", params);\n        try {\n            return hexlify(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getCode\",\n                params, result, error\n            });\n        }\n    }\n\n    async getStorageAt(addressOrName: string | Promise<string>, position: BigNumberish | Promise<BigNumberish>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            address: this._getAddress(addressOrName),\n            blockTag: this._getBlockTag(blockTag),\n            position: Promise.resolve(position).then((p) => hexValue(p))\n        });\n        const result = await this.perform(\"getStorageAt\", params);\n        try {\n            return hexlify(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getStorageAt\",\n                params, result, error\n            });\n        }\n    }\n\n    // This should be called by any subclass wrapping a TransactionResponse\n    _wrapTransaction(tx: Transaction, hash?: string, startBlock?: number): TransactionResponse {\n        if (hash != null && hexDataLength(hash) !== 32) { throw new Error(\"invalid response - sendTransaction\"); }\n\n        const result = <TransactionResponse>tx;\n\n        // Check the hash we expect is the same as the hash the server reported\n        if (hash != null && tx.hash !== hash) {\n            logger.throwError(\"Transaction hash mismatch from Provider.sendTransaction.\", Logger.errors.UNKNOWN_ERROR, { expectedHash: tx.hash, returnedHash: hash });\n        }\n\n        result.wait = async (confirms?: number, timeout?: number) => {\n            if (confirms == null) { confirms = 1; }\n            if (timeout == null) { timeout = 0; }\n\n            // Get the details to detect replacement\n            let replacement = undefined;\n            if (confirms !== 0 && startBlock != null) {\n                replacement = {\n                    data: tx.data,\n                    from: tx.from,\n                    nonce: tx.nonce,\n                    to: tx.to,\n                    value: tx.value,\n                    startBlock\n                };\n            }\n\n            const receipt = await this._waitForTransaction(tx.hash, confirms, timeout, replacement);\n            if (receipt == null && confirms === 0) { return null; }\n\n            // No longer pending, allow the polling loop to garbage collect this\n            this._emitted[\"t:\" + tx.hash] = receipt.blockNumber;\n\n            if (receipt.status === 0) {\n                logger.throwError(\"transaction failed\", Logger.errors.CALL_EXCEPTION, {\n                    transactionHash: tx.hash,\n                    transaction: tx,\n                    receipt: receipt\n                });\n            }\n            return receipt;\n        };\n\n        return result;\n    }\n\n    async sendTransaction(signedTransaction: string | Promise<string>): Promise<TransactionResponse> {\n        await this.getNetwork();\n        const hexTx = await Promise.resolve(signedTransaction).then(t => hexlify(t));\n        const tx = this.formatter.transaction(signedTransaction);\n        if (tx.confirmations == null) { tx.confirmations = 0; }\n        const blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n        try {\n            const hash = await this.perform(\"sendTransaction\", { signedTransaction: hexTx });\n            return this._wrapTransaction(tx, hash, blockNumber);\n        } catch (error) {\n            (<any>error).transaction = tx;\n            (<any>error).transactionHash = tx.hash;\n            throw error;\n        }\n    }\n\n    async _getTransactionRequest(transaction: Deferrable<TransactionRequest>): Promise<Transaction> {\n        const values: any = await transaction;\n\n        const tx: any = { };\n\n        [\"from\", \"to\"].forEach((key) => {\n            if (values[key] == null) { return; }\n            tx[key] = Promise.resolve(values[key]).then((v) => (v ? this._getAddress(v): null))\n        });\n\n        [\"gasLimit\", \"gasPrice\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"value\"].forEach((key) => {\n            if (values[key] == null) { return; }\n            tx[key] = Promise.resolve(values[key]).then((v) => (v ? BigNumber.from(v): null));\n        });\n\n        [\"type\"].forEach((key) => {\n            if (values[key] == null) { return; }\n            tx[key] = Promise.resolve(values[key]).then((v) => ((v != null) ? v: null));\n        });\n\n        if (values.accessList) {\n            tx.accessList = this.formatter.accessList(values.accessList);\n        }\n\n        [\"data\"].forEach((key) => {\n            if (values[key] == null) { return; }\n            tx[key] = Promise.resolve(values[key]).then((v) => (v ? hexlify(v): null));\n        });\n\n        return this.formatter.transactionRequest(await resolveProperties(tx));\n    }\n\n    async _getFilter(filter: Filter | FilterByBlockHash | Promise<Filter | FilterByBlockHash>): Promise<Filter | FilterByBlockHash> {\n        filter = await filter;\n\n        const result: any = { };\n\n        if (filter.address != null) {\n            result.address = this._getAddress(filter.address);\n        }\n\n        [\"blockHash\", \"topics\"].forEach((key) => {\n            if ((<any>filter)[key] == null) { return; }\n            result[key] = (<any>filter)[key];\n        });\n\n        [\"fromBlock\", \"toBlock\"].forEach((key) => {\n            if ((<any>filter)[key] == null) { return; }\n            result[key] = this._getBlockTag((<any>filter)[key]);\n        });\n\n        return this.formatter.filter(await resolveProperties(result));\n    }\n\n    async _call(transaction: TransactionRequest, blockTag: BlockTag, attempt: number): Promise<string> {\n        if (attempt >= MAX_CCIP_REDIRECTS) {\n            logger.throwError(\"CCIP read exceeded maximum redirections\", Logger.errors.SERVER_ERROR, {\n                redirects: attempt, transaction\n            });\n        }\n\n        const txSender = transaction.to;\n\n        const result = await this.perform(\"call\", { transaction, blockTag });\n\n        // CCIP Read request via OffchainLookup(address,string[],bytes,bytes4,bytes)\n        if (attempt >= 0 && blockTag === \"latest\" && txSender != null && result.substring(0, 10) === \"0x556f1830\" && (hexDataLength(result) % 32 === 4)) {\n            try {\n                const data = hexDataSlice(result, 4);\n\n                // Check the sender of the OffchainLookup matches the transaction\n                const sender = hexDataSlice(data, 0, 32);\n                if (!BigNumber.from(sender).eq(txSender)) {\n                    logger.throwError(\"CCIP Read sender did not match\", Logger.errors.CALL_EXCEPTION, {\n                        name: \"OffchainLookup\",\n                        signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                        transaction, data: result\n                    });\n                }\n\n                // Read the URLs from the response\n                const urls: Array<string> = [];\n                const urlsOffset = BigNumber.from(hexDataSlice(data, 32, 64)).toNumber();\n                const urlsLength = BigNumber.from(hexDataSlice(data, urlsOffset, urlsOffset + 32)).toNumber();\n                const urlsData = hexDataSlice(data, urlsOffset + 32);\n                for (let u = 0; u < urlsLength; u++) {\n                    const url = _parseString(urlsData, u * 32);\n                    if (url == null) {\n                        logger.throwError(\"CCIP Read contained corrupt URL string\", Logger.errors.CALL_EXCEPTION, {\n                            name: \"OffchainLookup\",\n                            signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                            transaction, data: result\n                        });\n                    }\n                    urls.push(url);\n                }\n\n                // Get the CCIP calldata to forward\n                const calldata = _parseBytes(data, 64);\n\n                // Get the callbackSelector (bytes4)\n                if (!BigNumber.from(hexDataSlice(data, 100, 128)).isZero()) {\n                    logger.throwError(\"CCIP Read callback selector included junk\", Logger.errors.CALL_EXCEPTION, {\n                        name: \"OffchainLookup\",\n                        signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                        transaction, data: result\n                    });\n                }\n                const callbackSelector = hexDataSlice(data, 96, 100);\n\n                // Get the extra data to send back to the contract as context\n                const extraData = _parseBytes(data, 128);\n\n                const ccipResult = await this.ccipReadFetch(<Transaction>transaction, calldata, urls);\n                if (ccipResult == null) {\n                    logger.throwError(\"CCIP Read disabled or provided no URLs\", Logger.errors.CALL_EXCEPTION, {\n                        name: \"OffchainLookup\",\n                        signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                        transaction, data: result\n                    });\n                }\n\n                const tx = {\n                    to: txSender,\n                    data: hexConcat([ callbackSelector, encodeBytes([ ccipResult, extraData ]) ])\n                };\n\n                return this._call(tx, blockTag, attempt + 1);\n\n            } catch (error) {\n                if (error.code === Logger.errors.SERVER_ERROR) { throw error; }\n            }\n        }\n\n        try {\n            return hexlify(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"call\",\n                params: { transaction, blockTag }, result, error\n            });\n        }\n\n    }\n\n    async call(transaction: Deferrable<TransactionRequest>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string> {\n        await this.getNetwork();\n        const resolved = await resolveProperties({\n            transaction: this._getTransactionRequest(transaction),\n            blockTag: this._getBlockTag(blockTag),\n            ccipReadEnabled: Promise.resolve(transaction.ccipReadEnabled)\n        });\n        return this._call(resolved.transaction, resolved.blockTag, resolved.ccipReadEnabled ? 0: -1);\n    }\n\n    async estimateGas(transaction: Deferrable<TransactionRequest>): Promise<BigNumber> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            transaction: this._getTransactionRequest(transaction)\n        });\n\n        const result = await this.perform(\"estimateGas\", params);\n        try {\n            return BigNumber.from(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"estimateGas\",\n                params, result, error\n            });\n        }\n    }\n\n    async _getAddress(addressOrName: string | Promise<string>): Promise<string> {\n        addressOrName = await addressOrName;\n        if (typeof(addressOrName) !== \"string\") {\n            logger.throwArgumentError(\"invalid address or ENS name\", \"name\", addressOrName);\n        }\n\n        const address = await this.resolveName(addressOrName);\n        if (address == null) {\n            logger.throwError(\"ENS name not configured\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: `resolveName(${ JSON.stringify(addressOrName) })`\n            });\n        }\n        return address;\n    }\n\n    async _getBlock(blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>, includeTransactions?: boolean): Promise<Block | BlockWithTransactions> {\n        await this.getNetwork();\n\n        blockHashOrBlockTag = await blockHashOrBlockTag;\n\n        // If blockTag is a number (not \"latest\", etc), this is the block number\n        let blockNumber = -128;\n\n        const params: { [key: string]: any } = {\n            includeTransactions: !!includeTransactions\n        };\n\n        if (isHexString(blockHashOrBlockTag, 32)) {\n            params.blockHash = blockHashOrBlockTag;\n        } else {\n            try {\n                params.blockTag = await this._getBlockTag(blockHashOrBlockTag);\n                if (isHexString(params.blockTag)) {\n                    blockNumber = parseInt(params.blockTag.substring(2), 16);\n                }\n            } catch (error) {\n                logger.throwArgumentError(\"invalid block hash or block tag\", \"blockHashOrBlockTag\", blockHashOrBlockTag);\n            }\n        }\n\n        return poll(async () => {\n            const block = await this.perform(\"getBlock\", params);\n\n            // Block was not found\n            if (block == null) {\n\n                // For blockhashes, if we didn't say it existed, that blockhash may\n                // not exist. If we did see it though, perhaps from a log, we know\n                // it exists, and this node is just not caught up yet.\n                if (params.blockHash != null) {\n                    if (this._emitted[\"b:\" + params.blockHash] == null) { return null; }\n                }\n\n                // For block tags, if we are asking for a future block, we return null\n                if (params.blockTag != null) {\n                    if (blockNumber > this._emitted.block) { return null; }\n                }\n\n                // Retry on the next block\n                return undefined;\n            }\n\n            // Add transactions\n            if (includeTransactions) {\n                let blockNumber: number = null;\n                for (let i = 0; i < block.transactions.length; i++) {\n                    const tx = block.transactions[i];\n                    if (tx.blockNumber == null) {\n                        tx.confirmations = 0;\n\n                    } else if (tx.confirmations == null) {\n                        if (blockNumber == null) {\n                            blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                        }\n\n                        // Add the confirmations using the fast block number (pessimistic)\n                        let confirmations = (blockNumber - tx.blockNumber) + 1;\n                        if (confirmations <= 0) { confirmations = 1; }\n                        tx.confirmations = confirmations;\n                    }\n                }\n\n                const blockWithTxs: any = this.formatter.blockWithTransactions(block);\n                blockWithTxs.transactions = blockWithTxs.transactions.map((tx: TransactionResponse) => this._wrapTransaction(tx));\n                return blockWithTxs;\n            }\n\n            return this.formatter.block(block);\n\n        }, { oncePoll: this });\n    }\n\n    getBlock(blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>): Promise<Block> {\n        return <Promise<Block>>(this._getBlock(blockHashOrBlockTag, false));\n    }\n\n    getBlockWithTransactions(blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>): Promise<BlockWithTransactions> {\n        return <Promise<BlockWithTransactions>>(this._getBlock(blockHashOrBlockTag, true));\n    }\n\n    async getTransaction(transactionHash: string | Promise<string>): Promise<TransactionResponse> {\n        await this.getNetwork();\n        transactionHash = await transactionHash;\n\n        const params = { transactionHash: this.formatter.hash(transactionHash, true) };\n\n        return poll(async () => {\n            const result = await this.perform(\"getTransaction\", params);\n\n            if (result == null) {\n                if (this._emitted[\"t:\" + transactionHash] == null) {\n                    return null;\n                }\n                return undefined;\n            }\n\n            const tx = this.formatter.transactionResponse(result);\n\n            if (tx.blockNumber == null) {\n                tx.confirmations = 0;\n\n            } else if (tx.confirmations == null) {\n                const blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n\n                // Add the confirmations using the fast block number (pessimistic)\n                let confirmations = (blockNumber - tx.blockNumber) + 1;\n                if (confirmations <= 0) { confirmations = 1; }\n                tx.confirmations = confirmations;\n            }\n\n            return this._wrapTransaction(tx);\n        }, { oncePoll: this });\n    }\n\n    async getTransactionReceipt(transactionHash: string | Promise<string>): Promise<TransactionReceipt> {\n        await this.getNetwork();\n\n        transactionHash = await transactionHash;\n\n        const params = { transactionHash: this.formatter.hash(transactionHash, true) };\n\n        return poll(async () => {\n            const result = await this.perform(\"getTransactionReceipt\", params);\n\n            if (result == null) {\n                if (this._emitted[\"t:\" + transactionHash] == null) {\n                    return null;\n                }\n                return undefined;\n            }\n\n            // \"geth-etc\" returns receipts before they are ready\n            if (result.blockHash == null) { return undefined; }\n\n            const receipt = this.formatter.receipt(result);\n\n            if (receipt.blockNumber == null) {\n                receipt.confirmations = 0;\n\n            } else if (receipt.confirmations == null) {\n                const blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n\n                // Add the confirmations using the fast block number (pessimistic)\n                let confirmations = (blockNumber - receipt.blockNumber) + 1;\n                if (confirmations <= 0) { confirmations = 1; }\n                receipt.confirmations = confirmations;\n            }\n\n            return receipt;\n        }, { oncePoll: this });\n    }\n\n    async getLogs(filter: Filter | FilterByBlockHash | Promise<Filter | FilterByBlockHash>): Promise<Array<Log>> {\n        await this.getNetwork();\n        const params = await resolveProperties({ filter: this._getFilter(filter) });\n        const logs: Array<Log> = await this.perform(\"getLogs\", params);\n        logs.forEach((log) => {\n            if (log.removed == null) { log.removed = false; }\n        });\n        return Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs);\n    }\n\n    async getEtherPrice(): Promise<number> {\n        await this.getNetwork();\n        return this.perform(\"getEtherPrice\", { });\n    }\n\n    async _getBlockTag(blockTag: BlockTag | Promise<BlockTag>): Promise<BlockTag> {\n        blockTag = await blockTag;\n\n        if (typeof(blockTag) === \"number\" && blockTag < 0) {\n            if (blockTag % 1) {\n                logger.throwArgumentError(\"invalid BlockTag\", \"blockTag\", blockTag);\n            }\n\n            let blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n            blockNumber += blockTag;\n            if (blockNumber < 0) { blockNumber = 0; }\n            return this.formatter.blockTag(blockNumber)\n        }\n\n        return this.formatter.blockTag(blockTag);\n    }\n\n\n    async getResolver(name: string): Promise<null | Resolver> {\n        let currentName = name;\n        while (true) {\n            if (currentName === \"\" || currentName === \".\") { return null; }\n\n            // Optimization since the eth node cannot change and does\n            // not have a wildcard resolver\n            if (name !== \"eth\" && currentName === \"eth\") { return null; }\n\n            // Check the current node for a resolver\n            const addr = await this._getResolver(currentName, \"getResolver\");\n\n            // Found a resolver!\n            if (addr != null) {\n                const resolver = new Resolver(this, addr, name);\n\n                // Legacy resolver found, using EIP-2544 so it isn't safe to use\n                if (currentName !== name && !(await resolver.supportsWildcard())) { return null; }\n\n                return resolver;\n            }\n\n            // Get the parent node\n            currentName = currentName.split(\".\").slice(1).join(\".\");\n        }\n\n    }\n\n    async _getResolver(name: string, operation?: string): Promise<string> {\n        if (operation == null) { operation = \"ENS\"; }\n\n        const network = await this.getNetwork();\n\n        // No ENS...\n        if (!network.ensAddress) {\n            logger.throwError(\n                \"network does not support ENS\",\n                Logger.errors.UNSUPPORTED_OPERATION,\n                { operation, network: network.name }\n            );\n        }\n\n        try {\n            // keccak256(\"resolver(bytes32)\")\n            const addrData = await this.call({\n                to: network.ensAddress,\n                data: (\"0x0178b8bf\" + namehash(name).substring(2))\n            });\n            return this.formatter.callAddress(addrData);\n        } catch (error) {\n            // ENS registry cannot throw errors on resolver(bytes32)\n        }\n\n        return null;\n    }\n\n    async resolveName(name: string | Promise<string>): Promise<null | string> {\n        name = await name;\n\n        // If it is already an address, nothing to resolve\n        try {\n            return Promise.resolve(this.formatter.address(name));\n        } catch (error) {\n            // If is is a hexstring, the address is bad (See #694)\n            if (isHexString(name)) { throw error; }\n        }\n\n        if (typeof(name) !== \"string\") {\n            logger.throwArgumentError(\"invalid ENS name\", \"name\", name);\n        }\n\n        // Get the addr from the resolver\n        const resolver = await this.getResolver(name);\n        if (!resolver) { return null; }\n\n        return await resolver.getAddress();\n    }\n\n    async lookupAddress(address: string | Promise<string>): Promise<null | string> {\n        address = await address;\n        address = this.formatter.address(address);\n\n        const node = address.substring(2).toLowerCase() + \".addr.reverse\";\n\n        const resolverAddr = await this._getResolver(node, \"lookupAddress\");\n        if (resolverAddr == null) { return null; }\n\n        // keccak(\"name(bytes32)\")\n        const name = _parseString(await this.call({\n            to: resolverAddr,\n            data: (\"0x691f3431\" + namehash(node).substring(2))\n        }), 0);\n\n        const addr = await this.resolveName(name);\n        if (addr != address) { return null; }\n\n        return name;\n    }\n\n    async getAvatar(nameOrAddress: string): Promise<null | string> {\n        let resolver: Resolver = null;\n        if (isHexString(nameOrAddress)) {\n            // Address; reverse lookup\n            const address = this.formatter.address(nameOrAddress);\n\n            const node = address.substring(2).toLowerCase() + \".addr.reverse\";\n\n            const resolverAddress = await this._getResolver(node, \"getAvatar\");\n            if (!resolverAddress) { return null; }\n\n            // Try resolving the avatar against the addr.reverse resolver\n            resolver = new Resolver(this, resolverAddress, node);\n            try {\n                const avatar = await resolver.getAvatar();\n                if (avatar) { return avatar.url; }\n            } catch (error) {\n                if (error.code !== Logger.errors.CALL_EXCEPTION) { throw error; }\n            }\n\n            // Try getting the name and performing forward lookup; allowing wildcards\n            try {\n                // keccak(\"name(bytes32)\")\n                const name = _parseString(await this.call({\n                    to: resolverAddress,\n                    data: (\"0x691f3431\" + namehash(node).substring(2))\n                }), 0);\n                resolver = await this.getResolver(name);\n            } catch (error) {\n                if (error.code !== Logger.errors.CALL_EXCEPTION) { throw error; }\n                return null;\n            }\n\n        } else {\n            // ENS name; forward lookup with wildcard\n            resolver = await this.getResolver(nameOrAddress);\n            if (!resolver) { return null; }\n        }\n\n        const avatar = await resolver.getAvatar();\n        if (avatar == null) { return null; }\n\n        return avatar.url;\n    }\n\n    perform(method: string, params: any): Promise<any> {\n        return logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, { operation: method });\n    }\n\n    _startEvent(event: Event): void {\n        this.polling = (this._events.filter((e) => e.pollable()).length > 0);\n    }\n\n    _stopEvent(event: Event): void {\n        this.polling = (this._events.filter((e) => e.pollable()).length > 0);\n    }\n\n    _addEventListener(eventName: EventType, listener: Listener, once: boolean): this {\n        const event = new Event(getEventTag(eventName), listener, once)\n        this._events.push(event);\n        this._startEvent(event);\n\n        return this;\n    }\n\n    on(eventName: EventType, listener: Listener): this {\n        return this._addEventListener(eventName, listener, false);\n    }\n\n    once(eventName: EventType, listener: Listener): this {\n        return this._addEventListener(eventName, listener, true);\n    }\n\n\n    emit(eventName: EventType, ...args: Array<any>): boolean {\n        let result = false;\n\n        let stopped: Array<Event> = [ ];\n\n        let eventTag = getEventTag(eventName);\n        this._events = this._events.filter((event) => {\n            if (event.tag !== eventTag) { return true; }\n\n            setTimeout(() => {\n                event.listener.apply(this, args);\n            }, 0);\n\n            result = true;\n\n            if (event.once) {\n                stopped.push(event);\n                return false;\n            }\n\n            return true;\n        });\n\n        stopped.forEach((event) => { this._stopEvent(event); });\n\n        return result;\n    }\n\n    listenerCount(eventName?: EventType): number {\n        if (!eventName) { return this._events.length; }\n\n        let eventTag = getEventTag(eventName);\n        return this._events.filter((event) => {\n            return (event.tag === eventTag);\n        }).length;\n    }\n\n    listeners(eventName?: EventType): Array<Listener> {\n        if (eventName == null) {\n            return this._events.map((event) => event.listener);\n        }\n\n        let eventTag = getEventTag(eventName);\n        return this._events\n            .filter((event) => (event.tag === eventTag))\n            .map((event) => event.listener);\n    }\n\n    off(eventName: EventType, listener?: Listener): this {\n        if (listener == null) {\n            return this.removeAllListeners(eventName);\n        }\n\n        const stopped: Array<Event> = [ ];\n\n        let found = false;\n\n        let eventTag = getEventTag(eventName);\n        this._events = this._events.filter((event) => {\n            if (event.tag !== eventTag || event.listener != listener) { return true; }\n            if (found) { return true; }\n            found = true;\n            stopped.push(event);\n            return false;\n        });\n\n        stopped.forEach((event) => { this._stopEvent(event); });\n\n        return this;\n    }\n\n    removeAllListeners(eventName?: EventType): this {\n        let stopped: Array<Event> = [ ];\n        if (eventName == null) {\n            stopped = this._events;\n\n            this._events = [ ];\n        } else {\n            const eventTag = getEventTag(eventName);\n            this._events = this._events.filter((event) => {\n                if (event.tag !== eventTag) { return true; }\n                stopped.push(event);\n                return false;\n            });\n        }\n\n        stopped.forEach((event) => { this._stopEvent(event); });\n\n        return this;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}