{"ast":null,"code":"\"use strict\"; // See: https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI\n\nimport _classCallCheck from \"C:/Users/kiril/Desktop/newenvai/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/kiril/Desktop/newenvai/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nimport { Reader, Writer } from \"./coders/abstract-coder\";\nimport { AddressCoder } from \"./coders/address\";\nimport { ArrayCoder } from \"./coders/array\";\nimport { BooleanCoder } from \"./coders/boolean\";\nimport { BytesCoder } from \"./coders/bytes\";\nimport { FixedBytesCoder } from \"./coders/fixed-bytes\";\nimport { NullCoder } from \"./coders/null\";\nimport { NumberCoder } from \"./coders/number\";\nimport { StringCoder } from \"./coders/string\";\nimport { TupleCoder } from \"./coders/tuple\";\nimport { ParamType } from \"./fragments\";\nvar paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);\nvar paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);\nexport var AbiCoder = /*#__PURE__*/function () {\n  function AbiCoder(coerceFunc) {\n    _classCallCheck(this, AbiCoder);\n\n    defineReadOnly(this, \"coerceFunc\", coerceFunc || null);\n  }\n\n  _createClass(AbiCoder, [{\n    key: \"_getCoder\",\n    value: function _getCoder(param) {\n      var _this = this;\n\n      switch (param.baseType) {\n        case \"address\":\n          return new AddressCoder(param.name);\n\n        case \"bool\":\n          return new BooleanCoder(param.name);\n\n        case \"string\":\n          return new StringCoder(param.name);\n\n        case \"bytes\":\n          return new BytesCoder(param.name);\n\n        case \"array\":\n          return new ArrayCoder(this._getCoder(param.arrayChildren), param.arrayLength, param.name);\n\n        case \"tuple\":\n          return new TupleCoder((param.components || []).map(function (component) {\n            return _this._getCoder(component);\n          }), param.name);\n\n        case \"\":\n          return new NullCoder(param.name);\n      } // u?int[0-9]*\n\n\n      var match = param.type.match(paramTypeNumber);\n\n      if (match) {\n        var size = parseInt(match[2] || \"256\");\n\n        if (size === 0 || size > 256 || size % 8 !== 0) {\n          logger.throwArgumentError(\"invalid \" + match[1] + \" bit length\", \"param\", param);\n        }\n\n        return new NumberCoder(size / 8, match[1] === \"int\", param.name);\n      } // bytes[0-9]+\n\n\n      match = param.type.match(paramTypeBytes);\n\n      if (match) {\n        var _size = parseInt(match[1]);\n\n        if (_size === 0 || _size > 32) {\n          logger.throwArgumentError(\"invalid bytes length\", \"param\", param);\n        }\n\n        return new FixedBytesCoder(_size, param.name);\n      }\n\n      return logger.throwArgumentError(\"invalid type\", \"type\", param.type);\n    }\n  }, {\n    key: \"_getWordSize\",\n    value: function _getWordSize() {\n      return 32;\n    }\n  }, {\n    key: \"_getReader\",\n    value: function _getReader(data, allowLoose) {\n      return new Reader(data, this._getWordSize(), this.coerceFunc, allowLoose);\n    }\n  }, {\n    key: \"_getWriter\",\n    value: function _getWriter() {\n      return new Writer(this._getWordSize());\n    }\n  }, {\n    key: \"getDefaultValue\",\n    value: function getDefaultValue(types) {\n      var _this2 = this;\n\n      var coders = types.map(function (type) {\n        return _this2._getCoder(ParamType.from(type));\n      });\n      var coder = new TupleCoder(coders, \"_\");\n      return coder.defaultValue();\n    }\n  }, {\n    key: \"encode\",\n    value: function encode(types, values) {\n      var _this3 = this;\n\n      if (types.length !== values.length) {\n        logger.throwError(\"types/values length mismatch\", Logger.errors.INVALID_ARGUMENT, {\n          count: {\n            types: types.length,\n            values: values.length\n          },\n          value: {\n            types: types,\n            values: values\n          }\n        });\n      }\n\n      var coders = types.map(function (type) {\n        return _this3._getCoder(ParamType.from(type));\n      });\n      var coder = new TupleCoder(coders, \"_\");\n\n      var writer = this._getWriter();\n\n      coder.encode(writer, values);\n      return writer.data;\n    }\n  }, {\n    key: \"decode\",\n    value: function decode(types, data, loose) {\n      var _this4 = this;\n\n      var coders = types.map(function (type) {\n        return _this4._getCoder(ParamType.from(type));\n      });\n      var coder = new TupleCoder(coders, \"_\");\n      return coder.decode(this._getReader(arrayify(data), loose));\n    }\n  }]);\n\n  return AbiCoder;\n}();\nexport var defaultAbiCoder = new AbiCoder();","map":{"version":3,"mappings":"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","names":["arrayify","defineReadOnly","Logger","version","logger","Reader","Writer","AddressCoder","ArrayCoder","BooleanCoder","BytesCoder","FixedBytesCoder","NullCoder","NumberCoder","StringCoder","TupleCoder","ParamType","paramTypeBytes","RegExp","paramTypeNumber","AbiCoder","coerceFunc","param","baseType","name","_getCoder","arrayChildren","arrayLength","components","map","component","match","type","size","parseInt","throwArgumentError","data","allowLoose","_getWordSize","types","coders","from","coder","defaultValue","values","length","throwError","errors","INVALID_ARGUMENT","count","value","writer","_getWriter","encode","loose","decode","_getReader","defaultAbiCoder"],"sources":["C:\\Users\\kiril\\Desktop\\newenvai\\client\\node_modules\\@ethersproject\\abi\\src.ts\\abi-coder.ts"],"sourcesContent":["\"use strict\";\n\n// See: https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI\n\nimport { arrayify, BytesLike } from \"@ethersproject/bytes\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { Coder, Reader, Result, Writer } from \"./coders/abstract-coder\";\nimport { AddressCoder } from \"./coders/address\";\nimport { ArrayCoder } from \"./coders/array\";\nimport { BooleanCoder } from \"./coders/boolean\";\nimport { BytesCoder } from \"./coders/bytes\";\nimport { FixedBytesCoder } from \"./coders/fixed-bytes\";\nimport { NullCoder } from \"./coders/null\";\nimport { NumberCoder } from \"./coders/number\";\nimport { StringCoder } from \"./coders/string\";\nimport { TupleCoder } from \"./coders/tuple\";\n\nimport { ParamType } from \"./fragments\";\n\n\nconst paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);\nconst paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);\n\n\nexport type CoerceFunc = (type: string, value: any) => any;\n\nexport class AbiCoder {\n    readonly coerceFunc: CoerceFunc;\n\n    constructor(coerceFunc?: CoerceFunc) {\n        defineReadOnly(this, \"coerceFunc\", coerceFunc || null);\n    }\n\n    _getCoder(param: ParamType): Coder {\n\n        switch (param.baseType) {\n            case \"address\":\n                return new AddressCoder(param.name);\n            case \"bool\":\n                return new BooleanCoder(param.name);\n            case \"string\":\n                return new StringCoder(param.name);\n            case \"bytes\":\n                return new BytesCoder(param.name);\n            case \"array\":\n                return new ArrayCoder(this._getCoder(param.arrayChildren), param.arrayLength, param.name);\n            case \"tuple\":\n                return new TupleCoder((param.components || []).map((component) => {\n                    return this._getCoder(component);\n                }), param.name);\n            case \"\":\n                return new NullCoder(param.name);\n        }\n\n        // u?int[0-9]*\n        let match = param.type.match(paramTypeNumber);\n        if (match) {\n            let size = parseInt(match[2] || \"256\");\n            if (size === 0 || size > 256 || (size % 8) !== 0) {\n                logger.throwArgumentError(\"invalid \" + match[1] + \" bit length\", \"param\", param);\n            }\n            return new NumberCoder(size / 8, (match[1] === \"int\"), param.name);\n        }\n\n        // bytes[0-9]+\n        match = param.type.match(paramTypeBytes);\n        if (match) {\n            let size = parseInt(match[1]);\n            if (size === 0 || size > 32) {\n                logger.throwArgumentError(\"invalid bytes length\", \"param\", param);\n            }\n            return new FixedBytesCoder(size, param.name);\n        }\n\n        return logger.throwArgumentError(\"invalid type\", \"type\", param.type);\n    }\n\n    _getWordSize(): number { return 32; }\n\n    _getReader(data: Uint8Array, allowLoose?: boolean): Reader {\n        return new Reader(data, this._getWordSize(), this.coerceFunc, allowLoose);\n    }\n\n    _getWriter(): Writer {\n        return new Writer(this._getWordSize());\n    }\n\n    getDefaultValue(types: ReadonlyArray<string | ParamType>): Result {\n        const coders: Array<Coder> = types.map((type) => this._getCoder(ParamType.from(type)));\n        const coder = new TupleCoder(coders, \"_\");\n        return coder.defaultValue();\n    }\n\n    encode(types: ReadonlyArray<string | ParamType>, values: ReadonlyArray<any>): string {\n        if (types.length !== values.length) {\n            logger.throwError(\"types/values length mismatch\", Logger.errors.INVALID_ARGUMENT, {\n                count: { types: types.length, values: values.length },\n                value: { types: types, values: values }\n            });\n        }\n\n        const coders = types.map((type) => this._getCoder(ParamType.from(type)));\n        const coder = (new TupleCoder(coders, \"_\"));\n\n        const writer = this._getWriter();\n        coder.encode(writer, values);\n        return writer.data;\n    }\n\n    decode(types: ReadonlyArray<string | ParamType>, data: BytesLike, loose?: boolean): Result {\n        const coders: Array<Coder> = types.map((type) => this._getCoder(ParamType.from(type)));\n        const coder = new TupleCoder(coders, \"_\");\n        return coder.decode(this._getReader(arrayify(data), loose));\n    }\n}\n\nexport const defaultAbiCoder: AbiCoder = new AbiCoder();\n\n"]},"metadata":{},"sourceType":"module"}