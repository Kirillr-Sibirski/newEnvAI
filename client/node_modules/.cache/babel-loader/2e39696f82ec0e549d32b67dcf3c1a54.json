{"ast":null,"code":"\"use strict\";\n\nimport _toConsumableArray from \"C:/Users/kiril/Desktop/newenvai/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _assertThisInitialized from \"C:/Users/kiril/Desktop/newenvai/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"C:/Users/kiril/Desktop/newenvai/client/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/kiril/Desktop/newenvai/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/kiril/Desktop/newenvai/client/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/kiril/Desktop/newenvai/client/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _classCallCheck from \"C:/Users/kiril/Desktop/newenvai/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/kiril/Desktop/newenvai/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _regeneratorRuntime from \"C:/Users/kiril/Desktop/newenvai/client/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { checkResultErrors, Indexed, Interface } from \"@ethersproject/abi\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport { Signer, VoidSigner } from \"@ethersproject/abstract-signer\";\nimport { getAddress, getContractAddress as _getContractAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexlify, isBytes, isHexString } from \"@ethersproject/bytes\";\nimport { defineReadOnly, deepCopy, getStatic, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport { accessListify } from \"@ethersproject/transactions\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\n;\n; ///////////////////////////////\n\nvar allowedTransactionKeys = {\n  chainId: true,\n  data: true,\n  from: true,\n  gasLimit: true,\n  gasPrice: true,\n  nonce: true,\n  to: true,\n  value: true,\n  type: true,\n  accessList: true,\n  maxFeePerGas: true,\n  maxPriorityFeePerGas: true,\n  customData: true,\n  ccipReadEnabled: true\n};\n\nfunction resolveName(resolver, nameOrPromise) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    var name, address;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return nameOrPromise;\n\n          case 2:\n            name = _context.sent;\n\n            if (typeof name !== \"string\") {\n              logger.throwArgumentError(\"invalid address or ENS name\", \"name\", name);\n            } // If it is already an address, just use it (after adding checksum)\n\n\n            _context.prev = 4;\n            return _context.abrupt(\"return\", getAddress(name));\n\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context[\"catch\"](4);\n\n          case 10:\n            if (!resolver) {\n              logger.throwError(\"a provider or signer is needed to resolve ENS names\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"resolveName\"\n              });\n            }\n\n            _context.next = 13;\n            return resolver.resolveName(name);\n\n          case 13:\n            address = _context.sent;\n\n            if (address == null) {\n              logger.throwArgumentError(\"resolver or addr is not configured for ENS name\", \"name\", name);\n            }\n\n            return _context.abrupt(\"return\", address);\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[4, 8]]);\n  }));\n} // Recursively replaces ENS names with promises to resolve the name and resolves all properties\n\n\nfunction resolveAddresses(resolver, value, paramType) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!Array.isArray(paramType)) {\n              _context2.next = 4;\n              break;\n            }\n\n            _context2.next = 3;\n            return Promise.all(paramType.map(function (paramType, index) {\n              return resolveAddresses(resolver, Array.isArray(value) ? value[index] : value[paramType.name], paramType);\n            }));\n\n          case 3:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 4:\n            if (!(paramType.type === \"address\")) {\n              _context2.next = 8;\n              break;\n            }\n\n            _context2.next = 7;\n            return resolveName(resolver, value);\n\n          case 7:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 8:\n            if (!(paramType.type === \"tuple\")) {\n              _context2.next = 12;\n              break;\n            }\n\n            _context2.next = 11;\n            return resolveAddresses(resolver, value, paramType.components);\n\n          case 11:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 12:\n            if (!(paramType.baseType === \"array\")) {\n              _context2.next = 18;\n              break;\n            }\n\n            if (Array.isArray(value)) {\n              _context2.next = 15;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", Promise.reject(logger.makeError(\"invalid value for array\", Logger.errors.INVALID_ARGUMENT, {\n              argument: \"value\",\n              value: value\n            })));\n\n          case 15:\n            _context2.next = 17;\n            return Promise.all(value.map(function (v) {\n              return resolveAddresses(resolver, v, paramType.arrayChildren);\n            }));\n\n          case 17:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 18:\n            return _context2.abrupt(\"return\", value);\n\n          case 19:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n}\n\nfunction populateTransaction(contract, fragment, args) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n    var _this = this;\n\n    var overrides, resolved, data, tx, ro, intrinsic, bytes, i, roValue, leftovers;\n    return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            // If an extra argument is given, it is overrides\n            overrides = {};\n\n            if (args.length === fragment.inputs.length + 1 && typeof args[args.length - 1] === \"object\") {\n              overrides = shallowCopy(args.pop());\n            } // Make sure the parameter count matches\n\n\n            logger.checkArgumentCount(args.length, fragment.inputs.length, \"passed to contract\"); // Populate \"from\" override (allow promises)\n\n            if (contract.signer) {\n              if (overrides.from) {\n                // Contracts with a Signer are from the Signer's frame-of-reference;\n                // but we allow overriding \"from\" if it matches the signer\n                overrides.from = resolveProperties({\n                  override: resolveName(contract.signer, overrides.from),\n                  signer: contract.signer.getAddress()\n                }).then(function (check) {\n                  return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n                    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n                      while (1) {\n                        switch (_context3.prev = _context3.next) {\n                          case 0:\n                            if (getAddress(check.signer) !== check.override) {\n                              logger.throwError(\"Contract with a Signer cannot override from\", Logger.errors.UNSUPPORTED_OPERATION, {\n                                operation: \"overrides.from\"\n                              });\n                            }\n\n                            return _context3.abrupt(\"return\", check.override);\n\n                          case 2:\n                          case \"end\":\n                            return _context3.stop();\n                        }\n                      }\n                    }, _callee3);\n                  }));\n                });\n              } else {\n                overrides.from = contract.signer.getAddress();\n              }\n            } else if (overrides.from) {\n              overrides.from = resolveName(contract.provider, overrides.from); //} else {\n              // Contracts without a signer can override \"from\", and if\n              // unspecified the zero address is used\n              //overrides.from = AddressZero;\n            } // Wait for all dependencies to be resolved (prefer the signer over the provider)\n\n\n            _context4.next = 6;\n            return resolveProperties({\n              args: resolveAddresses(contract.signer || contract.provider, args, fragment.inputs),\n              address: contract.resolvedAddress,\n              overrides: resolveProperties(overrides) || {}\n            });\n\n          case 6:\n            resolved = _context4.sent;\n            // The ABI coded transaction\n            data = contract.interface.encodeFunctionData(fragment, resolved.args);\n            tx = {\n              data: data,\n              to: resolved.address\n            }; // Resolved Overrides\n\n            ro = resolved.overrides; // Populate simple overrides\n\n            if (ro.nonce != null) {\n              tx.nonce = BigNumber.from(ro.nonce).toNumber();\n            }\n\n            if (ro.gasLimit != null) {\n              tx.gasLimit = BigNumber.from(ro.gasLimit);\n            }\n\n            if (ro.gasPrice != null) {\n              tx.gasPrice = BigNumber.from(ro.gasPrice);\n            }\n\n            if (ro.maxFeePerGas != null) {\n              tx.maxFeePerGas = BigNumber.from(ro.maxFeePerGas);\n            }\n\n            if (ro.maxPriorityFeePerGas != null) {\n              tx.maxPriorityFeePerGas = BigNumber.from(ro.maxPriorityFeePerGas);\n            }\n\n            if (ro.from != null) {\n              tx.from = ro.from;\n            }\n\n            if (ro.type != null) {\n              tx.type = ro.type;\n            }\n\n            if (ro.accessList != null) {\n              tx.accessList = accessListify(ro.accessList);\n            } // If there was no \"gasLimit\" override, but the ABI specifies a default, use it\n\n\n            if (tx.gasLimit == null && fragment.gas != null) {\n              // Compute the intrinsic gas cost for this transaction\n              // @TODO: This is based on the yellow paper as of Petersburg; this is something\n              // we may wish to parameterize in v6 as part of the Network object. Since this\n              // is always a non-nil to address, we can ignore G_create, but may wish to add\n              // similar logic to the ContractFactory.\n              intrinsic = 21000;\n              bytes = arrayify(data);\n\n              for (i = 0; i < bytes.length; i++) {\n                intrinsic += 4;\n\n                if (bytes[i]) {\n                  intrinsic += 64;\n                }\n              }\n\n              tx.gasLimit = BigNumber.from(fragment.gas).add(intrinsic);\n            } // Populate \"value\" override\n\n\n            if (ro.value) {\n              roValue = BigNumber.from(ro.value);\n\n              if (!roValue.isZero() && !fragment.payable) {\n                logger.throwError(\"non-payable method cannot override value\", Logger.errors.UNSUPPORTED_OPERATION, {\n                  operation: \"overrides.value\",\n                  value: overrides.value\n                });\n              }\n\n              tx.value = roValue;\n            }\n\n            if (ro.customData) {\n              tx.customData = shallowCopy(ro.customData);\n            }\n\n            if (ro.ccipReadEnabled) {\n              tx.ccipReadEnabled = !!ro.ccipReadEnabled;\n            } // Remove the overrides\n\n\n            delete overrides.nonce;\n            delete overrides.gasLimit;\n            delete overrides.gasPrice;\n            delete overrides.from;\n            delete overrides.value;\n            delete overrides.type;\n            delete overrides.accessList;\n            delete overrides.maxFeePerGas;\n            delete overrides.maxPriorityFeePerGas;\n            delete overrides.customData;\n            delete overrides.ccipReadEnabled; // Make sure there are no stray overrides, which may indicate a\n            // typo or using an unsupported key.\n\n            leftovers = Object.keys(overrides).filter(function (key) {\n              return overrides[key] != null;\n            });\n\n            if (leftovers.length) {\n              logger.throwError(\"cannot override \".concat(leftovers.map(function (l) {\n                return JSON.stringify(l);\n              }).join(\",\")), Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"overrides\",\n                overrides: leftovers\n              });\n            }\n\n            return _context4.abrupt(\"return\", tx);\n\n          case 36:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n}\n\nfunction buildPopulate(contract, fragment) {\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return populateTransaction(contract, fragment, args);\n  };\n}\n\nfunction buildEstimate(contract, fragment) {\n  var signerOrProvider = contract.signer || contract.provider;\n  return function () {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n      var tx;\n      return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              if (!signerOrProvider) {\n                logger.throwError(\"estimate require a provider or signer\", Logger.errors.UNSUPPORTED_OPERATION, {\n                  operation: \"estimateGas\"\n                });\n              }\n\n              _context5.next = 3;\n              return populateTransaction(contract, fragment, args);\n\n            case 3:\n              tx = _context5.sent;\n              _context5.next = 6;\n              return signerOrProvider.estimateGas(tx);\n\n            case 6:\n              return _context5.abrupt(\"return\", _context5.sent);\n\n            case 7:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n  };\n}\n\nfunction addContractWait(contract, tx) {\n  var wait = tx.wait.bind(tx);\n\n  tx.wait = function (confirmations) {\n    return wait(confirmations).then(function (receipt) {\n      receipt.events = receipt.logs.map(function (log) {\n        var event = deepCopy(log);\n        var parsed = null;\n\n        try {\n          parsed = contract.interface.parseLog(log);\n        } catch (e) {} // Successfully parsed the event log; include it\n\n\n        if (parsed) {\n          event.args = parsed.args;\n\n          event.decode = function (data, topics) {\n            return contract.interface.decodeEventLog(parsed.eventFragment, data, topics);\n          };\n\n          event.event = parsed.name;\n          event.eventSignature = parsed.signature;\n        } // Useful operations\n\n\n        event.removeListener = function () {\n          return contract.provider;\n        };\n\n        event.getBlock = function () {\n          return contract.provider.getBlock(receipt.blockHash);\n        };\n\n        event.getTransaction = function () {\n          return contract.provider.getTransaction(receipt.transactionHash);\n        };\n\n        event.getTransactionReceipt = function () {\n          return Promise.resolve(receipt);\n        };\n\n        return event;\n      });\n      return receipt;\n    });\n  };\n}\n\nfunction buildCall(contract, fragment, collapseSimple) {\n  var signerOrProvider = contract.signer || contract.provider;\n  return function () {\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n\n    return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n      var blockTag, overrides, tx, result, value;\n      return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              // Extract the \"blockTag\" override if present\n              blockTag = undefined;\n\n              if (!(args.length === fragment.inputs.length + 1 && typeof args[args.length - 1] === \"object\")) {\n                _context6.next = 9;\n                break;\n              }\n\n              overrides = shallowCopy(args.pop());\n\n              if (!(overrides.blockTag != null)) {\n                _context6.next = 7;\n                break;\n              }\n\n              _context6.next = 6;\n              return overrides.blockTag;\n\n            case 6:\n              blockTag = _context6.sent;\n\n            case 7:\n              delete overrides.blockTag;\n              args.push(overrides);\n\n            case 9:\n              if (!(contract.deployTransaction != null)) {\n                _context6.next = 12;\n                break;\n              }\n\n              _context6.next = 12;\n              return contract._deployed(blockTag);\n\n            case 12:\n              _context6.next = 14;\n              return populateTransaction(contract, fragment, args);\n\n            case 14:\n              tx = _context6.sent;\n              _context6.next = 17;\n              return signerOrProvider.call(tx, blockTag);\n\n            case 17:\n              result = _context6.sent;\n              _context6.prev = 18;\n              value = contract.interface.decodeFunctionResult(fragment, result);\n\n              if (collapseSimple && fragment.outputs.length === 1) {\n                value = value[0];\n              }\n\n              return _context6.abrupt(\"return\", value);\n\n            case 24:\n              _context6.prev = 24;\n              _context6.t0 = _context6[\"catch\"](18);\n\n              if (_context6.t0.code === Logger.errors.CALL_EXCEPTION) {\n                _context6.t0.address = contract.address;\n                _context6.t0.args = args;\n                _context6.t0.transaction = tx;\n              }\n\n              throw _context6.t0;\n\n            case 28:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6, null, [[18, 24]]);\n    }));\n  };\n}\n\nfunction buildSend(contract, fragment) {\n  return function () {\n    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      args[_key4] = arguments[_key4];\n    }\n\n    return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n      var txRequest, tx;\n      return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              if (!contract.signer) {\n                logger.throwError(\"sending a transaction requires a signer\", Logger.errors.UNSUPPORTED_OPERATION, {\n                  operation: \"sendTransaction\"\n                });\n              } // If the contract was just deployed, wait until it is mined\n\n\n              if (!(contract.deployTransaction != null)) {\n                _context7.next = 4;\n                break;\n              }\n\n              _context7.next = 4;\n              return contract._deployed();\n\n            case 4:\n              _context7.next = 6;\n              return populateTransaction(contract, fragment, args);\n\n            case 6:\n              txRequest = _context7.sent;\n              _context7.next = 9;\n              return contract.signer.sendTransaction(txRequest);\n\n            case 9:\n              tx = _context7.sent;\n              // Tweak the tx.wait so the receipt has extra properties\n              addContractWait(contract, tx);\n              return _context7.abrupt(\"return\", tx);\n\n            case 12:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }));\n  };\n}\n\nfunction buildDefault(contract, fragment, collapseSimple) {\n  if (fragment.constant) {\n    return buildCall(contract, fragment, collapseSimple);\n  }\n\n  return buildSend(contract, fragment);\n}\n\nfunction getEventTag(filter) {\n  if (filter.address && (filter.topics == null || filter.topics.length === 0)) {\n    return \"*\";\n  }\n\n  return (filter.address || \"*\") + \"@\" + (filter.topics ? filter.topics.map(function (topic) {\n    if (Array.isArray(topic)) {\n      return topic.join(\"|\");\n    }\n\n    return topic;\n  }).join(\":\") : \"\");\n}\n\nvar RunningEvent = /*#__PURE__*/function () {\n  function RunningEvent(tag, filter) {\n    _classCallCheck(this, RunningEvent);\n\n    defineReadOnly(this, \"tag\", tag);\n    defineReadOnly(this, \"filter\", filter);\n    this._listeners = [];\n  }\n\n  _createClass(RunningEvent, [{\n    key: \"addListener\",\n    value: function addListener(listener, once) {\n      this._listeners.push({\n        listener: listener,\n        once: once\n      });\n    }\n  }, {\n    key: \"removeListener\",\n    value: function removeListener(listener) {\n      var done = false;\n      this._listeners = this._listeners.filter(function (item) {\n        if (done || item.listener !== listener) {\n          return true;\n        }\n\n        done = true;\n        return false;\n      });\n    }\n  }, {\n    key: \"removeAllListeners\",\n    value: function removeAllListeners() {\n      this._listeners = [];\n    }\n  }, {\n    key: \"listeners\",\n    value: function listeners() {\n      return this._listeners.map(function (i) {\n        return i.listener;\n      });\n    }\n  }, {\n    key: \"listenerCount\",\n    value: function listenerCount() {\n      return this._listeners.length;\n    }\n  }, {\n    key: \"run\",\n    value: function run(args) {\n      var _this2 = this;\n\n      var listenerCount = this.listenerCount();\n      this._listeners = this._listeners.filter(function (item) {\n        var argsCopy = args.slice(); // Call the callback in the next event loop\n\n        setTimeout(function () {\n          item.listener.apply(_this2, argsCopy);\n        }, 0); // Reschedule it if it not \"once\"\n\n        return !item.once;\n      });\n      return listenerCount;\n    }\n  }, {\n    key: \"prepareEvent\",\n    value: function prepareEvent(event) {} // Returns the array that will be applied to an emit\n\n  }, {\n    key: \"getEmit\",\n    value: function getEmit(event) {\n      return [event];\n    }\n  }]);\n\n  return RunningEvent;\n}();\n\nvar ErrorRunningEvent = /*#__PURE__*/function (_RunningEvent) {\n  _inherits(ErrorRunningEvent, _RunningEvent);\n\n  var _super = _createSuper(ErrorRunningEvent);\n\n  function ErrorRunningEvent() {\n    _classCallCheck(this, ErrorRunningEvent);\n\n    return _super.call(this, \"error\", null);\n  }\n\n  return _createClass(ErrorRunningEvent);\n}(RunningEvent); // @TODO Fragment should inherit Wildcard? and just override getEmit?\n//       or have a common abstract super class, with enough constructor\n//       options to configure both.\n// A Fragment Event will populate all the properties that Wildcard\n// will, and additionally dereference the arguments when emitting\n\n\nvar FragmentRunningEvent = /*#__PURE__*/function (_RunningEvent2) {\n  _inherits(FragmentRunningEvent, _RunningEvent2);\n\n  var _super2 = _createSuper(FragmentRunningEvent);\n\n  function FragmentRunningEvent(address, contractInterface, fragment, topics) {\n    var _this3;\n\n    _classCallCheck(this, FragmentRunningEvent);\n\n    var filter = {\n      address: address\n    };\n    var topic = contractInterface.getEventTopic(fragment);\n\n    if (topics) {\n      if (topic !== topics[0]) {\n        logger.throwArgumentError(\"topic mismatch\", \"topics\", topics);\n      }\n\n      filter.topics = topics.slice();\n    } else {\n      filter.topics = [topic];\n    }\n\n    _this3 = _super2.call(this, getEventTag(filter), filter);\n    defineReadOnly(_assertThisInitialized(_this3), \"address\", address);\n    defineReadOnly(_assertThisInitialized(_this3), \"interface\", contractInterface);\n    defineReadOnly(_assertThisInitialized(_this3), \"fragment\", fragment);\n    return _this3;\n  }\n\n  _createClass(FragmentRunningEvent, [{\n    key: \"prepareEvent\",\n    value: function prepareEvent(event) {\n      var _this4 = this;\n\n      _get(_getPrototypeOf(FragmentRunningEvent.prototype), \"prepareEvent\", this).call(this, event);\n\n      event.event = this.fragment.name;\n      event.eventSignature = this.fragment.format();\n\n      event.decode = function (data, topics) {\n        return _this4.interface.decodeEventLog(_this4.fragment, data, topics);\n      };\n\n      try {\n        event.args = this.interface.decodeEventLog(this.fragment, event.data, event.topics);\n      } catch (error) {\n        event.args = null;\n        event.decodeError = error;\n      }\n    }\n  }, {\n    key: \"getEmit\",\n    value: function getEmit(event) {\n      var errors = checkResultErrors(event.args);\n\n      if (errors.length) {\n        throw errors[0].error;\n      }\n\n      var args = (event.args || []).slice();\n      args.push(event);\n      return args;\n    }\n  }]);\n\n  return FragmentRunningEvent;\n}(RunningEvent); // A Wildcard Event will attempt to populate:\n//  - event            The name of the event name\n//  - eventSignature   The full signature of the event\n//  - decode           A function to decode data and topics\n//  - args             The decoded data and topics\n\n\nvar WildcardRunningEvent = /*#__PURE__*/function (_RunningEvent3) {\n  _inherits(WildcardRunningEvent, _RunningEvent3);\n\n  var _super3 = _createSuper(WildcardRunningEvent);\n\n  function WildcardRunningEvent(address, contractInterface) {\n    var _this5;\n\n    _classCallCheck(this, WildcardRunningEvent);\n\n    _this5 = _super3.call(this, \"*\", {\n      address: address\n    });\n    defineReadOnly(_assertThisInitialized(_this5), \"address\", address);\n    defineReadOnly(_assertThisInitialized(_this5), \"interface\", contractInterface);\n    return _this5;\n  }\n\n  _createClass(WildcardRunningEvent, [{\n    key: \"prepareEvent\",\n    value: function prepareEvent(event) {\n      var _this6 = this;\n\n      _get(_getPrototypeOf(WildcardRunningEvent.prototype), \"prepareEvent\", this).call(this, event);\n\n      try {\n        var parsed = this.interface.parseLog(event);\n        event.event = parsed.name;\n        event.eventSignature = parsed.signature;\n\n        event.decode = function (data, topics) {\n          return _this6.interface.decodeEventLog(parsed.eventFragment, data, topics);\n        };\n\n        event.args = parsed.args;\n      } catch (error) {// No matching event\n      }\n    }\n  }]);\n\n  return WildcardRunningEvent;\n}(RunningEvent);\n\nexport var BaseContract = /*#__PURE__*/function () {\n  function BaseContract(addressOrName, contractInterface, signerOrProvider) {\n    var _this7 = this;\n\n    _classCallCheck(this, BaseContract);\n\n    // @TODO: Maybe still check the addressOrName looks like a valid address or name?\n    //address = getAddress(address);\n    defineReadOnly(this, \"interface\", getStatic(this instanceof BaseContract ? this.constructor : void 0, \"getInterface\")(contractInterface));\n\n    if (signerOrProvider == null) {\n      defineReadOnly(this, \"provider\", null);\n      defineReadOnly(this, \"signer\", null);\n    } else if (Signer.isSigner(signerOrProvider)) {\n      defineReadOnly(this, \"provider\", signerOrProvider.provider || null);\n      defineReadOnly(this, \"signer\", signerOrProvider);\n    } else if (Provider.isProvider(signerOrProvider)) {\n      defineReadOnly(this, \"provider\", signerOrProvider);\n      defineReadOnly(this, \"signer\", null);\n    } else {\n      logger.throwArgumentError(\"invalid signer or provider\", \"signerOrProvider\", signerOrProvider);\n    }\n\n    defineReadOnly(this, \"callStatic\", {});\n    defineReadOnly(this, \"estimateGas\", {});\n    defineReadOnly(this, \"functions\", {});\n    defineReadOnly(this, \"populateTransaction\", {});\n    defineReadOnly(this, \"filters\", {});\n    {\n      var uniqueFilters = {};\n      Object.keys(this.interface.events).forEach(function (eventSignature) {\n        var event = _this7.interface.events[eventSignature];\n        defineReadOnly(_this7.filters, eventSignature, function () {\n          for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n            args[_key5] = arguments[_key5];\n          }\n\n          return {\n            address: _this7.address,\n            topics: _this7.interface.encodeFilterTopics(event, args)\n          };\n        });\n\n        if (!uniqueFilters[event.name]) {\n          uniqueFilters[event.name] = [];\n        }\n\n        uniqueFilters[event.name].push(eventSignature);\n      });\n      Object.keys(uniqueFilters).forEach(function (name) {\n        var filters = uniqueFilters[name];\n\n        if (filters.length === 1) {\n          defineReadOnly(_this7.filters, name, _this7.filters[filters[0]]);\n        } else {\n          logger.warn(\"Duplicate definition of \".concat(name, \" (\").concat(filters.join(\", \"), \")\"));\n        }\n      });\n    }\n    defineReadOnly(this, \"_runningEvents\", {});\n    defineReadOnly(this, \"_wrappedEmits\", {});\n\n    if (addressOrName == null) {\n      logger.throwArgumentError(\"invalid contract address or ENS name\", \"addressOrName\", addressOrName);\n    }\n\n    defineReadOnly(this, \"address\", addressOrName);\n\n    if (this.provider) {\n      defineReadOnly(this, \"resolvedAddress\", resolveName(this.provider, addressOrName));\n    } else {\n      try {\n        defineReadOnly(this, \"resolvedAddress\", Promise.resolve(getAddress(addressOrName)));\n      } catch (error) {\n        // Without a provider, we cannot use ENS names\n        logger.throwError(\"provider is required to use ENS name as contract address\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"new Contract\"\n        });\n      }\n    } // Swallow bad ENS names to prevent Unhandled Exceptions\n\n\n    this.resolvedAddress.catch(function (e) {});\n    var uniqueNames = {};\n    var uniqueSignatures = {};\n    Object.keys(this.interface.functions).forEach(function (signature) {\n      var fragment = _this7.interface.functions[signature]; // Check that the signature is unique; if not the ABI generation has\n      // not been cleaned or may be incorrectly generated\n\n      if (uniqueSignatures[signature]) {\n        logger.warn(\"Duplicate ABI entry for \".concat(JSON.stringify(signature)));\n        return;\n      }\n\n      uniqueSignatures[signature] = true; // Track unique names; we only expose bare named functions if they\n      // are ambiguous\n\n      {\n        var name = fragment.name;\n\n        if (!uniqueNames[\"%\".concat(name)]) {\n          uniqueNames[\"%\".concat(name)] = [];\n        }\n\n        uniqueNames[\"%\".concat(name)].push(signature);\n      }\n\n      if (_this7[signature] == null) {\n        defineReadOnly(_this7, signature, buildDefault(_this7, fragment, true));\n      } // We do not collapse simple calls on this bucket, which allows\n      // frameworks to safely use this without introspection as well as\n      // allows decoding error recovery.\n\n\n      if (_this7.functions[signature] == null) {\n        defineReadOnly(_this7.functions, signature, buildDefault(_this7, fragment, false));\n      }\n\n      if (_this7.callStatic[signature] == null) {\n        defineReadOnly(_this7.callStatic, signature, buildCall(_this7, fragment, true));\n      }\n\n      if (_this7.populateTransaction[signature] == null) {\n        defineReadOnly(_this7.populateTransaction, signature, buildPopulate(_this7, fragment));\n      }\n\n      if (_this7.estimateGas[signature] == null) {\n        defineReadOnly(_this7.estimateGas, signature, buildEstimate(_this7, fragment));\n      }\n    });\n    Object.keys(uniqueNames).forEach(function (name) {\n      // Ambiguous names to not get attached as bare names\n      var signatures = uniqueNames[name];\n\n      if (signatures.length > 1) {\n        return;\n      } // Strip off the leading \"%\" used for prototype protection\n\n\n      name = name.substring(1);\n      var signature = signatures[0]; // If overwriting a member property that is null, swallow the error\n\n      try {\n        if (_this7[name] == null) {\n          defineReadOnly(_this7, name, _this7[signature]);\n        }\n      } catch (e) {}\n\n      if (_this7.functions[name] == null) {\n        defineReadOnly(_this7.functions, name, _this7.functions[signature]);\n      }\n\n      if (_this7.callStatic[name] == null) {\n        defineReadOnly(_this7.callStatic, name, _this7.callStatic[signature]);\n      }\n\n      if (_this7.populateTransaction[name] == null) {\n        defineReadOnly(_this7.populateTransaction, name, _this7.populateTransaction[signature]);\n      }\n\n      if (_this7.estimateGas[name] == null) {\n        defineReadOnly(_this7.estimateGas, name, _this7.estimateGas[signature]);\n      }\n    });\n  }\n\n  _createClass(BaseContract, [{\n    key: \"deployed\",\n    value: // @TODO: Allow timeout?\n    function deployed() {\n      return this._deployed();\n    }\n  }, {\n    key: \"_deployed\",\n    value: function _deployed(blockTag) {\n      var _this8 = this;\n\n      if (!this._deployedPromise) {\n        // If we were just deployed, we know the transaction we should occur in\n        if (this.deployTransaction) {\n          this._deployedPromise = this.deployTransaction.wait().then(function () {\n            return _this8;\n          });\n        } else {\n          // @TODO: Once we allow a timeout to be passed in, we will wait\n          // up to that many blocks for getCode\n          // Otherwise, poll for our code to be deployed\n          this._deployedPromise = this.provider.getCode(this.address, blockTag).then(function (code) {\n            if (code === \"0x\") {\n              logger.throwError(\"contract not deployed\", Logger.errors.UNSUPPORTED_OPERATION, {\n                contractAddress: _this8.address,\n                operation: \"getDeployed\"\n              });\n            }\n\n            return _this8;\n          });\n        }\n      }\n\n      return this._deployedPromise;\n    } // @TODO:\n    // estimateFallback(overrides?: TransactionRequest): Promise<BigNumber>\n    // @TODO:\n    // estimateDeploy(bytecode: string, ...args): Promise<BigNumber>\n\n  }, {\n    key: \"fallback\",\n    value: function fallback(overrides) {\n      var _this9 = this;\n\n      if (!this.signer) {\n        logger.throwError(\"sending a transactions require a signer\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"sendTransaction(fallback)\"\n        });\n      }\n\n      var tx = shallowCopy(overrides || {});\n      [\"from\", \"to\"].forEach(function (key) {\n        if (tx[key] == null) {\n          return;\n        }\n\n        logger.throwError(\"cannot override \" + key, Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: key\n        });\n      });\n      tx.to = this.resolvedAddress;\n      return this.deployed().then(function () {\n        return _this9.signer.sendTransaction(tx);\n      });\n    } // Reconnect to a different signer or provider\n\n  }, {\n    key: \"connect\",\n    value: function connect(signerOrProvider) {\n      if (typeof signerOrProvider === \"string\") {\n        signerOrProvider = new VoidSigner(signerOrProvider, this.provider);\n      }\n\n      var contract = new this.constructor(this.address, this.interface, signerOrProvider);\n\n      if (this.deployTransaction) {\n        defineReadOnly(contract, \"deployTransaction\", this.deployTransaction);\n      }\n\n      return contract;\n    } // Re-attach to a different on-chain instance of this contract\n\n  }, {\n    key: \"attach\",\n    value: function attach(addressOrName) {\n      return new this.constructor(addressOrName, this.interface, this.signer || this.provider);\n    }\n  }, {\n    key: \"_normalizeRunningEvent\",\n    value: function _normalizeRunningEvent(runningEvent) {\n      // Already have an instance of this event running; we can re-use it\n      if (this._runningEvents[runningEvent.tag]) {\n        return this._runningEvents[runningEvent.tag];\n      }\n\n      return runningEvent;\n    }\n  }, {\n    key: \"_getRunningEvent\",\n    value: function _getRunningEvent(eventName) {\n      if (typeof eventName === \"string\") {\n        // Listen for \"error\" events (if your contract has an error event, include\n        // the full signature to bypass this special event keyword)\n        if (eventName === \"error\") {\n          return this._normalizeRunningEvent(new ErrorRunningEvent());\n        } // Listen for any event that is registered\n\n\n        if (eventName === \"event\") {\n          return this._normalizeRunningEvent(new RunningEvent(\"event\", null));\n        } // Listen for any event\n\n\n        if (eventName === \"*\") {\n          return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));\n        } // Get the event Fragment (throws if ambiguous/unknown event)\n\n\n        var fragment = this.interface.getEvent(eventName);\n        return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment));\n      } // We have topics to filter by...\n\n\n      if (eventName.topics && eventName.topics.length > 0) {\n        // Is it a known topichash? (throws if no matching topichash)\n        try {\n          var topic = eventName.topics[0];\n\n          if (typeof topic !== \"string\") {\n            throw new Error(\"invalid topic\"); // @TODO: May happen for anonymous events\n          }\n\n          var _fragment = this.interface.getEvent(topic);\n\n          return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, _fragment, eventName.topics));\n        } catch (error) {} // Filter by the unknown topichash\n\n\n        var filter = {\n          address: this.address,\n          topics: eventName.topics\n        };\n        return this._normalizeRunningEvent(new RunningEvent(getEventTag(filter), filter));\n      }\n\n      return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));\n    }\n  }, {\n    key: \"_checkRunningEvents\",\n    value: function _checkRunningEvents(runningEvent) {\n      if (runningEvent.listenerCount() === 0) {\n        delete this._runningEvents[runningEvent.tag]; // If we have a poller for this, remove it\n\n        var emit = this._wrappedEmits[runningEvent.tag];\n\n        if (emit && runningEvent.filter) {\n          this.provider.off(runningEvent.filter, emit);\n          delete this._wrappedEmits[runningEvent.tag];\n        }\n      }\n    } // Subclasses can override this to gracefully recover\n    // from parse errors if they wish\n\n  }, {\n    key: \"_wrapEvent\",\n    value: function _wrapEvent(runningEvent, log, listener) {\n      var _this10 = this;\n\n      var event = deepCopy(log);\n\n      event.removeListener = function () {\n        if (!listener) {\n          return;\n        }\n\n        runningEvent.removeListener(listener);\n\n        _this10._checkRunningEvents(runningEvent);\n      };\n\n      event.getBlock = function () {\n        return _this10.provider.getBlock(log.blockHash);\n      };\n\n      event.getTransaction = function () {\n        return _this10.provider.getTransaction(log.transactionHash);\n      };\n\n      event.getTransactionReceipt = function () {\n        return _this10.provider.getTransactionReceipt(log.transactionHash);\n      }; // This may throw if the topics and data mismatch the signature\n\n\n      runningEvent.prepareEvent(event);\n      return event;\n    }\n  }, {\n    key: \"_addEventListener\",\n    value: function _addEventListener(runningEvent, listener, once) {\n      var _this11 = this;\n\n      if (!this.provider) {\n        logger.throwError(\"events require a provider or a signer with a provider\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"once\"\n        });\n      }\n\n      runningEvent.addListener(listener, once); // Track this running event and its listeners (may already be there; but no hard in updating)\n\n      this._runningEvents[runningEvent.tag] = runningEvent; // If we are not polling the provider, start polling\n\n      if (!this._wrappedEmits[runningEvent.tag]) {\n        var wrappedEmit = function wrappedEmit(log) {\n          var event = _this11._wrapEvent(runningEvent, log, listener); // Try to emit the result for the parameterized event...\n\n\n          if (event.decodeError == null) {\n            try {\n              var args = runningEvent.getEmit(event);\n\n              _this11.emit.apply(_this11, [runningEvent.filter].concat(_toConsumableArray(args)));\n            } catch (error) {\n              event.decodeError = error.error;\n            }\n          } // Always emit \"event\" for fragment-base events\n\n\n          if (runningEvent.filter != null) {\n            _this11.emit(\"event\", event);\n          } // Emit \"error\" if there was an error\n\n\n          if (event.decodeError != null) {\n            _this11.emit(\"error\", event.decodeError, event);\n          }\n        };\n\n        this._wrappedEmits[runningEvent.tag] = wrappedEmit; // Special events, like \"error\" do not have a filter\n\n        if (runningEvent.filter != null) {\n          this.provider.on(runningEvent.filter, wrappedEmit);\n        }\n      }\n    }\n  }, {\n    key: \"queryFilter\",\n    value: function queryFilter(event, fromBlockOrBlockhash, toBlock) {\n      var _this12 = this;\n\n      var runningEvent = this._getRunningEvent(event);\n\n      var filter = shallowCopy(runningEvent.filter);\n\n      if (typeof fromBlockOrBlockhash === \"string\" && isHexString(fromBlockOrBlockhash, 32)) {\n        if (toBlock != null) {\n          logger.throwArgumentError(\"cannot specify toBlock with blockhash\", \"toBlock\", toBlock);\n        }\n\n        filter.blockHash = fromBlockOrBlockhash;\n      } else {\n        filter.fromBlock = fromBlockOrBlockhash != null ? fromBlockOrBlockhash : 0;\n        filter.toBlock = toBlock != null ? toBlock : \"latest\";\n      }\n\n      return this.provider.getLogs(filter).then(function (logs) {\n        return logs.map(function (log) {\n          return _this12._wrapEvent(runningEvent, log, null);\n        });\n      });\n    }\n  }, {\n    key: \"on\",\n    value: function on(event, listener) {\n      this._addEventListener(this._getRunningEvent(event), listener, false);\n\n      return this;\n    }\n  }, {\n    key: \"once\",\n    value: function once(event, listener) {\n      this._addEventListener(this._getRunningEvent(event), listener, true);\n\n      return this;\n    }\n  }, {\n    key: \"emit\",\n    value: function emit(eventName) {\n      if (!this.provider) {\n        return false;\n      }\n\n      var runningEvent = this._getRunningEvent(eventName);\n\n      for (var _len6 = arguments.length, args = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {\n        args[_key6 - 1] = arguments[_key6];\n      }\n\n      var result = runningEvent.run(args) > 0; // May have drained all the \"once\" events; check for living events\n\n      this._checkRunningEvents(runningEvent);\n\n      return result;\n    }\n  }, {\n    key: \"listenerCount\",\n    value: function listenerCount(eventName) {\n      var _this13 = this;\n\n      if (!this.provider) {\n        return 0;\n      }\n\n      if (eventName == null) {\n        return Object.keys(this._runningEvents).reduce(function (accum, key) {\n          return accum + _this13._runningEvents[key].listenerCount();\n        }, 0);\n      }\n\n      return this._getRunningEvent(eventName).listenerCount();\n    }\n  }, {\n    key: \"listeners\",\n    value: function listeners(eventName) {\n      var _this14 = this;\n\n      if (!this.provider) {\n        return [];\n      }\n\n      if (eventName == null) {\n        var _ret = function () {\n          var result = [];\n\n          for (var tag in _this14._runningEvents) {\n            _this14._runningEvents[tag].listeners().forEach(function (listener) {\n              result.push(listener);\n            });\n          }\n\n          return {\n            v: result\n          };\n        }();\n\n        if (typeof _ret === \"object\") return _ret.v;\n      }\n\n      return this._getRunningEvent(eventName).listeners();\n    }\n  }, {\n    key: \"removeAllListeners\",\n    value: function removeAllListeners(eventName) {\n      if (!this.provider) {\n        return this;\n      }\n\n      if (eventName == null) {\n        for (var tag in this._runningEvents) {\n          var _runningEvent = this._runningEvents[tag];\n\n          _runningEvent.removeAllListeners();\n\n          this._checkRunningEvents(_runningEvent);\n        }\n\n        return this;\n      } // Delete any listeners\n\n\n      var runningEvent = this._getRunningEvent(eventName);\n\n      runningEvent.removeAllListeners();\n\n      this._checkRunningEvents(runningEvent);\n\n      return this;\n    }\n  }, {\n    key: \"off\",\n    value: function off(eventName, listener) {\n      if (!this.provider) {\n        return this;\n      }\n\n      var runningEvent = this._getRunningEvent(eventName);\n\n      runningEvent.removeListener(listener);\n\n      this._checkRunningEvents(runningEvent);\n\n      return this;\n    }\n  }, {\n    key: \"removeListener\",\n    value: function removeListener(eventName, listener) {\n      return this.off(eventName, listener);\n    }\n  }], [{\n    key: \"getContractAddress\",\n    value: function getContractAddress(transaction) {\n      return _getContractAddress(transaction);\n    }\n  }, {\n    key: \"getInterface\",\n    value: function getInterface(contractInterface) {\n      if (Interface.isInterface(contractInterface)) {\n        return contractInterface;\n      }\n\n      return new Interface(contractInterface);\n    }\n  }, {\n    key: \"isIndexed\",\n    value: function isIndexed(value) {\n      return Indexed.isIndexed(value);\n    }\n  }]);\n\n  return BaseContract;\n}();\nexport var Contract = /*#__PURE__*/function (_BaseContract) {\n  _inherits(Contract, _BaseContract);\n\n  var _super4 = _createSuper(Contract);\n\n  function Contract() {\n    _classCallCheck(this, Contract);\n\n    return _super4.apply(this, arguments);\n  }\n\n  return _createClass(Contract);\n}(BaseContract);\nexport var ContractFactory = /*#__PURE__*/function () {\n  function ContractFactory(contractInterface, bytecode, signer) {\n    _classCallCheck(this, ContractFactory);\n\n    var bytecodeHex = null;\n\n    if (typeof bytecode === \"string\") {\n      bytecodeHex = bytecode;\n    } else if (isBytes(bytecode)) {\n      bytecodeHex = hexlify(bytecode);\n    } else if (bytecode && typeof bytecode.object === \"string\") {\n      // Allow the bytecode object from the Solidity compiler\n      bytecodeHex = bytecode.object;\n    } else {\n      // Crash in the next verification step\n      bytecodeHex = \"!\";\n    } // Make sure it is 0x prefixed\n\n\n    if (bytecodeHex.substring(0, 2) !== \"0x\") {\n      bytecodeHex = \"0x\" + bytecodeHex;\n    } // Make sure the final result is valid bytecode\n\n\n    if (!isHexString(bytecodeHex) || bytecodeHex.length % 2) {\n      logger.throwArgumentError(\"invalid bytecode\", \"bytecode\", bytecode);\n    } // If we have a signer, make sure it is valid\n\n\n    if (signer && !Signer.isSigner(signer)) {\n      logger.throwArgumentError(\"invalid signer\", \"signer\", signer);\n    }\n\n    defineReadOnly(this, \"bytecode\", bytecodeHex);\n    defineReadOnly(this, \"interface\", getStatic(this instanceof ContractFactory ? this.constructor : void 0, \"getInterface\")(contractInterface));\n    defineReadOnly(this, \"signer\", signer || null);\n  } // @TODO: Future; rename to populateTransaction?\n\n\n  _createClass(ContractFactory, [{\n    key: \"getDeployTransaction\",\n    value: function getDeployTransaction() {\n      var tx = {}; // If we have 1 additional argument, we allow transaction overrides\n\n      for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n        args[_key7] = arguments[_key7];\n      }\n\n      if (args.length === this.interface.deploy.inputs.length + 1 && typeof args[args.length - 1] === \"object\") {\n        tx = shallowCopy(args.pop());\n\n        for (var key in tx) {\n          if (!allowedTransactionKeys[key]) {\n            throw new Error(\"unknown transaction override \" + key);\n          }\n        }\n      } // Do not allow these to be overridden in a deployment transaction\n\n\n      [\"data\", \"from\", \"to\"].forEach(function (key) {\n        if (tx[key] == null) {\n          return;\n        }\n\n        logger.throwError(\"cannot override \" + key, Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: key\n        });\n      });\n\n      if (tx.value) {\n        var value = BigNumber.from(tx.value);\n\n        if (!value.isZero() && !this.interface.deploy.payable) {\n          logger.throwError(\"non-payable constructor cannot override value\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"overrides.value\",\n            value: tx.value\n          });\n        }\n      } // Make sure the call matches the constructor signature\n\n\n      logger.checkArgumentCount(args.length, this.interface.deploy.inputs.length, \" in Contract constructor\"); // Set the data to the bytecode + the encoded constructor arguments\n\n      tx.data = hexlify(concat([this.bytecode, this.interface.encodeDeploy(args)]));\n      return tx;\n    }\n  }, {\n    key: \"deploy\",\n    value: function deploy() {\n      for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n        args[_key8] = arguments[_key8];\n      }\n\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n        var overrides, params, unsignedTx, tx, address, contract;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                overrides = {}; // If 1 extra parameter was passed in, it contains overrides\n\n                if (args.length === this.interface.deploy.inputs.length + 1) {\n                  overrides = args.pop();\n                } // Make sure the call matches the constructor signature\n\n\n                logger.checkArgumentCount(args.length, this.interface.deploy.inputs.length, \" in Contract constructor\"); // Resolve ENS names and promises in the arguments\n\n                _context8.next = 5;\n                return resolveAddresses(this.signer, args, this.interface.deploy.inputs);\n\n              case 5:\n                params = _context8.sent;\n                params.push(overrides); // Get the deployment transaction (with optional overrides)\n\n                unsignedTx = this.getDeployTransaction.apply(this, _toConsumableArray(params)); // Send the deployment transaction\n\n                _context8.next = 10;\n                return this.signer.sendTransaction(unsignedTx);\n\n              case 10:\n                tx = _context8.sent;\n                address = getStatic(this.constructor, \"getContractAddress\")(tx);\n                contract = getStatic(this.constructor, \"getContract\")(address, this.interface, this.signer); // Add the modified wait that wraps events\n\n                addContractWait(contract, tx);\n                defineReadOnly(contract, \"deployTransaction\", tx);\n                return _context8.abrupt(\"return\", contract);\n\n              case 16:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n    }\n  }, {\n    key: \"attach\",\n    value: function attach(address) {\n      return this.constructor.getContract(address, this.interface, this.signer);\n    }\n  }, {\n    key: \"connect\",\n    value: function connect(signer) {\n      return new this.constructor(this.interface, this.bytecode, signer);\n    }\n  }], [{\n    key: \"fromSolidity\",\n    value: function fromSolidity(compilerOutput, signer) {\n      if (compilerOutput == null) {\n        logger.throwError(\"missing compiler output\", Logger.errors.MISSING_ARGUMENT, {\n          argument: \"compilerOutput\"\n        });\n      }\n\n      if (typeof compilerOutput === \"string\") {\n        compilerOutput = JSON.parse(compilerOutput);\n      }\n\n      var abi = compilerOutput.abi;\n      var bytecode = null;\n\n      if (compilerOutput.bytecode) {\n        bytecode = compilerOutput.bytecode;\n      } else if (compilerOutput.evm && compilerOutput.evm.bytecode) {\n        bytecode = compilerOutput.evm.bytecode;\n      }\n\n      return new this(abi, bytecode, signer);\n    }\n  }, {\n    key: \"getInterface\",\n    value: function getInterface(contractInterface) {\n      return Contract.getInterface(contractInterface);\n    }\n  }, {\n    key: \"getContractAddress\",\n    value: function getContractAddress(tx) {\n      return _getContractAddress(tx);\n    }\n  }, {\n    key: \"getContract\",\n    value: function getContract(address, contractInterface, signer) {\n      return new Contract(address, contractInterface, signer);\n    }\n  }]);\n\n  return ContractFactory;\n}();","map":{"version":3,"mappings":"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","names":["checkResultErrors","Indexed","Interface","Provider","Signer","VoidSigner","getAddress","getContractAddress","BigNumber","arrayify","concat","hexlify","isBytes","isHexString","defineReadOnly","deepCopy","getStatic","resolveProperties","shallowCopy","accessListify","Logger","version","logger","allowedTransactionKeys","chainId","data","from","gasLimit","gasPrice","nonce","to","value","type","accessList","maxFeePerGas","maxPriorityFeePerGas","customData","ccipReadEnabled","resolveName","resolver","nameOrPromise","name","throwArgumentError","throwError","errors","UNSUPPORTED_OPERATION","operation","address","resolveAddresses","paramType","Array","isArray","Promise","all","map","index","components","baseType","reject","makeError","INVALID_ARGUMENT","argument","v","arrayChildren","populateTransaction","contract","fragment","args","overrides","length","inputs","pop","checkArgumentCount","signer","override","then","check","__awaiter","provider","resolvedAddress","resolved","interface","encodeFunctionData","tx","ro","toNumber","gas","intrinsic","bytes","i","add","roValue","isZero","payable","leftovers","Object","keys","filter","key","l","JSON","stringify","join","buildPopulate","buildEstimate","signerOrProvider","estimateGas","addContractWait","wait","bind","confirmations","receipt","events","logs","log","event","parsed","parseLog","e","decode","topics","decodeEventLog","eventFragment","eventSignature","signature","removeListener","getBlock","blockHash","getTransaction","transactionHash","getTransactionReceipt","resolve","buildCall","collapseSimple","blockTag","undefined","push","deployTransaction","_deployed","call","result","decodeFunctionResult","outputs","code","CALL_EXCEPTION","transaction","buildSend","txRequest","sendTransaction","buildDefault","constant","getEventTag","topic","RunningEvent","tag","_listeners","listener","once","done","item","listenerCount","argsCopy","slice","setTimeout","apply","ErrorRunningEvent","FragmentRunningEvent","contractInterface","getEventTopic","format","error","decodeError","WildcardRunningEvent","BaseContract","addressOrName","isSigner","isProvider","uniqueFilters","forEach","filters","encodeFilterTopics","warn","catch","uniqueNames","uniqueSignatures","functions","callStatic","signatures","substring","_deployedPromise","getCode","contractAddress","deployed","constructor","runningEvent","_runningEvents","eventName","_normalizeRunningEvent","getEvent","Error","emit","_wrappedEmits","off","_checkRunningEvents","prepareEvent","addListener","wrappedEmit","_wrapEvent","getEmit","on","fromBlockOrBlockhash","toBlock","_getRunningEvent","fromBlock","getLogs","_addEventListener","run","reduce","accum","listeners","removeAllListeners","isInterface","isIndexed","Contract","ContractFactory","bytecode","bytecodeHex","object","deploy","encodeDeploy","params","unsignedTx","getDeployTransaction","getContract","compilerOutput","MISSING_ARGUMENT","parse","abi","evm","getInterface"],"sources":["C:\\Users\\kiril\\Desktop\\newenvai\\client\\node_modules\\@ethersproject\\contracts\\src.ts\\index.ts"],"sourcesContent":["\"use strict\";\n\nimport { checkResultErrors, EventFragment, Fragment, FunctionFragment, Indexed, Interface, JsonFragment, LogDescription, ParamType, Result } from \"@ethersproject/abi\";\nimport { Block, BlockTag, Filter, FilterByBlockHash, Listener, Log, Provider, TransactionReceipt, TransactionRequest, TransactionResponse } from \"@ethersproject/abstract-provider\";\nimport { Signer, VoidSigner } from \"@ethersproject/abstract-signer\";\nimport { getAddress, getContractAddress } from \"@ethersproject/address\";\nimport { BigNumber, BigNumberish } from \"@ethersproject/bignumber\";\nimport { arrayify, BytesLike, concat, hexlify, isBytes, isHexString } from \"@ethersproject/bytes\";\nimport { Deferrable, defineReadOnly, deepCopy, getStatic, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport { AccessList, accessListify, AccessListish } from \"@ethersproject/transactions\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\n\nconst logger = new Logger(version);\n\nexport interface Overrides {\n    gasLimit?: BigNumberish | Promise<BigNumberish>;\n    gasPrice?: BigNumberish | Promise<BigNumberish>;\n    maxFeePerGas?: BigNumberish | Promise<BigNumberish>;\n    maxPriorityFeePerGas?: BigNumberish | Promise<BigNumberish>;\n    nonce?: BigNumberish | Promise<BigNumberish>;\n    type?: number;\n    accessList?: AccessListish;\n    customData?: Record<string, any>;\n    ccipReadEnabled?: boolean;\n};\n\nexport interface PayableOverrides extends Overrides {\n    value?: BigNumberish | Promise<BigNumberish>;\n}\n\nexport interface CallOverrides extends PayableOverrides {\n    blockTag?: BlockTag | Promise<BlockTag>;\n    from?: string | Promise<string>;\n}\n\n// @TODO: Better hierarchy with: (in v6)\n//  - abstract-provider:TransactionRequest\n//  - transactions:Transaction\n//  - transaction:UnsignedTransaction\n\nexport interface PopulatedTransaction {\n    to?: string;\n    from?: string;\n    nonce?: number;\n\n    gasLimit?: BigNumber;\n    gasPrice?: BigNumber;\n\n    data?: string;\n    value?: BigNumber;\n    chainId?: number;\n\n    type?: number;\n    accessList?: AccessList;\n\n    maxFeePerGas?: BigNumber;\n    maxPriorityFeePerGas?: BigNumber;\n\n    customData?: Record<string, any>;\n    ccipReadEnabled?: boolean;\n};\n\nexport type EventFilter = {\n    address?: string;\n    topics?: Array<string|Array<string>>;\n};\n\n\nexport type ContractFunction<T = any> = (...args: Array<any>) => Promise<T>;\n\n\n// The (n + 1)th parameter passed to contract event callbacks\nexport interface Event extends Log {\n\n    // The event name\n    event?: string;\n\n    // The event signature\n    eventSignature?: string;\n\n    // The parsed arguments to the event\n    args?: Result;\n\n    // If parsing the arguments failed, this is the error\n    decodeError?: Error;\n\n    // A function that can be used to decode event data and topics\n    decode?: (data: string, topics?: Array<string>) => any;\n\n    // A function that will remove the listener responsible for this event (if any)\n    removeListener: () => void;\n\n    // Get blockchain details about this event's block and transaction\n    getBlock: () => Promise<Block>;\n    getTransaction: () => Promise<TransactionResponse>;\n    getTransactionReceipt: () => Promise<TransactionReceipt>;\n}\n\nexport interface ContractReceipt extends TransactionReceipt {\n    events?: Array<Event>;\n}\n\nexport interface ContractTransaction extends TransactionResponse {\n    wait(confirmations?: number): Promise<ContractReceipt>;\n}\n\n///////////////////////////////\n\nconst allowedTransactionKeys: { [ key: string ]: boolean } = {\n    chainId: true, data: true, from: true, gasLimit: true, gasPrice:true, nonce: true, to: true, value: true,\n    type: true, accessList: true,\n    maxFeePerGas: true, maxPriorityFeePerGas: true,\n    customData: true,\n    ccipReadEnabled: true\n}\n\nasync function resolveName(resolver: Signer | Provider, nameOrPromise: string | Promise<string>): Promise<string> {\n    const name = await nameOrPromise;\n\n    if (typeof(name) !== \"string\") {\n        logger.throwArgumentError(\"invalid address or ENS name\", \"name\", name);\n    }\n\n    // If it is already an address, just use it (after adding checksum)\n    try {\n        return getAddress(name);\n    } catch (error) { }\n\n    if (!resolver) {\n        logger.throwError(\"a provider or signer is needed to resolve ENS names\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"resolveName\"\n        });\n    }\n\n    const address = await resolver.resolveName(name);\n\n    if (address == null) {\n        logger.throwArgumentError(\"resolver or addr is not configured for ENS name\", \"name\", name);\n    }\n\n    return address;\n}\n\n// Recursively replaces ENS names with promises to resolve the name and resolves all properties\nasync function resolveAddresses(resolver: Signer | Provider, value: any, paramType: ParamType | Array<ParamType>): Promise<any> {\n    if (Array.isArray(paramType)) {\n        return await Promise.all(paramType.map((paramType, index) => {\n            return resolveAddresses(\n                resolver,\n                ((Array.isArray(value)) ? value[index]: value[paramType.name]),\n                paramType\n            );\n        }));\n    }\n\n    if (paramType.type === \"address\") {\n        return await resolveName(resolver, value);\n    }\n\n    if (paramType.type === \"tuple\") {\n        return await resolveAddresses(resolver, value, paramType.components);\n    }\n\n    if (paramType.baseType === \"array\") {\n        if (!Array.isArray(value)) {\n            return Promise.reject(logger.makeError(\"invalid value for array\", Logger.errors.INVALID_ARGUMENT, {\n                argument: \"value\",\n                value\n            }));\n        }\n        return await Promise.all(value.map((v) => resolveAddresses(resolver, v, paramType.arrayChildren)));\n    }\n\n    return value;\n}\n\nasync function populateTransaction(contract: Contract, fragment: FunctionFragment, args: Array<any>): Promise<PopulatedTransaction> {\n    // If an extra argument is given, it is overrides\n    let overrides: CallOverrides = { };\n    if (args.length === fragment.inputs.length + 1 && typeof(args[args.length - 1]) === \"object\") {\n        overrides = shallowCopy(args.pop());\n    }\n\n    // Make sure the parameter count matches\n    logger.checkArgumentCount(args.length, fragment.inputs.length, \"passed to contract\");\n\n    // Populate \"from\" override (allow promises)\n    if (contract.signer) {\n        if (overrides.from) {\n            // Contracts with a Signer are from the Signer's frame-of-reference;\n            // but we allow overriding \"from\" if it matches the signer\n            overrides.from = resolveProperties({\n                override: resolveName(contract.signer, overrides.from),\n                signer: contract.signer.getAddress()\n            }).then(async (check) => {\n                if (getAddress(check.signer) !== check.override) {\n                    logger.throwError(\"Contract with a Signer cannot override from\", Logger.errors.UNSUPPORTED_OPERATION, {\n                        operation: \"overrides.from\"\n                    });\n                }\n\n                return check.override;\n            });\n\n        } else {\n            overrides.from = contract.signer.getAddress();\n        }\n\n    } else if (overrides.from) {\n        overrides.from = resolveName(contract.provider, overrides.from);\n\n    //} else {\n        // Contracts without a signer can override \"from\", and if\n        // unspecified the zero address is used\n        //overrides.from = AddressZero;\n    }\n\n    // Wait for all dependencies to be resolved (prefer the signer over the provider)\n    const resolved = await resolveProperties({\n        args: resolveAddresses(contract.signer || contract.provider, args, fragment.inputs),\n        address: contract.resolvedAddress,\n        overrides: (resolveProperties(overrides) || { })\n    });\n\n    // The ABI coded transaction\n    const data = contract.interface.encodeFunctionData(fragment, resolved.args);\n    const tx: PopulatedTransaction = {\n      data: data,\n      to: resolved.address\n    };\n\n    // Resolved Overrides\n    const ro = resolved.overrides;\n\n    // Populate simple overrides\n    if (ro.nonce != null) { tx.nonce = BigNumber.from(ro.nonce).toNumber(); }\n    if (ro.gasLimit != null) { tx.gasLimit = BigNumber.from(ro.gasLimit); }\n    if (ro.gasPrice != null) { tx.gasPrice = BigNumber.from(ro.gasPrice); }\n    if (ro.maxFeePerGas != null) { tx.maxFeePerGas = BigNumber.from(ro.maxFeePerGas); }\n    if (ro.maxPriorityFeePerGas != null) { tx.maxPriorityFeePerGas = BigNumber.from(ro.maxPriorityFeePerGas); }\n    if (ro.from != null) { tx.from = ro.from; }\n\n    if (ro.type != null) { tx.type = ro.type; }\n    if (ro.accessList != null) { tx.accessList = accessListify(ro.accessList); }\n\n    // If there was no \"gasLimit\" override, but the ABI specifies a default, use it\n    if (tx.gasLimit == null && fragment.gas != null) {\n        // Compute the intrinsic gas cost for this transaction\n        // @TODO: This is based on the yellow paper as of Petersburg; this is something\n        // we may wish to parameterize in v6 as part of the Network object. Since this\n        // is always a non-nil to address, we can ignore G_create, but may wish to add\n        // similar logic to the ContractFactory.\n        let intrinsic = 21000;\n        const bytes = arrayify(data);\n        for (let i = 0; i < bytes.length; i++) {\n            intrinsic += 4;\n            if (bytes[i]) { intrinsic += 64; }\n        }\n        tx.gasLimit = BigNumber.from(fragment.gas).add(intrinsic);\n    }\n\n    // Populate \"value\" override\n    if (ro.value) {\n        const roValue = BigNumber.from(ro.value);\n        if (!roValue.isZero() && !fragment.payable) {\n            logger.throwError(\"non-payable method cannot override value\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"overrides.value\",\n                value: overrides.value\n            });\n        }\n        tx.value = roValue;\n    }\n\n    if (ro.customData) {\n        tx.customData = shallowCopy(ro.customData);\n    }\n\n    if (ro.ccipReadEnabled) {\n        tx.ccipReadEnabled = !!ro.ccipReadEnabled;\n    }\n\n    // Remove the overrides\n    delete overrides.nonce;\n    delete overrides.gasLimit;\n    delete overrides.gasPrice;\n    delete overrides.from;\n    delete overrides.value;\n\n    delete overrides.type;\n    delete overrides.accessList;\n\n    delete overrides.maxFeePerGas;\n    delete overrides.maxPriorityFeePerGas;\n\n    delete overrides.customData;\n    delete overrides.ccipReadEnabled;\n\n    // Make sure there are no stray overrides, which may indicate a\n    // typo or using an unsupported key.\n    const leftovers = Object.keys(overrides).filter((key) => ((<any>overrides)[key] != null));\n    if (leftovers.length) {\n        logger.throwError(`cannot override ${ leftovers.map((l) => JSON.stringify(l)).join(\",\") }`, Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"overrides\",\n            overrides: leftovers\n        });\n    }\n\n    return tx;\n}\n\n\nfunction buildPopulate(contract: Contract, fragment: FunctionFragment): ContractFunction<PopulatedTransaction> {\n    return function(...args: Array<any>): Promise<PopulatedTransaction> {\n        return populateTransaction(contract, fragment, args);\n    };\n}\n\nfunction buildEstimate(contract: Contract, fragment: FunctionFragment): ContractFunction<BigNumber> {\n    const signerOrProvider = (contract.signer || contract.provider);\n    return async function(...args: Array<any>): Promise<BigNumber> {\n        if (!signerOrProvider) {\n            logger.throwError(\"estimate require a provider or signer\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"estimateGas\"\n            })\n        }\n\n        const tx = await populateTransaction(contract, fragment, args);\n        return await signerOrProvider.estimateGas(tx);\n    };\n}\n\nfunction addContractWait(contract: Contract, tx: TransactionResponse) {\n    const wait = tx.wait.bind(tx);\n    tx.wait = (confirmations?: number) => {\n        return wait(confirmations).then((receipt: ContractReceipt) => {\n            receipt.events = receipt.logs.map((log) => {\n                let event: Event = (<Event>deepCopy(log));\n                let parsed: LogDescription = null;\n                try {\n                    parsed = contract.interface.parseLog(log);\n                } catch (e){ }\n\n                // Successfully parsed the event log; include it\n                if (parsed) {\n                    event.args = parsed.args;\n                    event.decode = (data: BytesLike, topics?: Array<any>) => {\n                        return contract.interface.decodeEventLog(parsed.eventFragment, data, topics);\n                    };\n                    event.event = parsed.name;\n                    event.eventSignature = parsed.signature;\n                }\n\n                // Useful operations\n                event.removeListener = () => { return contract.provider; }\n                event.getBlock = () => {\n                    return contract.provider.getBlock(receipt.blockHash);\n                }\n                event.getTransaction = () => {\n                    return contract.provider.getTransaction(receipt.transactionHash);\n                }\n                event.getTransactionReceipt = () => {\n                    return Promise.resolve(receipt);\n                }\n\n                return event;\n            });\n\n            return receipt;\n        });\n    };\n}\n\nfunction buildCall(contract: Contract, fragment: FunctionFragment, collapseSimple: boolean): ContractFunction {\n    const signerOrProvider = (contract.signer || contract.provider);\n\n    return async function(...args: Array<any>): Promise<any> {\n        // Extract the \"blockTag\" override if present\n        let blockTag = undefined;\n        if (args.length === fragment.inputs.length + 1 && typeof(args[args.length - 1]) === \"object\") {\n            const overrides = shallowCopy(args.pop());\n            if (overrides.blockTag != null) {\n                blockTag = await overrides.blockTag;\n            }\n            delete overrides.blockTag;\n            args.push(overrides);\n        }\n\n        // If the contract was just deployed, wait until it is mined\n        if (contract.deployTransaction != null) {\n            await contract._deployed(blockTag);\n        }\n\n        // Call a node and get the result\n        const tx = await populateTransaction(contract, fragment, args);\n        const result = await signerOrProvider.call(tx, blockTag);\n\n        try {\n            let value = contract.interface.decodeFunctionResult(fragment, result);\n            if (collapseSimple && fragment.outputs.length === 1) {\n                value = value[0];\n            }\n            return value;\n\n        } catch (error) {\n            if (error.code === Logger.errors.CALL_EXCEPTION) {\n                error.address = contract.address;\n                error.args = args;\n                error.transaction = tx;\n            }\n            throw error;\n         }\n    };\n}\n\nfunction buildSend(contract: Contract, fragment: FunctionFragment): ContractFunction<TransactionResponse> {\n    return async function(...args: Array<any>): Promise<TransactionResponse> {\n        if (!contract.signer) {\n            logger.throwError(\"sending a transaction requires a signer\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"sendTransaction\"\n            })\n        }\n\n        // If the contract was just deployed, wait until it is mined\n        if (contract.deployTransaction != null) {\n            await contract._deployed();\n        }\n\n        const txRequest = await populateTransaction(contract, fragment, args);\n\n        const tx = await contract.signer.sendTransaction(txRequest);\n\n        // Tweak the tx.wait so the receipt has extra properties\n        addContractWait(contract, tx);\n\n        return tx;\n    };\n}\n\nfunction buildDefault(contract: Contract, fragment: FunctionFragment, collapseSimple: boolean): ContractFunction {\n    if (fragment.constant) {\n        return buildCall(contract, fragment, collapseSimple);\n    }\n    return buildSend(contract, fragment);\n}\n\nfunction getEventTag(filter: EventFilter): string {\n    if (filter.address && (filter.topics == null || filter.topics.length === 0)) {\n        return \"*\";\n    }\n\n    return (filter.address || \"*\") + \"@\" + (filter.topics ? filter.topics.map((topic) => {\n        if (Array.isArray(topic)) {\n            return topic.join(\"|\");\n        }\n        return topic;\n    }).join(\":\"): \"\");\n}\n\nclass RunningEvent {\n    readonly tag: string;\n    readonly filter: EventFilter;\n    private _listeners: Array<{ listener: Listener, once: boolean }>;\n\n    constructor(tag: string, filter: EventFilter) {\n        defineReadOnly(this, \"tag\", tag);\n        defineReadOnly(this, \"filter\", filter);\n        this._listeners = [ ];\n    }\n\n    addListener(listener: Listener, once: boolean): void {\n        this._listeners.push({ listener: listener, once: once });\n    }\n\n    removeListener(listener: Listener): void {\n        let done = false;\n        this._listeners = this._listeners.filter((item) => {\n            if (done || item.listener !== listener) { return true; }\n            done = true;\n            return false;\n        });\n    }\n\n    removeAllListeners(): void {\n        this._listeners = [];\n    }\n\n    listeners(): Array<Listener> {\n        return this._listeners.map((i) => i.listener);\n    }\n\n    listenerCount(): number {\n        return this._listeners.length;\n    }\n\n    run(args: Array<any>): number {\n        const listenerCount = this.listenerCount();\n        this._listeners = this._listeners.filter((item) => {\n\n            const argsCopy = args.slice();\n\n            // Call the callback in the next event loop\n            setTimeout(() => {\n                item.listener.apply(this, argsCopy);\n            }, 0);\n\n            // Reschedule it if it not \"once\"\n            return !(item.once);\n        });\n\n        return listenerCount;\n    }\n\n    prepareEvent(event: Event): void {\n    }\n\n    // Returns the array that will be applied to an emit\n    getEmit(event: Event): Array<any> {\n        return [ event ];\n    }\n}\n\nclass ErrorRunningEvent extends RunningEvent {\n    constructor() {\n        super(\"error\", null);\n    }\n}\n\n\n// @TODO Fragment should inherit Wildcard? and just override getEmit?\n//       or have a common abstract super class, with enough constructor\n//       options to configure both.\n\n// A Fragment Event will populate all the properties that Wildcard\n// will, and additionally dereference the arguments when emitting\nclass FragmentRunningEvent extends RunningEvent {\n    readonly address: string;\n    readonly interface: Interface;\n    readonly fragment: EventFragment;\n\n    constructor(address: string, contractInterface: Interface, fragment: EventFragment, topics?: Array<string|Array<string>>) {\n        const filter: EventFilter = {\n            address: address\n        }\n\n        let topic = contractInterface.getEventTopic(fragment);\n        if (topics) {\n            if (topic !== topics[0]) { logger.throwArgumentError(\"topic mismatch\", \"topics\", topics); }\n            filter.topics = topics.slice();\n        } else {\n            filter.topics = [ topic ];\n        }\n\n        super(getEventTag(filter), filter);\n        defineReadOnly(this, \"address\", address);\n        defineReadOnly(this, \"interface\", contractInterface);\n        defineReadOnly(this, \"fragment\", fragment);\n    }\n\n\n    prepareEvent(event: Event): void {\n        super.prepareEvent(event);\n\n        event.event = this.fragment.name;\n        event.eventSignature = this.fragment.format();\n\n        event.decode = (data: BytesLike, topics?: Array<string>) => {\n            return this.interface.decodeEventLog(this.fragment, data, topics);\n        };\n\n        try {\n            event.args = this.interface.decodeEventLog(this.fragment, event.data, event.topics);\n        } catch (error) {\n            event.args = null;\n            event.decodeError = error;\n        }\n    }\n\n    getEmit(event: Event): Array<any> {\n        const errors = checkResultErrors(event.args);\n        if (errors.length) { throw errors[0].error; }\n\n        const args = (event.args || []).slice();\n        args.push(event);\n        return args;\n    }\n}\n\n// A Wildcard Event will attempt to populate:\n//  - event            The name of the event name\n//  - eventSignature   The full signature of the event\n//  - decode           A function to decode data and topics\n//  - args             The decoded data and topics\nclass WildcardRunningEvent extends RunningEvent {\n    readonly address: string;\n    readonly interface: Interface;\n\n    constructor(address: string, contractInterface: Interface) {\n        super(\"*\", { address: address });\n        defineReadOnly(this, \"address\", address);\n        defineReadOnly(this, \"interface\", contractInterface);\n    }\n\n    prepareEvent(event: Event): void {\n        super.prepareEvent(event);\n\n        try {\n            const parsed = this.interface.parseLog(event);\n            event.event = parsed.name;\n            event.eventSignature = parsed.signature;\n\n            event.decode = (data: BytesLike, topics?: Array<string>) => {\n                return this.interface.decodeEventLog(parsed.eventFragment, data, topics);\n            };\n\n            event.args = parsed.args;\n        } catch (error) {\n            // No matching event\n        }\n    }\n}\n\nexport type ContractInterface = string | ReadonlyArray<Fragment | JsonFragment | string> | Interface;\n\ntype InterfaceFunc = (contractInterface: ContractInterface) => Interface;\n\n\nexport class BaseContract {\n    readonly address: string;\n    readonly interface: Interface;\n\n    readonly signer: Signer;\n    readonly provider: Provider;\n\n    readonly functions: { [ name: string ]: ContractFunction };\n\n    readonly callStatic: { [ name: string ]: ContractFunction };\n    readonly estimateGas: { [ name: string ]: ContractFunction<BigNumber> };\n    readonly populateTransaction: { [ name: string ]: ContractFunction<PopulatedTransaction> };\n\n    readonly filters: { [ name: string ]: (...args: Array<any>) => EventFilter };\n\n    // This will always be an address. This will only differ from\n    // address if an ENS name was used in the constructor\n    readonly resolvedAddress: Promise<string>;\n\n    // This is only set if the contract was created with a call to deploy\n    readonly deployTransaction: TransactionResponse;\n\n    _deployedPromise: Promise<Contract>;\n\n    // A list of RunningEvents to track listeners for each event tag\n    _runningEvents: { [ eventTag: string ]: RunningEvent };\n\n    // Wrapped functions to call emit and allow deregistration from the provider\n    _wrappedEmits: { [ eventTag: string ]: (...args: Array<any>) => void };\n\n    constructor(addressOrName: string, contractInterface: ContractInterface, signerOrProvider?: Signer | Provider) {\n        // @TODO: Maybe still check the addressOrName looks like a valid address or name?\n        //address = getAddress(address);\n        defineReadOnly(this, \"interface\", getStatic<InterfaceFunc>(new.target, \"getInterface\")(contractInterface));\n\n        if (signerOrProvider == null) {\n            defineReadOnly(this, \"provider\", null);\n            defineReadOnly(this, \"signer\", null);\n        } else if (Signer.isSigner(signerOrProvider)) {\n            defineReadOnly(this, \"provider\", signerOrProvider.provider || null);\n            defineReadOnly(this, \"signer\", signerOrProvider);\n        } else if (Provider.isProvider(signerOrProvider)) {\n            defineReadOnly(this, \"provider\", signerOrProvider);\n            defineReadOnly(this, \"signer\", null);\n        } else {\n            logger.throwArgumentError(\"invalid signer or provider\", \"signerOrProvider\", signerOrProvider);\n        }\n\n        defineReadOnly(this, \"callStatic\", { });\n        defineReadOnly(this, \"estimateGas\", { });\n        defineReadOnly(this, \"functions\", { });\n        defineReadOnly(this, \"populateTransaction\", { });\n\n        defineReadOnly(this, \"filters\", { });\n\n        {\n            const uniqueFilters: { [ name: string ]: Array<string> } = { };\n            Object.keys(this.interface.events).forEach((eventSignature) => {\n                const event = this.interface.events[eventSignature];\n                defineReadOnly(this.filters, eventSignature, (...args: Array<any>) => {\n                    return {\n                        address: this.address,\n                        topics: this.interface.encodeFilterTopics(event, args)\n                   }\n                });\n                if (!uniqueFilters[event.name]) { uniqueFilters[event.name] = [ ]; }\n                uniqueFilters[event.name].push(eventSignature);\n            });\n\n            Object.keys(uniqueFilters).forEach((name) => {\n                const filters = uniqueFilters[name];\n                if (filters.length === 1) {\n                    defineReadOnly(this.filters, name, this.filters[filters[0]]);\n                } else {\n                    logger.warn(`Duplicate definition of ${ name } (${ filters.join(\", \")})`);\n                }\n            });\n        }\n\n        defineReadOnly(this, \"_runningEvents\", { });\n        defineReadOnly(this, \"_wrappedEmits\", { });\n\n        if (addressOrName == null) {\n            logger.throwArgumentError(\"invalid contract address or ENS name\", \"addressOrName\", addressOrName);\n        }\n\n        defineReadOnly(this, \"address\", addressOrName);\n        if (this.provider) {\n            defineReadOnly(this, \"resolvedAddress\", resolveName(this.provider, addressOrName));\n        } else {\n            try {\n                defineReadOnly(this, \"resolvedAddress\", Promise.resolve(getAddress(addressOrName)));\n            } catch (error) {\n                // Without a provider, we cannot use ENS names\n                logger.throwError(\"provider is required to use ENS name as contract address\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"new Contract\"\n                });\n            }\n        }\n\n        // Swallow bad ENS names to prevent Unhandled Exceptions\n        this.resolvedAddress.catch((e) => { });\n\n        const uniqueNames: { [ name: string ]: Array<string> } = { };\n        const uniqueSignatures: { [ signature: string ]: boolean } = { };\n        Object.keys(this.interface.functions).forEach((signature) => {\n            const fragment = this.interface.functions[signature];\n\n            // Check that the signature is unique; if not the ABI generation has\n            // not been cleaned or may be incorrectly generated\n            if (uniqueSignatures[signature]) {\n                logger.warn(`Duplicate ABI entry for ${ JSON.stringify(signature) }`);\n                return;\n            }\n            uniqueSignatures[signature] = true;\n\n            // Track unique names; we only expose bare named functions if they\n            // are ambiguous\n            {\n                const name = fragment.name;\n                if (!uniqueNames[`%${ name }`]) { uniqueNames[`%${ name }`] = [ ]; }\n                uniqueNames[`%${ name }`].push(signature);\n            }\n\n            if ((<Contract>this)[signature] == null) {\n                defineReadOnly<any, any>(this, signature, buildDefault(this, fragment, true));\n            }\n\n            // We do not collapse simple calls on this bucket, which allows\n            // frameworks to safely use this without introspection as well as\n            // allows decoding error recovery.\n            if (this.functions[signature] == null) {\n                defineReadOnly(this.functions, signature, buildDefault(this, fragment, false));\n            }\n\n            if (this.callStatic[signature] == null) {\n                defineReadOnly(this.callStatic, signature, buildCall(this, fragment, true));\n            }\n\n            if (this.populateTransaction[signature] == null) {\n                defineReadOnly(this.populateTransaction, signature, buildPopulate(this, fragment));\n            }\n\n            if (this.estimateGas[signature] == null) {\n                defineReadOnly(this.estimateGas, signature, buildEstimate(this, fragment));\n            }\n        });\n\n        Object.keys(uniqueNames).forEach((name) => {\n            // Ambiguous names to not get attached as bare names\n            const signatures = uniqueNames[name];\n            if (signatures.length > 1) { return; }\n\n            // Strip off the leading \"%\" used for prototype protection\n            name = name.substring(1);\n\n            const signature = signatures[0];\n\n            // If overwriting a member property that is null, swallow the error\n            try {\n                if ((<Contract>this)[name] == null) {\n                    defineReadOnly(<Contract>this, name, (<Contract>this)[signature]);\n                }\n            } catch (e) { }\n\n            if (this.functions[name] == null) {\n                defineReadOnly(this.functions, name, this.functions[signature]);\n            }\n\n            if (this.callStatic[name] == null) {\n                defineReadOnly(this.callStatic, name, this.callStatic[signature]);\n            }\n\n            if (this.populateTransaction[name] == null) {\n                defineReadOnly(this.populateTransaction, name, this.populateTransaction[signature]);\n            }\n\n            if (this.estimateGas[name] == null) {\n                defineReadOnly(this.estimateGas, name, this.estimateGas[signature]);\n            }\n        });\n    }\n\n    static getContractAddress(transaction: { from: string, nonce: BigNumberish }): string {\n        return getContractAddress(transaction);\n    }\n\n    static getInterface(contractInterface: ContractInterface): Interface {\n        if (Interface.isInterface(contractInterface)) {\n            return contractInterface;\n        }\n        return new Interface(contractInterface);\n    }\n\n    // @TODO: Allow timeout?\n    deployed(): Promise<Contract> {\n        return this._deployed();\n    }\n\n    _deployed(blockTag?: BlockTag): Promise<Contract> {\n        if (!this._deployedPromise) {\n\n            // If we were just deployed, we know the transaction we should occur in\n            if (this.deployTransaction) {\n                this._deployedPromise = this.deployTransaction.wait().then(() => {\n                    return this;\n                });\n\n            } else {\n                // @TODO: Once we allow a timeout to be passed in, we will wait\n                // up to that many blocks for getCode\n\n                // Otherwise, poll for our code to be deployed\n                this._deployedPromise = this.provider.getCode(this.address, blockTag).then((code) => {\n                    if (code === \"0x\") {\n                        logger.throwError(\"contract not deployed\", Logger.errors.UNSUPPORTED_OPERATION, {\n                            contractAddress: this.address,\n                            operation: \"getDeployed\"\n                        });\n                    }\n                    return this;\n                });\n            }\n        }\n\n        return this._deployedPromise;\n    }\n\n    // @TODO:\n    // estimateFallback(overrides?: TransactionRequest): Promise<BigNumber>\n\n    // @TODO:\n    // estimateDeploy(bytecode: string, ...args): Promise<BigNumber>\n\n    fallback(overrides?: TransactionRequest): Promise<TransactionResponse> {\n        if (!this.signer) {\n            logger.throwError(\"sending a transactions require a signer\", Logger.errors.UNSUPPORTED_OPERATION, { operation: \"sendTransaction(fallback)\" })\n        }\n\n        const tx: Deferrable<TransactionRequest> = shallowCopy(overrides || {});\n\n        [\"from\", \"to\"].forEach(function(key) {\n            if ((<any>tx)[key] == null) { return; }\n            logger.throwError(\"cannot override \" + key, Logger.errors.UNSUPPORTED_OPERATION, { operation: key })\n        });\n\n        tx.to = this.resolvedAddress;\n        return this.deployed().then(() => {\n            return this.signer.sendTransaction(tx);\n        });\n    }\n\n    // Reconnect to a different signer or provider\n    connect(signerOrProvider: Signer | Provider | string): Contract {\n        if (typeof(signerOrProvider) === \"string\") {\n            signerOrProvider = new VoidSigner(signerOrProvider, this.provider);\n        }\n\n        const contract = new (<{ new(...args: any[]): Contract }>(this.constructor))(this.address, this.interface, signerOrProvider);\n        if (this.deployTransaction) {\n            defineReadOnly(contract, \"deployTransaction\", this.deployTransaction);\n        }\n\n        return contract;\n    }\n\n    // Re-attach to a different on-chain instance of this contract\n    attach(addressOrName: string): Contract {\n        return new (<{ new(...args: any[]): Contract }>(this.constructor))(addressOrName, this.interface, this.signer || this.provider);\n    }\n\n    static isIndexed(value: any): value is Indexed {\n        return Indexed.isIndexed(value);\n    }\n\n    private _normalizeRunningEvent(runningEvent: RunningEvent): RunningEvent {\n        // Already have an instance of this event running; we can re-use it\n        if (this._runningEvents[runningEvent.tag]) {\n            return this._runningEvents[runningEvent.tag];\n         }\n         return runningEvent\n    }\n\n    private _getRunningEvent(eventName: EventFilter | string): RunningEvent {\n        if (typeof(eventName) === \"string\") {\n\n            // Listen for \"error\" events (if your contract has an error event, include\n            // the full signature to bypass this special event keyword)\n            if (eventName === \"error\") {\n                return this._normalizeRunningEvent(new ErrorRunningEvent());\n            }\n\n            // Listen for any event that is registered\n            if (eventName === \"event\") {\n                return this._normalizeRunningEvent(new RunningEvent(\"event\", null));\n            }\n\n            // Listen for any event\n            if (eventName === \"*\") {\n                return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));\n            }\n\n            // Get the event Fragment (throws if ambiguous/unknown event)\n            const fragment = this.interface.getEvent(eventName)\n            return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment));\n        }\n\n        // We have topics to filter by...\n        if (eventName.topics && eventName.topics.length > 0) {\n\n            // Is it a known topichash? (throws if no matching topichash)\n            try {\n                const topic = eventName.topics[0];\n                if (typeof(topic) !== \"string\") {\n                    throw new Error(\"invalid topic\"); // @TODO: May happen for anonymous events\n                }\n                const fragment = this.interface.getEvent(topic);\n                return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment, eventName.topics));\n            } catch (error) { }\n\n            // Filter by the unknown topichash\n            const filter: EventFilter = {\n                address: this.address,\n                topics: eventName.topics\n            }\n\n            return this._normalizeRunningEvent(new RunningEvent(getEventTag(filter), filter));\n        }\n\n        return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));\n    }\n\n    _checkRunningEvents(runningEvent: RunningEvent): void {\n        if (runningEvent.listenerCount() === 0) {\n            delete this._runningEvents[runningEvent.tag];\n\n            // If we have a poller for this, remove it\n            const emit = this._wrappedEmits[runningEvent.tag];\n            if (emit && runningEvent.filter) {\n                this.provider.off(runningEvent.filter, emit);\n                delete this._wrappedEmits[runningEvent.tag];\n            }\n        }\n    }\n\n    // Subclasses can override this to gracefully recover\n    // from parse errors if they wish\n    _wrapEvent(runningEvent: RunningEvent, log: Log, listener: Listener): Event {\n        const event = <Event>deepCopy(log);\n\n        event.removeListener = () => {\n            if (!listener) { return; }\n            runningEvent.removeListener(listener);\n            this._checkRunningEvents(runningEvent);\n        };\n\n        event.getBlock = () => { return this.provider.getBlock(log.blockHash); }\n        event.getTransaction = () => { return this.provider.getTransaction(log.transactionHash); }\n        event.getTransactionReceipt = () => { return this.provider.getTransactionReceipt(log.transactionHash); }\n\n        // This may throw if the topics and data mismatch the signature\n        runningEvent.prepareEvent(event);\n\n        return event;\n    }\n\n    private _addEventListener(runningEvent: RunningEvent, listener: Listener, once: boolean): void {\n        if (!this.provider) {\n            logger.throwError(\"events require a provider or a signer with a provider\", Logger.errors.UNSUPPORTED_OPERATION, { operation: \"once\" })\n        }\n\n        runningEvent.addListener(listener, once);\n\n        // Track this running event and its listeners (may already be there; but no hard in updating)\n        this._runningEvents[runningEvent.tag] = runningEvent;\n\n        // If we are not polling the provider, start polling\n        if (!this._wrappedEmits[runningEvent.tag]) {\n            const wrappedEmit = (log: Log) => {\n                let event = this._wrapEvent(runningEvent, log, listener);\n\n                // Try to emit the result for the parameterized event...\n                if (event.decodeError == null) {\n                    try {\n                        const args = runningEvent.getEmit(event);\n                        this.emit(runningEvent.filter, ...args);\n                    } catch (error) {\n                        event.decodeError = error.error;\n                    }\n                }\n\n                // Always emit \"event\" for fragment-base events\n                if (runningEvent.filter != null) {\n                    this.emit(\"event\", event);\n                }\n\n                // Emit \"error\" if there was an error\n                if (event.decodeError != null) {\n                    this.emit(\"error\", event.decodeError, event);\n                }\n            };\n            this._wrappedEmits[runningEvent.tag] = wrappedEmit;\n\n            // Special events, like \"error\" do not have a filter\n            if (runningEvent.filter != null) {\n                this.provider.on(runningEvent.filter, wrappedEmit);\n            }\n        }\n    }\n\n    queryFilter(event: EventFilter, fromBlockOrBlockhash?: BlockTag | string, toBlock?: BlockTag): Promise<Array<Event>> {\n        const runningEvent = this._getRunningEvent(event);\n        const filter = shallowCopy(runningEvent.filter);\n\n        if (typeof(fromBlockOrBlockhash) === \"string\" && isHexString(fromBlockOrBlockhash, 32)) {\n            if (toBlock != null) {\n                logger.throwArgumentError(\"cannot specify toBlock with blockhash\", \"toBlock\", toBlock);\n            }\n            (<FilterByBlockHash>filter).blockHash = fromBlockOrBlockhash;\n        } else {\n             (<Filter>filter).fromBlock = ((fromBlockOrBlockhash != null) ? fromBlockOrBlockhash: 0);\n             (<Filter>filter).toBlock = ((toBlock != null) ? toBlock: \"latest\");\n        }\n\n        return this.provider.getLogs(filter).then((logs) => {\n            return logs.map((log) => this._wrapEvent(runningEvent, log, null));\n        });\n    }\n\n    on(event: EventFilter | string, listener: Listener): this {\n        this._addEventListener(this._getRunningEvent(event), listener, false);\n        return this;\n    }\n\n    once(event: EventFilter | string, listener: Listener): this {\n        this._addEventListener(this._getRunningEvent(event), listener, true);\n        return this;\n    }\n\n    emit(eventName: EventFilter | string, ...args: Array<any>): boolean {\n        if (!this.provider) { return false; }\n\n        const runningEvent = this._getRunningEvent(eventName);\n        const result = (runningEvent.run(args) > 0);\n\n        // May have drained all the \"once\" events; check for living events\n        this._checkRunningEvents(runningEvent);\n\n        return result;\n    }\n\n    listenerCount(eventName?: EventFilter | string): number {\n        if (!this.provider) { return 0; }\n        if (eventName == null) {\n            return Object.keys(this._runningEvents).reduce((accum, key) => {\n                return accum + this._runningEvents[key].listenerCount();\n            }, 0);\n        }\n        return this._getRunningEvent(eventName).listenerCount();\n    }\n\n    listeners(eventName?: EventFilter | string): Array<Listener> {\n        if (!this.provider) { return []; }\n\n        if (eventName == null) {\n            const result: Array<Listener> = [ ];\n            for (let tag in this._runningEvents) {\n                this._runningEvents[tag].listeners().forEach((listener) => {\n                    result.push(listener)\n                });\n            }\n            return result;\n        }\n\n        return this._getRunningEvent(eventName).listeners();\n    }\n\n    removeAllListeners(eventName?: EventFilter | string): this {\n        if (!this.provider) { return this; }\n\n        if (eventName == null) {\n            for (const tag in this._runningEvents) {\n                const runningEvent = this._runningEvents[tag];\n                runningEvent.removeAllListeners();\n                this._checkRunningEvents(runningEvent);\n            }\n            return this;\n        }\n\n        // Delete any listeners\n        const runningEvent = this._getRunningEvent(eventName);\n        runningEvent.removeAllListeners();\n        this._checkRunningEvents(runningEvent);\n\n        return this;\n    }\n\n    off(eventName: EventFilter | string, listener: Listener): this {\n        if (!this.provider) { return this; }\n        const runningEvent = this._getRunningEvent(eventName);\n        runningEvent.removeListener(listener);\n        this._checkRunningEvents(runningEvent);\n        return this;\n    }\n\n    removeListener(eventName: EventFilter | string, listener: Listener): this {\n        return this.off(eventName, listener);\n    }\n\n}\n\nexport class Contract extends BaseContract {\n    // The meta-class properties\n    readonly [ key: string ]: ContractFunction | any;\n}\n\nexport class ContractFactory {\n\n    readonly interface: Interface;\n    readonly bytecode: string;\n    readonly signer: Signer;\n\n    constructor(contractInterface: ContractInterface, bytecode: BytesLike | { object: string }, signer?: Signer) {\n\n        let bytecodeHex: string = null;\n\n        if (typeof(bytecode) === \"string\") {\n            bytecodeHex = bytecode;\n        } else if (isBytes(bytecode)) {\n            bytecodeHex = hexlify(bytecode);\n        } else if (bytecode && typeof(bytecode.object) === \"string\") {\n            // Allow the bytecode object from the Solidity compiler\n            bytecodeHex = (<any>bytecode).object;\n        } else {\n            // Crash in the next verification step\n            bytecodeHex = \"!\";\n        }\n\n        // Make sure it is 0x prefixed\n        if (bytecodeHex.substring(0, 2) !== \"0x\") { bytecodeHex = \"0x\" + bytecodeHex; }\n\n        // Make sure the final result is valid bytecode\n        if (!isHexString(bytecodeHex) || (bytecodeHex.length % 2)) {\n            logger.throwArgumentError(\"invalid bytecode\", \"bytecode\", bytecode);\n        }\n\n        // If we have a signer, make sure it is valid\n        if (signer && !Signer.isSigner(signer)) {\n            logger.throwArgumentError(\"invalid signer\", \"signer\", signer);\n        }\n\n        defineReadOnly(this, \"bytecode\", bytecodeHex);\n        defineReadOnly(this, \"interface\", getStatic<InterfaceFunc>(new.target, \"getInterface\")(contractInterface));\n        defineReadOnly(this, \"signer\", signer || null);\n    }\n\n    // @TODO: Future; rename to populateTransaction?\n    getDeployTransaction(...args: Array<any>): TransactionRequest {\n        let tx: TransactionRequest = { };\n\n        // If we have 1 additional argument, we allow transaction overrides\n        if (args.length === this.interface.deploy.inputs.length + 1 && typeof(args[args.length - 1]) === \"object\") {\n            tx = shallowCopy(args.pop());\n            for (const key in tx) {\n                if (!allowedTransactionKeys[key]) {\n                    throw new Error(\"unknown transaction override \" + key);\n                }\n            }\n        }\n\n        // Do not allow these to be overridden in a deployment transaction\n        [\"data\", \"from\", \"to\"].forEach((key) => {\n            if ((<any>tx)[key] == null) { return; }\n            logger.throwError(\"cannot override \" + key, Logger.errors.UNSUPPORTED_OPERATION, { operation: key })\n        });\n\n        if (tx.value) {\n            const value = BigNumber.from(tx.value);\n            if (!value.isZero() && !this.interface.deploy.payable) {\n                logger.throwError(\"non-payable constructor cannot override value\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"overrides.value\",\n                    value: tx.value\n                });\n            }\n        }\n\n        // Make sure the call matches the constructor signature\n        logger.checkArgumentCount(args.length, this.interface.deploy.inputs.length, \" in Contract constructor\");\n\n        // Set the data to the bytecode + the encoded constructor arguments\n        tx.data = hexlify(concat([\n            this.bytecode,\n            this.interface.encodeDeploy(args)\n        ]));\n\n        return tx\n    }\n\n    async deploy(...args: Array<any>): Promise<Contract> {\n\n        let overrides: any = { };\n\n        // If 1 extra parameter was passed in, it contains overrides\n        if (args.length === this.interface.deploy.inputs.length + 1) {\n            overrides = args.pop();\n        }\n\n        // Make sure the call matches the constructor signature\n        logger.checkArgumentCount(args.length, this.interface.deploy.inputs.length, \" in Contract constructor\");\n\n        // Resolve ENS names and promises in the arguments\n        const params = await resolveAddresses(this.signer, args, this.interface.deploy.inputs);\n        params.push(overrides);\n\n        // Get the deployment transaction (with optional overrides)\n        const unsignedTx = this.getDeployTransaction(...params);\n\n        // Send the deployment transaction\n        const tx = await this.signer.sendTransaction(unsignedTx);\n\n        const address = getStatic<(tx: TransactionResponse) => string>(this.constructor, \"getContractAddress\")(tx);\n        const contract = getStatic<(address: string, contractInterface: ContractInterface, signer?: Signer) => Contract>(this.constructor, \"getContract\")(address, this.interface, this.signer);\n\n        // Add the modified wait that wraps events\n        addContractWait(contract, tx);\n\n        defineReadOnly(contract, \"deployTransaction\", tx);\n        return contract;\n    }\n\n    attach(address: string): Contract {\n        return (<any>(this.constructor)).getContract(address, this.interface, this.signer);\n    }\n\n    connect(signer: Signer) {\n        return new (<{ new(...args: any[]): ContractFactory }>(this.constructor))(this.interface, this.bytecode, signer);\n    }\n\n    static fromSolidity(compilerOutput: any, signer?: Signer): ContractFactory {\n        if (compilerOutput == null) {\n            logger.throwError(\"missing compiler output\", Logger.errors.MISSING_ARGUMENT, { argument: \"compilerOutput\" });\n        }\n\n        if (typeof(compilerOutput) === \"string\") {\n            compilerOutput = JSON.parse(compilerOutput);\n        }\n\n        const abi = compilerOutput.abi;\n\n        let bytecode: any = null;\n        if (compilerOutput.bytecode) {\n            bytecode = compilerOutput.bytecode;\n        } else if (compilerOutput.evm && compilerOutput.evm.bytecode) {\n            bytecode = compilerOutput.evm.bytecode;\n        }\n\n        return new this(abi, bytecode, signer);\n    }\n\n    static getInterface(contractInterface: ContractInterface) {\n        return Contract.getInterface(contractInterface);\n    }\n\n    static getContractAddress(tx: { from: string, nonce: BytesLike | BigNumber | number }): string {\n        return getContractAddress(tx);\n    }\n\n    static getContract(address: string, contractInterface: ContractInterface, signer?: Signer): Contract {\n        return new Contract(address, contractInterface, signer);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}