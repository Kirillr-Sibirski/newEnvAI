{"ast":null,"code":"\"use strict\";\n\nimport _classCallCheck from \"C:/Users/kiril/Desktop/newenvai/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/kiril/Desktop/newenvai/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { EC } from \"./elliptic\";\nimport { arrayify, hexDataLength, hexlify, hexZeroPad, splitSignature } from \"@ethersproject/bytes\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nvar _curve = null;\n\nfunction getCurve() {\n  if (!_curve) {\n    _curve = new EC(\"secp256k1\");\n  }\n\n  return _curve;\n}\n\nexport var SigningKey = /*#__PURE__*/function () {\n  function SigningKey(privateKey) {\n    _classCallCheck(this, SigningKey);\n\n    defineReadOnly(this, \"curve\", \"secp256k1\");\n    defineReadOnly(this, \"privateKey\", hexlify(privateKey));\n\n    if (hexDataLength(this.privateKey) !== 32) {\n      logger.throwArgumentError(\"invalid private key\", \"privateKey\", \"[[ REDACTED ]]\");\n    }\n\n    var keyPair = getCurve().keyFromPrivate(arrayify(this.privateKey));\n    defineReadOnly(this, \"publicKey\", \"0x\" + keyPair.getPublic(false, \"hex\"));\n    defineReadOnly(this, \"compressedPublicKey\", \"0x\" + keyPair.getPublic(true, \"hex\"));\n    defineReadOnly(this, \"_isSigningKey\", true);\n  }\n\n  _createClass(SigningKey, [{\n    key: \"_addPoint\",\n    value: function _addPoint(other) {\n      var p0 = getCurve().keyFromPublic(arrayify(this.publicKey));\n      var p1 = getCurve().keyFromPublic(arrayify(other));\n      return \"0x\" + p0.pub.add(p1.pub).encodeCompressed(\"hex\");\n    }\n  }, {\n    key: \"signDigest\",\n    value: function signDigest(digest) {\n      var keyPair = getCurve().keyFromPrivate(arrayify(this.privateKey));\n      var digestBytes = arrayify(digest);\n\n      if (digestBytes.length !== 32) {\n        logger.throwArgumentError(\"bad digest length\", \"digest\", digest);\n      }\n\n      var signature = keyPair.sign(digestBytes, {\n        canonical: true\n      });\n      return splitSignature({\n        recoveryParam: signature.recoveryParam,\n        r: hexZeroPad(\"0x\" + signature.r.toString(16), 32),\n        s: hexZeroPad(\"0x\" + signature.s.toString(16), 32)\n      });\n    }\n  }, {\n    key: \"computeSharedSecret\",\n    value: function computeSharedSecret(otherKey) {\n      var keyPair = getCurve().keyFromPrivate(arrayify(this.privateKey));\n      var otherKeyPair = getCurve().keyFromPublic(arrayify(computePublicKey(otherKey)));\n      return hexZeroPad(\"0x\" + keyPair.derive(otherKeyPair.getPublic()).toString(16), 32);\n    }\n  }], [{\n    key: \"isSigningKey\",\n    value: function isSigningKey(value) {\n      return !!(value && value._isSigningKey);\n    }\n  }]);\n\n  return SigningKey;\n}();\nexport function recoverPublicKey(digest, signature) {\n  var sig = splitSignature(signature);\n  var rs = {\n    r: arrayify(sig.r),\n    s: arrayify(sig.s)\n  };\n  return \"0x\" + getCurve().recoverPubKey(arrayify(digest), rs, sig.recoveryParam).encode(\"hex\", false);\n}\nexport function computePublicKey(key, compressed) {\n  var bytes = arrayify(key);\n\n  if (bytes.length === 32) {\n    var signingKey = new SigningKey(bytes);\n\n    if (compressed) {\n      return \"0x\" + getCurve().keyFromPrivate(bytes).getPublic(true, \"hex\");\n    }\n\n    return signingKey.publicKey;\n  } else if (bytes.length === 33) {\n    if (compressed) {\n      return hexlify(bytes);\n    }\n\n    return \"0x\" + getCurve().keyFromPublic(bytes).getPublic(false, \"hex\");\n  } else if (bytes.length === 65) {\n    if (!compressed) {\n      return hexlify(bytes);\n    }\n\n    return \"0x\" + getCurve().keyFromPublic(bytes).getPublic(true, \"hex\");\n  }\n\n  return logger.throwArgumentError(\"invalid public or private key\", \"key\", \"[REDACTED]\");\n}","map":{"version":3,"mappings":"AAAA;;;;AAEA,SAASA,EAAT,QAAmB,YAAnB;AAEA,SAASC,QAAT,EAA8BC,aAA9B,EAA6CC,OAA7C,EAAsDC,UAAtD,EAA4FC,cAA5F,QAAkH,sBAAlH;AACA,SAASC,cAAT,QAA+B,2BAA/B;AAEA,SAASC,MAAT,QAAuB,uBAAvB;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,IAAMC,MAAM,GAAG,IAAIF,MAAJ,CAAWC,OAAX,CAAf;AAEA,IAAIE,MAAM,GAAO,IAAjB;;AACA,SAASC,QAAT,GAAiB;EACb,IAAI,CAACD,MAAL,EAAa;IACTA,MAAM,GAAG,IAAIV,EAAJ,CAAO,WAAP,CAAT;EACH;;EACD,OAAOU,MAAP;AACH;;AAED,WAAaE,UAAb;EAYI,oBAAYC,UAAZ,EAAiC;IAAA;;IAC7BP,cAAc,CAAC,IAAD,EAAO,OAAP,EAAgB,WAAhB,CAAd;IAEAA,cAAc,CAAC,IAAD,EAAO,YAAP,EAAqBH,OAAO,CAACU,UAAD,CAA5B,CAAd;;IACA,IAAIX,aAAa,CAAC,KAAKW,UAAN,CAAb,KAAmC,EAAvC,EAA2C;MACvCJ,MAAM,CAACK,kBAAP,CAA0B,qBAA1B,EAAiD,YAAjD,EAA+D,gBAA/D;IACH;;IAED,IAAMC,OAAO,GAAGJ,QAAQ,GAAGK,cAAX,CAA0Bf,QAAQ,CAAC,KAAKY,UAAN,CAAlC,CAAhB;IAEAP,cAAc,CAAC,IAAD,EAAO,WAAP,EAAoB,OAAOS,OAAO,CAACE,SAAR,CAAkB,KAAlB,EAAyB,KAAzB,CAA3B,CAAd;IACAX,cAAc,CAAC,IAAD,EAAO,qBAAP,EAA8B,OAAOS,OAAO,CAACE,SAAR,CAAkB,IAAlB,EAAwB,KAAxB,CAArC,CAAd;IAEAX,cAAc,CAAC,IAAD,EAAO,eAAP,EAAwB,IAAxB,CAAd;EACH;;EA1BL;IAAA;IAAA,OA4BI,mBAAUY,KAAV,EAA0B;MACtB,IAAMC,EAAE,GAAIR,QAAQ,GAAGS,aAAX,CAAyBnB,QAAQ,CAAC,KAAKoB,SAAN,CAAjC,CAAZ;MACA,IAAMC,EAAE,GAAIX,QAAQ,GAAGS,aAAX,CAAyBnB,QAAQ,CAACiB,KAAD,CAAjC,CAAZ;MACA,OAAO,OAAOC,EAAE,CAACI,GAAH,CAAOC,GAAP,CAAWF,EAAE,CAACC,GAAd,EAAmBE,gBAAnB,CAAoC,KAApC,CAAd;IACH;EAhCL;IAAA;IAAA,OAkCI,oBAAWC,MAAX,EAA4B;MACxB,IAAMX,OAAO,GAAGJ,QAAQ,GAAGK,cAAX,CAA0Bf,QAAQ,CAAC,KAAKY,UAAN,CAAlC,CAAhB;MACA,IAAMc,WAAW,GAAG1B,QAAQ,CAACyB,MAAD,CAA5B;;MACA,IAAIC,WAAW,CAACC,MAAZ,KAAuB,EAA3B,EAA+B;QAC3BnB,MAAM,CAACK,kBAAP,CAA0B,mBAA1B,EAA+C,QAA/C,EAAyDY,MAAzD;MACH;;MACD,IAAMG,SAAS,GAAGd,OAAO,CAACe,IAAR,CAAaH,WAAb,EAA0B;QAAEI,SAAS,EAAE;MAAb,CAA1B,CAAlB;MACA,OAAO1B,cAAc,CAAC;QAClB2B,aAAa,EAAEH,SAAS,CAACG,aADP;QAElBC,CAAC,EAAE7B,UAAU,CAAC,OAAOyB,SAAS,CAACI,CAAV,CAAYC,QAAZ,CAAqB,EAArB,CAAR,EAAkC,EAAlC,CAFK;QAGlBC,CAAC,EAAE/B,UAAU,CAAC,OAAOyB,SAAS,CAACM,CAAV,CAAYD,QAAZ,CAAqB,EAArB,CAAR,EAAkC,EAAlC;MAHK,CAAD,CAArB;IAKH;EA9CL;IAAA;IAAA,OAgDI,6BAAoBE,QAApB,EAAuC;MACnC,IAAMrB,OAAO,GAAGJ,QAAQ,GAAGK,cAAX,CAA0Bf,QAAQ,CAAC,KAAKY,UAAN,CAAlC,CAAhB;MACA,IAAMwB,YAAY,GAAG1B,QAAQ,GAAGS,aAAX,CAAyBnB,QAAQ,CAACqC,gBAAgB,CAACF,QAAD,CAAjB,CAAjC,CAArB;MACA,OAAOhC,UAAU,CAAC,OAAOW,OAAO,CAACwB,MAAR,CAAeF,YAAY,CAACpB,SAAb,EAAf,EAAyCiB,QAAzC,CAAkD,EAAlD,CAAR,EAA+D,EAA/D,CAAjB;IACH;EApDL;IAAA;IAAA,OAsDI,sBAAoBM,KAApB,EAA8B;MAC1B,OAAO,CAAC,EAAEA,KAAK,IAAIA,KAAK,CAACC,aAAjB,CAAR;IACH;EAxDL;;EAAA;AAAA;AA2DA,OAAM,SAAUC,gBAAV,CAA2BhB,MAA3B,EAA8CG,SAA9C,EAAsE;EACxE,IAAMc,GAAG,GAAGtC,cAAc,CAACwB,SAAD,CAA1B;EACA,IAAMe,EAAE,GAAG;IAAEX,CAAC,EAAEhC,QAAQ,CAAC0C,GAAG,CAACV,CAAL,CAAb;IAAsBE,CAAC,EAAElC,QAAQ,CAAC0C,GAAG,CAACR,CAAL;EAAjC,CAAX;EACA,OAAO,OAAOxB,QAAQ,GAAGkC,aAAX,CAAyB5C,QAAQ,CAACyB,MAAD,CAAjC,EAA2CkB,EAA3C,EAA+CD,GAAG,CAACX,aAAnD,EAAkEc,MAAlE,CAAyE,KAAzE,EAAgF,KAAhF,CAAd;AACH;AAED,OAAM,SAAUR,gBAAV,CAA2BS,GAA3B,EAA2CC,UAA3C,EAA+D;EACjE,IAAMC,KAAK,GAAGhD,QAAQ,CAAC8C,GAAD,CAAtB;;EAEA,IAAIE,KAAK,CAACrB,MAAN,KAAiB,EAArB,EAAyB;IACrB,IAAMsB,UAAU,GAAG,IAAItC,UAAJ,CAAeqC,KAAf,CAAnB;;IACA,IAAID,UAAJ,EAAgB;MACZ,OAAO,OAAOrC,QAAQ,GAAGK,cAAX,CAA0BiC,KAA1B,EAAiChC,SAAjC,CAA2C,IAA3C,EAAiD,KAAjD,CAAd;IACH;;IACD,OAAOiC,UAAU,CAAC7B,SAAlB;EAEH,CAPD,MAOO,IAAI4B,KAAK,CAACrB,MAAN,KAAiB,EAArB,EAAyB;IAC5B,IAAIoB,UAAJ,EAAgB;MAAE,OAAO7C,OAAO,CAAC8C,KAAD,CAAd;IAAwB;;IAC1C,OAAO,OAAOtC,QAAQ,GAAGS,aAAX,CAAyB6B,KAAzB,EAAgChC,SAAhC,CAA0C,KAA1C,EAAiD,KAAjD,CAAd;EAEH,CAJM,MAIA,IAAIgC,KAAK,CAACrB,MAAN,KAAiB,EAArB,EAAyB;IAC5B,IAAI,CAACoB,UAAL,EAAiB;MAAE,OAAO7C,OAAO,CAAC8C,KAAD,CAAd;IAAwB;;IAC3C,OAAO,OAAOtC,QAAQ,GAAGS,aAAX,CAAyB6B,KAAzB,EAAgChC,SAAhC,CAA0C,IAA1C,EAAgD,KAAhD,CAAd;EACH;;EAED,OAAOR,MAAM,CAACK,kBAAP,CAA0B,+BAA1B,EAA2D,KAA3D,EAAkE,YAAlE,CAAP;AACH","names":["EC","arrayify","hexDataLength","hexlify","hexZeroPad","splitSignature","defineReadOnly","Logger","version","logger","_curve","getCurve","SigningKey","privateKey","throwArgumentError","keyPair","keyFromPrivate","getPublic","other","p0","keyFromPublic","publicKey","p1","pub","add","encodeCompressed","digest","digestBytes","length","signature","sign","canonical","recoveryParam","r","toString","s","otherKey","otherKeyPair","computePublicKey","derive","value","_isSigningKey","recoverPublicKey","sig","rs","recoverPubKey","encode","key","compressed","bytes","signingKey"],"sources":["C:\\Users\\kiril\\Desktop\\newenvai\\client\\node_modules\\@ethersproject\\signing-key\\src.ts\\index.ts"],"sourcesContent":["\"use strict\";\n\nimport { EC } from \"./elliptic\";\n\nimport { arrayify, BytesLike, hexDataLength, hexlify, hexZeroPad, Signature, SignatureLike, splitSignature } from \"@ethersproject/bytes\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nlet _curve: EC = null\nfunction getCurve() {\n    if (!_curve) {\n        _curve = new EC(\"secp256k1\");\n    }\n    return _curve;\n}\n\nexport class SigningKey {\n\n    readonly curve: string;\n\n    readonly privateKey: string;\n    readonly publicKey: string;\n    readonly compressedPublicKey: string;\n\n    //readonly address: string;\n\n    readonly _isSigningKey: boolean;\n\n    constructor(privateKey: BytesLike) {\n        defineReadOnly(this, \"curve\", \"secp256k1\");\n\n        defineReadOnly(this, \"privateKey\", hexlify(privateKey));\n        if (hexDataLength(this.privateKey) !== 32) {\n            logger.throwArgumentError(\"invalid private key\", \"privateKey\", \"[[ REDACTED ]]\");\n        }\n\n        const keyPair = getCurve().keyFromPrivate(arrayify(this.privateKey));\n\n        defineReadOnly(this, \"publicKey\", \"0x\" + keyPair.getPublic(false, \"hex\"));\n        defineReadOnly(this, \"compressedPublicKey\", \"0x\" + keyPair.getPublic(true, \"hex\"));\n\n        defineReadOnly(this, \"_isSigningKey\", true);\n    }\n\n    _addPoint(other: BytesLike): string {\n        const p0 =  getCurve().keyFromPublic(arrayify(this.publicKey));\n        const p1 =  getCurve().keyFromPublic(arrayify(other));\n        return \"0x\" + p0.pub.add(p1.pub).encodeCompressed(\"hex\");\n    }\n\n    signDigest(digest: BytesLike): Signature {\n        const keyPair = getCurve().keyFromPrivate(arrayify(this.privateKey));\n        const digestBytes = arrayify(digest);\n        if (digestBytes.length !== 32) {\n            logger.throwArgumentError(\"bad digest length\", \"digest\", digest);\n        }\n        const signature = keyPair.sign(digestBytes, { canonical: true });\n        return splitSignature({\n            recoveryParam: signature.recoveryParam,\n            r: hexZeroPad(\"0x\" + signature.r.toString(16), 32),\n            s: hexZeroPad(\"0x\" + signature.s.toString(16), 32),\n        })\n    }\n\n    computeSharedSecret(otherKey: BytesLike): string {\n        const keyPair = getCurve().keyFromPrivate(arrayify(this.privateKey));\n        const otherKeyPair = getCurve().keyFromPublic(arrayify(computePublicKey(otherKey)));\n        return hexZeroPad(\"0x\" + keyPair.derive(otherKeyPair.getPublic()).toString(16), 32);\n    }\n\n    static isSigningKey(value: any): value is SigningKey {\n        return !!(value && value._isSigningKey);\n    }\n}\n\nexport function recoverPublicKey(digest: BytesLike, signature: SignatureLike): string {\n    const sig = splitSignature(signature);\n    const rs = { r: arrayify(sig.r), s: arrayify(sig.s) };\n    return \"0x\" + getCurve().recoverPubKey(arrayify(digest), rs, sig.recoveryParam).encode(\"hex\", false);\n}\n\nexport function computePublicKey(key: BytesLike, compressed?: boolean): string {\n    const bytes = arrayify(key);\n\n    if (bytes.length === 32) {\n        const signingKey = new SigningKey(bytes);\n        if (compressed) {\n            return \"0x\" + getCurve().keyFromPrivate(bytes).getPublic(true, \"hex\");\n        }\n        return signingKey.publicKey;\n\n    } else if (bytes.length === 33) {\n        if (compressed) { return hexlify(bytes); }\n        return \"0x\" + getCurve().keyFromPublic(bytes).getPublic(false, \"hex\");\n\n    } else if (bytes.length === 65) {\n        if (!compressed) { return hexlify(bytes); }\n        return \"0x\" + getCurve().keyFromPublic(bytes).getPublic(true, \"hex\");\n    }\n\n    return logger.throwArgumentError(\"invalid public or private key\", \"key\", \"[REDACTED]\");\n}\n\n"]},"metadata":{},"sourceType":"module"}