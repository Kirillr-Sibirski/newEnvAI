{"ast":null,"code":"\"use strict\";\n\nimport _assertThisInitialized from \"C:/Users/kiril/Desktop/newenvai/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _regeneratorRuntime from \"C:/Users/kiril/Desktop/newenvai/client/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _classCallCheck from \"C:/Users/kiril/Desktop/newenvai/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/kiril/Desktop/newenvai/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"C:/Users/kiril/Desktop/newenvai/client/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/kiril/Desktop/newenvai/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/kiril/Desktop/newenvai/client/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/kiril/Desktop/newenvai/client/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { defineReadOnly, getStatic } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nimport { JsonRpcProvider } from \"./json-rpc-provider\"; // A StaticJsonRpcProvider is useful when you *know* for certain that\n// the backend will never change, as it never calls eth_chainId to\n// verify its backend. However, if the backend does change, the effects\n// are undefined and may include:\n// - inconsistent results\n// - locking up the UI\n// - block skew warnings\n// - wrong results\n// If the network is not explicit (i.e. auto-detection is expected), the\n// node MUST be running and available to respond to requests BEFORE this\n// is instantiated.\n\nexport var StaticJsonRpcProvider = /*#__PURE__*/function (_JsonRpcProvider) {\n  _inherits(StaticJsonRpcProvider, _JsonRpcProvider);\n\n  var _super2 = _createSuper(StaticJsonRpcProvider);\n\n  function StaticJsonRpcProvider() {\n    _classCallCheck(this, StaticJsonRpcProvider);\n\n    return _super2.apply(this, arguments);\n  }\n\n  _createClass(StaticJsonRpcProvider, [{\n    key: \"detectNetwork\",\n    value: function detectNetwork() {\n      var _this = this;\n\n      var _super = Object.create(null, {\n        detectNetwork: {\n          get: function get() {\n            return _get(_getPrototypeOf(StaticJsonRpcProvider.prototype), \"detectNetwork\", _this);\n          }\n        }\n      });\n\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var network;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                network = this.network;\n\n                if (!(network == null)) {\n                  _context.next = 7;\n                  break;\n                }\n\n                _context.next = 4;\n                return _super.detectNetwork.call(this);\n\n              case 4:\n                network = _context.sent;\n\n                if (!network) {\n                  logger.throwError(\"no network detected\", Logger.errors.UNKNOWN_ERROR, {});\n                } // If still not set, set it\n\n\n                if (this._network == null) {\n                  // A static network does not support \"any\"\n                  defineReadOnly(this, \"_network\", network);\n                  this.emit(\"network\", network, null);\n                }\n\n              case 7:\n                return _context.abrupt(\"return\", network);\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n  }]);\n\n  return StaticJsonRpcProvider;\n}(JsonRpcProvider);\nexport var UrlJsonRpcProvider = /*#__PURE__*/function (_StaticJsonRpcProvide) {\n  _inherits(UrlJsonRpcProvider, _StaticJsonRpcProvide);\n\n  var _super3 = _createSuper(UrlJsonRpcProvider);\n\n  function UrlJsonRpcProvider(network, apiKey) {\n    var _this2;\n\n    _classCallCheck(this, UrlJsonRpcProvider);\n\n    logger.checkAbstract(this instanceof UrlJsonRpcProvider ? this.constructor : void 0, UrlJsonRpcProvider); // Normalize the Network and API Key\n\n    network = getStatic(this instanceof UrlJsonRpcProvider ? this.constructor : void 0, \"getNetwork\")(network);\n    apiKey = getStatic(this instanceof UrlJsonRpcProvider ? this.constructor : void 0, \"getApiKey\")(apiKey);\n    var connection = getStatic(this instanceof UrlJsonRpcProvider ? this.constructor : void 0, \"getUrl\")(network, apiKey);\n    _this2 = _super3.call(this, connection, network);\n\n    if (typeof apiKey === \"string\") {\n      defineReadOnly(_assertThisInitialized(_this2), \"apiKey\", apiKey);\n    } else if (apiKey != null) {\n      Object.keys(apiKey).forEach(function (key) {\n        defineReadOnly(_assertThisInitialized(_this2), key, apiKey[key]);\n      });\n    }\n\n    return _this2;\n  }\n\n  _createClass(UrlJsonRpcProvider, [{\n    key: \"_startPending\",\n    value: function _startPending() {\n      logger.warn(\"WARNING: API provider does not support pending filters\");\n    }\n  }, {\n    key: \"isCommunityResource\",\n    value: function isCommunityResource() {\n      return false;\n    }\n  }, {\n    key: \"getSigner\",\n    value: function getSigner(address) {\n      return logger.throwError(\"API provider does not support signing\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"getSigner\"\n      });\n    }\n  }, {\n    key: \"listAccounts\",\n    value: function listAccounts() {\n      return Promise.resolve([]);\n    } // Return a defaultApiKey if null, otherwise validate the API key\n\n  }], [{\n    key: \"getApiKey\",\n    value: function getApiKey(apiKey) {\n      return apiKey;\n    } // Returns the url or connection for the given network and API key. The\n    // API key will have been sanitized by the getApiKey first, so any validation\n    // or transformations can be done there.\n\n  }, {\n    key: \"getUrl\",\n    value: function getUrl(network, apiKey) {\n      return logger.throwError(\"not implemented; sub-classes must override getUrl\", Logger.errors.NOT_IMPLEMENTED, {\n        operation: \"getUrl\"\n      });\n    }\n  }]);\n\n  return UrlJsonRpcProvider;\n}(StaticJsonRpcProvider);","map":{"version":3,"mappings":"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","names":["defineReadOnly","getStatic","Logger","version","logger","JsonRpcProvider","StaticJsonRpcProvider","network","_super","detectNetwork","call","throwError","errors","UNKNOWN_ERROR","_network","emit","UrlJsonRpcProvider","apiKey","checkAbstract","connection","Object","keys","forEach","key","warn","address","UNSUPPORTED_OPERATION","operation","Promise","resolve","NOT_IMPLEMENTED"],"sources":["C:\\Users\\kiril\\Desktop\\newenvai\\client\\node_modules\\@ethersproject\\providers\\src.ts\\url-json-rpc-provider.ts"],"sourcesContent":["\n\"use strict\";\n\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { defineReadOnly, getStatic } from \"@ethersproject/properties\";\nimport { ConnectionInfo } from \"@ethersproject/web\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { CommunityResourcable } from \"./formatter\";\nimport { JsonRpcProvider, JsonRpcSigner } from \"./json-rpc-provider\";\n\ntype getUrlFunc = (network: Network, apiKey: string) => string | ConnectionInfo;\n\n// A StaticJsonRpcProvider is useful when you *know* for certain that\n// the backend will never change, as it never calls eth_chainId to\n// verify its backend. However, if the backend does change, the effects\n// are undefined and may include:\n// - inconsistent results\n// - locking up the UI\n// - block skew warnings\n// - wrong results\n// If the network is not explicit (i.e. auto-detection is expected), the\n// node MUST be running and available to respond to requests BEFORE this\n// is instantiated.\nexport class StaticJsonRpcProvider extends JsonRpcProvider {\n    async detectNetwork(): Promise<Network> {\n        let network = this.network;\n        if (network == null) {\n            network = await super.detectNetwork();\n\n            if (!network) {\n                logger.throwError(\"no network detected\", Logger.errors.UNKNOWN_ERROR, { });\n            }\n\n            // If still not set, set it\n            if (this._network == null) {\n                // A static network does not support \"any\"\n                defineReadOnly(this, \"_network\", network);\n\n                this.emit(\"network\", network, null);\n            }\n        }\n        return network;\n    }\n}\n\nexport abstract class UrlJsonRpcProvider extends StaticJsonRpcProvider implements CommunityResourcable {\n    readonly apiKey: any;\n\n    constructor(network?: Networkish, apiKey?: any) {\n        logger.checkAbstract(new.target, UrlJsonRpcProvider);\n\n        // Normalize the Network and API Key\n        network = getStatic<(network: Networkish) => Network>(new.target, \"getNetwork\")(network);\n        apiKey = getStatic<(apiKey: string) => string>(new.target, \"getApiKey\")(apiKey);\n\n        const connection = getStatic<getUrlFunc>(new.target, \"getUrl\")(network, apiKey);\n\n        super(connection, network);\n\n        if (typeof(apiKey) === \"string\") {\n            defineReadOnly(this, \"apiKey\", apiKey);\n        } else if (apiKey != null) {\n            Object.keys(apiKey).forEach((key) => {\n                defineReadOnly<any, any>(this, key, apiKey[key]);\n            });\n        }\n    }\n\n    _startPending(): void {\n        logger.warn(\"WARNING: API provider does not support pending filters\");\n    }\n\n    isCommunityResource(): boolean {\n        return false;\n    }\n\n    getSigner(address?: string): JsonRpcSigner {\n        return logger.throwError(\n            \"API provider does not support signing\",\n            Logger.errors.UNSUPPORTED_OPERATION,\n            { operation: \"getSigner\" }\n        );\n    }\n\n    listAccounts(): Promise<Array<string>> {\n        return Promise.resolve([]);\n    }\n\n    // Return a defaultApiKey if null, otherwise validate the API key\n    static getApiKey(apiKey: any): any {\n        return apiKey;\n    }\n\n    // Returns the url or connection for the given network and API key. The\n    // API key will have been sanitized by the getApiKey first, so any validation\n    // or transformations can be done there.\n    static getUrl(network: Network, apiKey: any): string | ConnectionInfo {\n        return logger.throwError(\"not implemented; sub-classes must override getUrl\", Logger.errors.NOT_IMPLEMENTED, {\n            operation: \"getUrl\"\n        });\n    }\n}\n"]},"metadata":{},"sourceType":"module"}