{"ast":null,"code":"\"use strict\";\n\nimport _createClass from \"C:/Users/kiril/Desktop/newenvai/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"C:/Users/kiril/Desktop/newenvai/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _inherits from \"C:/Users/kiril/Desktop/newenvai/client/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/kiril/Desktop/newenvai/client/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { getAddress as _getAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexDataSlice, hexlify, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { id } from \"@ethersproject/hash\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { defineReadOnly, Description, getStatic } from \"@ethersproject/properties\";\nimport { defaultAbiCoder } from \"./abi-coder\";\nimport { checkResultErrors } from \"./coders/abstract-coder\";\nimport { ConstructorFragment, EventFragment, FormatTypes, Fragment, FunctionFragment, ParamType } from \"./fragments\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nexport { checkResultErrors };\nexport var LogDescription = /*#__PURE__*/function (_Description) {\n  _inherits(LogDescription, _Description);\n\n  var _super = _createSuper(LogDescription);\n\n  function LogDescription() {\n    _classCallCheck(this, LogDescription);\n\n    return _super.apply(this, arguments);\n  }\n\n  return _createClass(LogDescription);\n}(Description);\nexport var TransactionDescription = /*#__PURE__*/function (_Description2) {\n  _inherits(TransactionDescription, _Description2);\n\n  var _super2 = _createSuper(TransactionDescription);\n\n  function TransactionDescription() {\n    _classCallCheck(this, TransactionDescription);\n\n    return _super2.apply(this, arguments);\n  }\n\n  return _createClass(TransactionDescription);\n}(Description);\nexport var ErrorDescription = /*#__PURE__*/function (_Description3) {\n  _inherits(ErrorDescription, _Description3);\n\n  var _super3 = _createSuper(ErrorDescription);\n\n  function ErrorDescription() {\n    _classCallCheck(this, ErrorDescription);\n\n    return _super3.apply(this, arguments);\n  }\n\n  return _createClass(ErrorDescription);\n}(Description);\nexport var Indexed = /*#__PURE__*/function (_Description4) {\n  _inherits(Indexed, _Description4);\n\n  var _super4 = _createSuper(Indexed);\n\n  function Indexed() {\n    _classCallCheck(this, Indexed);\n\n    return _super4.apply(this, arguments);\n  }\n\n  _createClass(Indexed, null, [{\n    key: \"isIndexed\",\n    value: function isIndexed(value) {\n      return !!(value && value._isIndexed);\n    }\n  }]);\n\n  return Indexed;\n}(Description);\nvar BuiltinErrors = {\n  \"0x08c379a0\": {\n    signature: \"Error(string)\",\n    name: \"Error\",\n    inputs: [\"string\"],\n    reason: true\n  },\n  \"0x4e487b71\": {\n    signature: \"Panic(uint256)\",\n    name: \"Panic\",\n    inputs: [\"uint256\"]\n  }\n};\n\nfunction wrapAccessError(property, error) {\n  var wrap = new Error(\"deferred error during ABI decoding triggered accessing \".concat(property));\n  wrap.error = error;\n  return wrap;\n}\n/*\nfunction checkNames(fragment: Fragment, type: \"input\" | \"output\", params: Array<ParamType>): void {\n    params.reduce((accum, param) => {\n        if (param.name) {\n            if (accum[param.name]) {\n                logger.throwArgumentError(`duplicate ${ type } parameter ${ JSON.stringify(param.name) } in ${ fragment.format(\"full\") }`, \"fragment\", fragment);\n            }\n            accum[param.name] = true;\n        }\n        return accum;\n    }, <{ [ name: string ]: boolean }>{ });\n}\n*/\n\n\nexport var Interface = /*#__PURE__*/function () {\n  function Interface(fragments) {\n    var _this = this;\n\n    _classCallCheck(this, Interface);\n\n    var abi = [];\n\n    if (typeof fragments === \"string\") {\n      abi = JSON.parse(fragments);\n    } else {\n      abi = fragments;\n    }\n\n    defineReadOnly(this, \"fragments\", abi.map(function (fragment) {\n      return Fragment.from(fragment);\n    }).filter(function (fragment) {\n      return fragment != null;\n    }));\n    defineReadOnly(this, \"_abiCoder\", getStatic(this instanceof Interface ? this.constructor : void 0, \"getAbiCoder\")());\n    defineReadOnly(this, \"functions\", {});\n    defineReadOnly(this, \"errors\", {});\n    defineReadOnly(this, \"events\", {});\n    defineReadOnly(this, \"structs\", {}); // Add all fragments by their signature\n\n    this.fragments.forEach(function (fragment) {\n      var bucket = null;\n\n      switch (fragment.type) {\n        case \"constructor\":\n          if (_this.deploy) {\n            logger.warn(\"duplicate definition - constructor\");\n            return;\n          } //checkNames(fragment, \"input\", fragment.inputs);\n\n\n          defineReadOnly(_this, \"deploy\", fragment);\n          return;\n\n        case \"function\":\n          //checkNames(fragment, \"input\", fragment.inputs);\n          //checkNames(fragment, \"output\", (<FunctionFragment>fragment).outputs);\n          bucket = _this.functions;\n          break;\n\n        case \"event\":\n          //checkNames(fragment, \"input\", fragment.inputs);\n          bucket = _this.events;\n          break;\n\n        case \"error\":\n          bucket = _this.errors;\n          break;\n\n        default:\n          return;\n      }\n\n      var signature = fragment.format();\n\n      if (bucket[signature]) {\n        logger.warn(\"duplicate definition - \" + signature);\n        return;\n      }\n\n      bucket[signature] = fragment;\n    }); // If we do not have a constructor add a default\n\n    if (!this.deploy) {\n      defineReadOnly(this, \"deploy\", ConstructorFragment.from({\n        payable: false,\n        type: \"constructor\"\n      }));\n    }\n\n    defineReadOnly(this, \"_isInterface\", true);\n  }\n\n  _createClass(Interface, [{\n    key: \"format\",\n    value: function format(_format) {\n      if (!_format) {\n        _format = FormatTypes.full;\n      }\n\n      if (_format === FormatTypes.sighash) {\n        logger.throwArgumentError(\"interface does not support formatting sighash\", \"format\", _format);\n      }\n\n      var abi = this.fragments.map(function (fragment) {\n        return fragment.format(_format);\n      }); // We need to re-bundle the JSON fragments a bit\n\n      if (_format === FormatTypes.json) {\n        return JSON.stringify(abi.map(function (j) {\n          return JSON.parse(j);\n        }));\n      }\n\n      return abi;\n    } // Sub-classes can override these to handle other blockchains\n\n  }, {\n    key: \"getFunction\",\n    value: // Find a function definition by any means necessary (unless it is ambiguous)\n    function getFunction(nameOrSignatureOrSighash) {\n      if (isHexString(nameOrSignatureOrSighash)) {\n        for (var name in this.functions) {\n          if (nameOrSignatureOrSighash === this.getSighash(name)) {\n            return this.functions[name];\n          }\n        }\n\n        logger.throwArgumentError(\"no matching function\", \"sighash\", nameOrSignatureOrSighash);\n      } // It is a bare name, look up the function (will return null if ambiguous)\n\n\n      if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n        var _name = nameOrSignatureOrSighash.trim();\n\n        var matching = Object.keys(this.functions).filter(function (f) {\n          return f.split(\"(\"\n          /* fix:) */\n          )[0] === _name;\n        });\n\n        if (matching.length === 0) {\n          logger.throwArgumentError(\"no matching function\", \"name\", _name);\n        } else if (matching.length > 1) {\n          logger.throwArgumentError(\"multiple matching functions\", \"name\", _name);\n        }\n\n        return this.functions[matching[0]];\n      } // Normalize the signature and lookup the function\n\n\n      var result = this.functions[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n\n      if (!result) {\n        logger.throwArgumentError(\"no matching function\", \"signature\", nameOrSignatureOrSighash);\n      }\n\n      return result;\n    } // Find an event definition by any means necessary (unless it is ambiguous)\n\n  }, {\n    key: \"getEvent\",\n    value: function getEvent(nameOrSignatureOrTopic) {\n      if (isHexString(nameOrSignatureOrTopic)) {\n        var topichash = nameOrSignatureOrTopic.toLowerCase();\n\n        for (var name in this.events) {\n          if (topichash === this.getEventTopic(name)) {\n            return this.events[name];\n          }\n        }\n\n        logger.throwArgumentError(\"no matching event\", \"topichash\", topichash);\n      } // It is a bare name, look up the function (will return null if ambiguous)\n\n\n      if (nameOrSignatureOrTopic.indexOf(\"(\") === -1) {\n        var _name2 = nameOrSignatureOrTopic.trim();\n\n        var matching = Object.keys(this.events).filter(function (f) {\n          return f.split(\"(\"\n          /* fix:) */\n          )[0] === _name2;\n        });\n\n        if (matching.length === 0) {\n          logger.throwArgumentError(\"no matching event\", \"name\", _name2);\n        } else if (matching.length > 1) {\n          logger.throwArgumentError(\"multiple matching events\", \"name\", _name2);\n        }\n\n        return this.events[matching[0]];\n      } // Normalize the signature and lookup the function\n\n\n      var result = this.events[EventFragment.fromString(nameOrSignatureOrTopic).format()];\n\n      if (!result) {\n        logger.throwArgumentError(\"no matching event\", \"signature\", nameOrSignatureOrTopic);\n      }\n\n      return result;\n    } // Find a function definition by any means necessary (unless it is ambiguous)\n\n  }, {\n    key: \"getError\",\n    value: function getError(nameOrSignatureOrSighash) {\n      if (isHexString(nameOrSignatureOrSighash)) {\n        var getSighash = getStatic(this.constructor, \"getSighash\");\n\n        for (var name in this.errors) {\n          var error = this.errors[name];\n\n          if (nameOrSignatureOrSighash === getSighash(error)) {\n            return this.errors[name];\n          }\n        }\n\n        logger.throwArgumentError(\"no matching error\", \"sighash\", nameOrSignatureOrSighash);\n      } // It is a bare name, look up the function (will return null if ambiguous)\n\n\n      if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n        var _name3 = nameOrSignatureOrSighash.trim();\n\n        var matching = Object.keys(this.errors).filter(function (f) {\n          return f.split(\"(\"\n          /* fix:) */\n          )[0] === _name3;\n        });\n\n        if (matching.length === 0) {\n          logger.throwArgumentError(\"no matching error\", \"name\", _name3);\n        } else if (matching.length > 1) {\n          logger.throwArgumentError(\"multiple matching errors\", \"name\", _name3);\n        }\n\n        return this.errors[matching[0]];\n      } // Normalize the signature and lookup the function\n\n\n      var result = this.errors[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n\n      if (!result) {\n        logger.throwArgumentError(\"no matching error\", \"signature\", nameOrSignatureOrSighash);\n      }\n\n      return result;\n    } // Get the sighash (the bytes4 selector) used by Solidity to identify a function\n\n  }, {\n    key: \"getSighash\",\n    value: function getSighash(fragment) {\n      if (typeof fragment === \"string\") {\n        try {\n          fragment = this.getFunction(fragment);\n        } catch (error) {\n          try {\n            fragment = this.getError(fragment);\n          } catch (_) {\n            throw error;\n          }\n        }\n      }\n\n      return getStatic(this.constructor, \"getSighash\")(fragment);\n    } // Get the topic (the bytes32 hash) used by Solidity to identify an event\n\n  }, {\n    key: \"getEventTopic\",\n    value: function getEventTopic(eventFragment) {\n      if (typeof eventFragment === \"string\") {\n        eventFragment = this.getEvent(eventFragment);\n      }\n\n      return getStatic(this.constructor, \"getEventTopic\")(eventFragment);\n    }\n  }, {\n    key: \"_decodeParams\",\n    value: function _decodeParams(params, data) {\n      return this._abiCoder.decode(params, data);\n    }\n  }, {\n    key: \"_encodeParams\",\n    value: function _encodeParams(params, values) {\n      return this._abiCoder.encode(params, values);\n    }\n  }, {\n    key: \"encodeDeploy\",\n    value: function encodeDeploy(values) {\n      return this._encodeParams(this.deploy.inputs, values || []);\n    }\n  }, {\n    key: \"decodeErrorResult\",\n    value: function decodeErrorResult(fragment, data) {\n      if (typeof fragment === \"string\") {\n        fragment = this.getError(fragment);\n      }\n\n      var bytes = arrayify(data);\n\n      if (hexlify(bytes.slice(0, 4)) !== this.getSighash(fragment)) {\n        logger.throwArgumentError(\"data signature does not match error \".concat(fragment.name, \".\"), \"data\", hexlify(bytes));\n      }\n\n      return this._decodeParams(fragment.inputs, bytes.slice(4));\n    }\n  }, {\n    key: \"encodeErrorResult\",\n    value: function encodeErrorResult(fragment, values) {\n      if (typeof fragment === \"string\") {\n        fragment = this.getError(fragment);\n      }\n\n      return hexlify(concat([this.getSighash(fragment), this._encodeParams(fragment.inputs, values || [])]));\n    } // Decode the data for a function call (e.g. tx.data)\n\n  }, {\n    key: \"decodeFunctionData\",\n    value: function decodeFunctionData(functionFragment, data) {\n      if (typeof functionFragment === \"string\") {\n        functionFragment = this.getFunction(functionFragment);\n      }\n\n      var bytes = arrayify(data);\n\n      if (hexlify(bytes.slice(0, 4)) !== this.getSighash(functionFragment)) {\n        logger.throwArgumentError(\"data signature does not match function \".concat(functionFragment.name, \".\"), \"data\", hexlify(bytes));\n      }\n\n      return this._decodeParams(functionFragment.inputs, bytes.slice(4));\n    } // Encode the data for a function call (e.g. tx.data)\n\n  }, {\n    key: \"encodeFunctionData\",\n    value: function encodeFunctionData(functionFragment, values) {\n      if (typeof functionFragment === \"string\") {\n        functionFragment = this.getFunction(functionFragment);\n      }\n\n      return hexlify(concat([this.getSighash(functionFragment), this._encodeParams(functionFragment.inputs, values || [])]));\n    } // Decode the result from a function call (e.g. from eth_call)\n\n  }, {\n    key: \"decodeFunctionResult\",\n    value: function decodeFunctionResult(functionFragment, data) {\n      if (typeof functionFragment === \"string\") {\n        functionFragment = this.getFunction(functionFragment);\n      }\n\n      var bytes = arrayify(data);\n      var reason = null;\n      var message = \"\";\n      var errorArgs = null;\n      var errorName = null;\n      var errorSignature = null;\n\n      switch (bytes.length % this._abiCoder._getWordSize()) {\n        case 0:\n          try {\n            return this._abiCoder.decode(functionFragment.outputs, bytes);\n          } catch (error) {}\n\n          break;\n\n        case 4:\n          {\n            var selector = hexlify(bytes.slice(0, 4));\n            var builtin = BuiltinErrors[selector];\n\n            if (builtin) {\n              errorArgs = this._abiCoder.decode(builtin.inputs, bytes.slice(4));\n              errorName = builtin.name;\n              errorSignature = builtin.signature;\n\n              if (builtin.reason) {\n                reason = errorArgs[0];\n              }\n\n              if (errorName === \"Error\") {\n                message = \"; VM Exception while processing transaction: reverted with reason string \".concat(JSON.stringify(errorArgs[0]));\n              } else if (errorName === \"Panic\") {\n                message = \"; VM Exception while processing transaction: reverted with panic code \".concat(errorArgs[0]);\n              }\n            } else {\n              try {\n                var error = this.getError(selector);\n                errorArgs = this._abiCoder.decode(error.inputs, bytes.slice(4));\n                errorName = error.name;\n                errorSignature = error.format();\n              } catch (error) {}\n            }\n\n            break;\n          }\n      }\n\n      return logger.throwError(\"call revert exception\" + message, Logger.errors.CALL_EXCEPTION, {\n        method: functionFragment.format(),\n        data: hexlify(data),\n        errorArgs: errorArgs,\n        errorName: errorName,\n        errorSignature: errorSignature,\n        reason: reason\n      });\n    } // Encode the result for a function call (e.g. for eth_call)\n\n  }, {\n    key: \"encodeFunctionResult\",\n    value: function encodeFunctionResult(functionFragment, values) {\n      if (typeof functionFragment === \"string\") {\n        functionFragment = this.getFunction(functionFragment);\n      }\n\n      return hexlify(this._abiCoder.encode(functionFragment.outputs, values || []));\n    } // Create the filter for the event with search criteria (e.g. for eth_filterLog)\n\n  }, {\n    key: \"encodeFilterTopics\",\n    value: function encodeFilterTopics(eventFragment, values) {\n      var _this2 = this;\n\n      if (typeof eventFragment === \"string\") {\n        eventFragment = this.getEvent(eventFragment);\n      }\n\n      if (values.length > eventFragment.inputs.length) {\n        logger.throwError(\"too many arguments for \" + eventFragment.format(), Logger.errors.UNEXPECTED_ARGUMENT, {\n          argument: \"values\",\n          value: values\n        });\n      }\n\n      var topics = [];\n\n      if (!eventFragment.anonymous) {\n        topics.push(this.getEventTopic(eventFragment));\n      }\n\n      var encodeTopic = function encodeTopic(param, value) {\n        if (param.type === \"string\") {\n          return id(value);\n        } else if (param.type === \"bytes\") {\n          return keccak256(hexlify(value));\n        }\n\n        if (param.type === \"bool\" && typeof value === \"boolean\") {\n          value = value ? \"0x01\" : \"0x00\";\n        }\n\n        if (param.type.match(/^u?int/)) {\n          value = BigNumber.from(value).toHexString();\n        } // Check addresses are valid\n\n\n        if (param.type === \"address\") {\n          _this2._abiCoder.encode([\"address\"], [value]);\n        }\n\n        return hexZeroPad(hexlify(value), 32);\n      };\n\n      values.forEach(function (value, index) {\n        var param = eventFragment.inputs[index];\n\n        if (!param.indexed) {\n          if (value != null) {\n            logger.throwArgumentError(\"cannot filter non-indexed parameters; must be null\", \"contract.\" + param.name, value);\n          }\n\n          return;\n        }\n\n        if (value == null) {\n          topics.push(null);\n        } else if (param.baseType === \"array\" || param.baseType === \"tuple\") {\n          logger.throwArgumentError(\"filtering with tuples or arrays not supported\", \"contract.\" + param.name, value);\n        } else if (Array.isArray(value)) {\n          topics.push(value.map(function (value) {\n            return encodeTopic(param, value);\n          }));\n        } else {\n          topics.push(encodeTopic(param, value));\n        }\n      }); // Trim off trailing nulls\n\n      while (topics.length && topics[topics.length - 1] === null) {\n        topics.pop();\n      }\n\n      return topics;\n    }\n  }, {\n    key: \"encodeEventLog\",\n    value: function encodeEventLog(eventFragment, values) {\n      var _this3 = this;\n\n      if (typeof eventFragment === \"string\") {\n        eventFragment = this.getEvent(eventFragment);\n      }\n\n      var topics = [];\n      var dataTypes = [];\n      var dataValues = [];\n\n      if (!eventFragment.anonymous) {\n        topics.push(this.getEventTopic(eventFragment));\n      }\n\n      if (values.length !== eventFragment.inputs.length) {\n        logger.throwArgumentError(\"event arguments/values mismatch\", \"values\", values);\n      }\n\n      eventFragment.inputs.forEach(function (param, index) {\n        var value = values[index];\n\n        if (param.indexed) {\n          if (param.type === \"string\") {\n            topics.push(id(value));\n          } else if (param.type === \"bytes\") {\n            topics.push(keccak256(value));\n          } else if (param.baseType === \"tuple\" || param.baseType === \"array\") {\n            // @TODO\n            throw new Error(\"not implemented\");\n          } else {\n            topics.push(_this3._abiCoder.encode([param.type], [value]));\n          }\n        } else {\n          dataTypes.push(param);\n          dataValues.push(value);\n        }\n      });\n      return {\n        data: this._abiCoder.encode(dataTypes, dataValues),\n        topics: topics\n      };\n    } // Decode a filter for the event and the search criteria\n\n  }, {\n    key: \"decodeEventLog\",\n    value: function decodeEventLog(eventFragment, data, topics) {\n      if (typeof eventFragment === \"string\") {\n        eventFragment = this.getEvent(eventFragment);\n      }\n\n      if (topics != null && !eventFragment.anonymous) {\n        var topicHash = this.getEventTopic(eventFragment);\n\n        if (!isHexString(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {\n          logger.throwError(\"fragment/topic mismatch\", Logger.errors.INVALID_ARGUMENT, {\n            argument: \"topics[0]\",\n            expected: topicHash,\n            value: topics[0]\n          });\n        }\n\n        topics = topics.slice(1);\n      }\n\n      var indexed = [];\n      var nonIndexed = [];\n      var dynamic = [];\n      eventFragment.inputs.forEach(function (param, index) {\n        if (param.indexed) {\n          if (param.type === \"string\" || param.type === \"bytes\" || param.baseType === \"tuple\" || param.baseType === \"array\") {\n            indexed.push(ParamType.fromObject({\n              type: \"bytes32\",\n              name: param.name\n            }));\n            dynamic.push(true);\n          } else {\n            indexed.push(param);\n            dynamic.push(false);\n          }\n        } else {\n          nonIndexed.push(param);\n          dynamic.push(false);\n        }\n      });\n      var resultIndexed = topics != null ? this._abiCoder.decode(indexed, concat(topics)) : null;\n\n      var resultNonIndexed = this._abiCoder.decode(nonIndexed, data, true);\n\n      var result = [];\n      var nonIndexedIndex = 0,\n          indexedIndex = 0;\n      eventFragment.inputs.forEach(function (param, index) {\n        if (param.indexed) {\n          if (resultIndexed == null) {\n            result[index] = new Indexed({\n              _isIndexed: true,\n              hash: null\n            });\n          } else if (dynamic[index]) {\n            result[index] = new Indexed({\n              _isIndexed: true,\n              hash: resultIndexed[indexedIndex++]\n            });\n          } else {\n            try {\n              result[index] = resultIndexed[indexedIndex++];\n            } catch (error) {\n              result[index] = error;\n            }\n          }\n        } else {\n          try {\n            result[index] = resultNonIndexed[nonIndexedIndex++];\n          } catch (error) {\n            result[index] = error;\n          }\n        } // Add the keyword argument if named and safe\n\n\n        if (param.name && result[param.name] == null) {\n          var value = result[index]; // Make error named values throw on access\n\n          if (value instanceof Error) {\n            Object.defineProperty(result, param.name, {\n              enumerable: true,\n              get: function get() {\n                throw wrapAccessError(\"property \".concat(JSON.stringify(param.name)), value);\n              }\n            });\n          } else {\n            result[param.name] = value;\n          }\n        }\n      }); // Make all error indexed values throw on access\n\n      var _loop = function _loop(i) {\n        var value = result[i];\n\n        if (value instanceof Error) {\n          Object.defineProperty(result, i, {\n            enumerable: true,\n            get: function get() {\n              throw wrapAccessError(\"index \".concat(i), value);\n            }\n          });\n        }\n      };\n\n      for (var i = 0; i < result.length; i++) {\n        _loop(i);\n      }\n\n      return Object.freeze(result);\n    } // Given a transaction, find the matching function fragment (if any) and\n    // determine all its properties and call parameters\n\n  }, {\n    key: \"parseTransaction\",\n    value: function parseTransaction(tx) {\n      var fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase());\n\n      if (!fragment) {\n        return null;\n      }\n\n      return new TransactionDescription({\n        args: this._abiCoder.decode(fragment.inputs, \"0x\" + tx.data.substring(10)),\n        functionFragment: fragment,\n        name: fragment.name,\n        signature: fragment.format(),\n        sighash: this.getSighash(fragment),\n        value: BigNumber.from(tx.value || \"0\")\n      });\n    } // @TODO\n    //parseCallResult(data: BytesLike): ??\n    // Given an event log, find the matching event fragment (if any) and\n    // determine all its properties and values\n\n  }, {\n    key: \"parseLog\",\n    value: function parseLog(log) {\n      var fragment = this.getEvent(log.topics[0]);\n\n      if (!fragment || fragment.anonymous) {\n        return null;\n      } // @TODO: If anonymous, and the only method, and the input count matches, should we parse?\n      //        Probably not, because just because it is the only event in the ABI does\n      //        not mean we have the full ABI; maybe just a fragment?\n\n\n      return new LogDescription({\n        eventFragment: fragment,\n        name: fragment.name,\n        signature: fragment.format(),\n        topic: this.getEventTopic(fragment),\n        args: this.decodeEventLog(fragment, log.data, log.topics)\n      });\n    }\n  }, {\n    key: \"parseError\",\n    value: function parseError(data) {\n      var hexData = hexlify(data);\n      var fragment = this.getError(hexData.substring(0, 10).toLowerCase());\n\n      if (!fragment) {\n        return null;\n      }\n\n      return new ErrorDescription({\n        args: this._abiCoder.decode(fragment.inputs, \"0x\" + hexData.substring(10)),\n        errorFragment: fragment,\n        name: fragment.name,\n        signature: fragment.format(),\n        sighash: this.getSighash(fragment)\n      });\n    }\n    /*\n    static from(value: Array<Fragment | string | JsonAbi> | string | Interface) {\n        if (Interface.isInterface(value)) {\n            return value;\n        }\n        if (typeof(value) === \"string\") {\n            return new Interface(JSON.parse(value));\n        }\n        return new Interface(value);\n    }\n    */\n\n  }], [{\n    key: \"getAbiCoder\",\n    value: function getAbiCoder() {\n      return defaultAbiCoder;\n    }\n  }, {\n    key: \"getAddress\",\n    value: function getAddress(address) {\n      return _getAddress(address);\n    }\n  }, {\n    key: \"getSighash\",\n    value: function getSighash(fragment) {\n      return hexDataSlice(id(fragment.format()), 0, 4);\n    }\n  }, {\n    key: \"getEventTopic\",\n    value: function getEventTopic(eventFragment) {\n      return id(eventFragment.format());\n    }\n  }, {\n    key: \"isInterface\",\n    value: function isInterface(value) {\n      return !!(value && value._isInterface);\n    }\n  }]);\n\n  return Interface;\n}();","map":{"version":3,"mappings":"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","names":["getAddress","BigNumber","arrayify","concat","hexDataSlice","hexlify","hexZeroPad","isHexString","id","keccak256","defineReadOnly","Description","getStatic","defaultAbiCoder","checkResultErrors","ConstructorFragment","EventFragment","FormatTypes","Fragment","FunctionFragment","ParamType","Logger","version","logger","LogDescription","TransactionDescription","ErrorDescription","Indexed","value","_isIndexed","BuiltinErrors","signature","name","inputs","reason","wrapAccessError","property","error","wrap","Error","Interface","fragments","abi","JSON","parse","map","fragment","from","filter","forEach","bucket","type","deploy","warn","functions","events","errors","format","payable","full","sighash","throwArgumentError","json","stringify","j","nameOrSignatureOrSighash","getSighash","indexOf","trim","matching","Object","keys","f","split","length","result","fromString","nameOrSignatureOrTopic","topichash","toLowerCase","getEventTopic","constructor","getFunction","getError","_","eventFragment","getEvent","params","data","_abiCoder","decode","values","encode","_encodeParams","bytes","slice","_decodeParams","functionFragment","message","errorArgs","errorName","errorSignature","_getWordSize","outputs","selector","builtin","throwError","CALL_EXCEPTION","method","UNEXPECTED_ARGUMENT","argument","topics","anonymous","push","encodeTopic","param","match","toHexString","index","indexed","baseType","Array","isArray","pop","dataTypes","dataValues","topicHash","INVALID_ARGUMENT","expected","nonIndexed","dynamic","fromObject","resultIndexed","resultNonIndexed","nonIndexedIndex","indexedIndex","hash","defineProperty","enumerable","get","i","freeze","tx","substring","args","log","topic","decodeEventLog","hexData","errorFragment","address","_isInterface"],"sources":["C:\\Users\\kiril\\Desktop\\newenvai\\client\\node_modules\\@ethersproject\\abi\\src.ts\\interface.ts"],"sourcesContent":["\"use strict\";\n\nimport { getAddress } from \"@ethersproject/address\";\nimport { BigNumber, BigNumberish } from \"@ethersproject/bignumber\";\nimport { arrayify, BytesLike, concat, hexDataSlice, hexlify, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { id } from \"@ethersproject/hash\";\nimport { keccak256 } from \"@ethersproject/keccak256\"\nimport { defineReadOnly, Description, getStatic } from \"@ethersproject/properties\";\n\nimport { AbiCoder, defaultAbiCoder } from \"./abi-coder\";\nimport { checkResultErrors, Result } from \"./coders/abstract-coder\";\nimport { ConstructorFragment, ErrorFragment, EventFragment, FormatTypes, Fragment, FunctionFragment, JsonFragment, ParamType } from \"./fragments\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nexport { checkResultErrors, Result };\n\nexport class LogDescription extends Description<LogDescription> {\n    readonly eventFragment: EventFragment;\n    readonly name: string;\n    readonly signature: string;\n    readonly topic: string;\n    readonly args: Result\n}\n\nexport class TransactionDescription extends Description<TransactionDescription> {\n    readonly functionFragment: FunctionFragment;\n    readonly name: string;\n    readonly args: Result;\n    readonly signature: string;\n    readonly sighash: string;\n    readonly value: BigNumber;\n}\n\nexport class ErrorDescription extends Description<ErrorDescription> {\n    readonly errorFragment: ErrorFragment;\n    readonly name: string;\n    readonly args: Result;\n    readonly signature: string;\n    readonly sighash: string;\n}\n\nexport class Indexed extends Description<Indexed> {\n    readonly hash: string;\n    readonly _isIndexed: boolean;\n\n    static isIndexed(value: any): value is Indexed {\n        return !!(value && value._isIndexed);\n    }\n}\n\nconst BuiltinErrors: Record<string, { signature: string, inputs: Array<string>, name: string, reason?: boolean }> = {\n    \"0x08c379a0\": { signature: \"Error(string)\", name: \"Error\", inputs: [ \"string\" ], reason: true },\n    \"0x4e487b71\": { signature: \"Panic(uint256)\", name: \"Panic\", inputs: [ \"uint256\" ] }\n}\n\nfunction wrapAccessError(property: string, error: Error): Error {\n    const wrap = new Error(`deferred error during ABI decoding triggered accessing ${ property }`);\n    (<any>wrap).error = error;\n    return wrap;\n}\n\n/*\nfunction checkNames(fragment: Fragment, type: \"input\" | \"output\", params: Array<ParamType>): void {\n    params.reduce((accum, param) => {\n        if (param.name) {\n            if (accum[param.name]) {\n                logger.throwArgumentError(`duplicate ${ type } parameter ${ JSON.stringify(param.name) } in ${ fragment.format(\"full\") }`, \"fragment\", fragment);\n            }\n            accum[param.name] = true;\n        }\n        return accum;\n    }, <{ [ name: string ]: boolean }>{ });\n}\n*/\nexport class Interface {\n    readonly fragments: ReadonlyArray<Fragment>;\n\n    readonly errors: { [ name: string ]: ErrorFragment };\n    readonly events: { [ name: string ]: EventFragment };\n    readonly functions: { [ name: string ]: FunctionFragment };\n    readonly structs: { [ name: string ]: any };\n\n    readonly deploy: ConstructorFragment;\n\n    readonly _abiCoder: AbiCoder;\n\n    readonly _isInterface: boolean;\n\n    constructor(fragments: string | ReadonlyArray<Fragment | JsonFragment | string>) {\n        let abi: ReadonlyArray<Fragment | JsonFragment | string> = [ ];\n        if (typeof(fragments) === \"string\") {\n            abi = JSON.parse(fragments);\n        } else {\n            abi = fragments;\n        }\n\n        defineReadOnly(this, \"fragments\", abi.map((fragment) => {\n            return Fragment.from(fragment);\n        }).filter((fragment) => (fragment != null)));\n\n        defineReadOnly(this, \"_abiCoder\", getStatic<() => AbiCoder>(new.target, \"getAbiCoder\")());\n\n        defineReadOnly(this, \"functions\", { });\n        defineReadOnly(this, \"errors\", { });\n        defineReadOnly(this, \"events\", { });\n        defineReadOnly(this, \"structs\", { });\n\n        // Add all fragments by their signature\n        this.fragments.forEach((fragment) => {\n            let bucket: { [ name: string ]: Fragment } = null;\n            switch (fragment.type) {\n                case \"constructor\":\n                    if (this.deploy) {\n                        logger.warn(\"duplicate definition - constructor\");\n                        return;\n                    }\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    defineReadOnly(this, \"deploy\", <ConstructorFragment>fragment);\n                    return;\n                case \"function\":\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    //checkNames(fragment, \"output\", (<FunctionFragment>fragment).outputs);\n                    bucket = this.functions;\n                    break;\n                case \"event\":\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    bucket = this.events;\n                    break;\n                case \"error\":\n                    bucket = this.errors;\n                    break;\n                default:\n                    return;\n            }\n\n            let signature = fragment.format();\n            if (bucket[signature]) {\n                logger.warn(\"duplicate definition - \" + signature);\n                return;\n            }\n\n            bucket[signature] = fragment;\n        });\n\n        // If we do not have a constructor add a default\n        if (!this.deploy) {\n            defineReadOnly(this, \"deploy\", ConstructorFragment.from({\n                payable: false,\n                type: \"constructor\"\n            }));\n        }\n\n        defineReadOnly(this, \"_isInterface\", true);\n    }\n\n    format(format?: string): string | Array<string> {\n        if (!format) { format = FormatTypes.full; }\n        if (format === FormatTypes.sighash) {\n            logger.throwArgumentError(\"interface does not support formatting sighash\", \"format\", format);\n        }\n\n        const abi = this.fragments.map((fragment) => fragment.format(format));\n\n        // We need to re-bundle the JSON fragments a bit\n        if (format === FormatTypes.json) {\n             return JSON.stringify(abi.map((j) => JSON.parse(j)));\n        }\n\n        return abi;\n    }\n\n    // Sub-classes can override these to handle other blockchains\n    static getAbiCoder(): AbiCoder {\n        return defaultAbiCoder;\n    }\n\n    static getAddress(address: string): string {\n        return getAddress(address);\n    }\n\n    static getSighash(fragment: ErrorFragment | FunctionFragment): string {\n        return hexDataSlice(id(fragment.format()), 0, 4);\n    }\n\n    static getEventTopic(eventFragment: EventFragment): string {\n        return id(eventFragment.format());\n    }\n\n    // Find a function definition by any means necessary (unless it is ambiguous)\n    getFunction(nameOrSignatureOrSighash: string): FunctionFragment {\n        if (isHexString(nameOrSignatureOrSighash)) {\n            for (const name in this.functions) {\n                if (nameOrSignatureOrSighash === this.getSighash(name)) {\n                    return this.functions[name];\n                }\n            }\n            logger.throwArgumentError(\"no matching function\", \"sighash\", nameOrSignatureOrSighash);\n        }\n\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n            const name = nameOrSignatureOrSighash.trim();\n            const matching = Object.keys(this.functions).filter((f) => (f.split(\"(\"/* fix:) */)[0] === name));\n            if (matching.length === 0) {\n                logger.throwArgumentError(\"no matching function\", \"name\", name);\n            } else if (matching.length > 1) {\n                logger.throwArgumentError(\"multiple matching functions\", \"name\", name);\n            }\n\n            return this.functions[matching[0]];\n        }\n\n        // Normalize the signature and lookup the function\n        const result = this.functions[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n        if (!result) {\n            logger.throwArgumentError(\"no matching function\", \"signature\", nameOrSignatureOrSighash);\n        }\n        return result;\n    }\n\n    // Find an event definition by any means necessary (unless it is ambiguous)\n    getEvent(nameOrSignatureOrTopic: string): EventFragment {\n        if (isHexString(nameOrSignatureOrTopic)) {\n            const topichash = nameOrSignatureOrTopic.toLowerCase();\n            for (const name in this.events) {\n                if (topichash === this.getEventTopic(name)) {\n                    return this.events[name];\n                }\n            }\n            logger.throwArgumentError(\"no matching event\", \"topichash\", topichash);\n        }\n\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (nameOrSignatureOrTopic.indexOf(\"(\") === -1) {\n            const name = nameOrSignatureOrTopic.trim();\n            const matching = Object.keys(this.events).filter((f) => (f.split(\"(\"/* fix:) */)[0] === name));\n            if (matching.length === 0) {\n                logger.throwArgumentError(\"no matching event\", \"name\", name);\n            } else if (matching.length > 1) {\n                logger.throwArgumentError(\"multiple matching events\", \"name\", name);\n            }\n\n            return this.events[matching[0]];\n        }\n\n        // Normalize the signature and lookup the function\n        const result = this.events[EventFragment.fromString(nameOrSignatureOrTopic).format()];\n        if (!result) {\n            logger.throwArgumentError(\"no matching event\", \"signature\", nameOrSignatureOrTopic);\n        }\n        return result;\n    }\n\n    // Find a function definition by any means necessary (unless it is ambiguous)\n    getError(nameOrSignatureOrSighash: string): ErrorFragment {\n        if (isHexString(nameOrSignatureOrSighash)) {\n            const getSighash = getStatic<(f: ErrorFragment | FunctionFragment) => string>(this.constructor, \"getSighash\");\n            for (const name in this.errors) {\n                const error = this.errors[name];\n                if (nameOrSignatureOrSighash === getSighash(error)) {\n                    return this.errors[name];\n                }\n            }\n            logger.throwArgumentError(\"no matching error\", \"sighash\", nameOrSignatureOrSighash);\n        }\n\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n            const name = nameOrSignatureOrSighash.trim();\n            const matching = Object.keys(this.errors).filter((f) => (f.split(\"(\"/* fix:) */)[0] === name));\n            if (matching.length === 0) {\n                logger.throwArgumentError(\"no matching error\", \"name\", name);\n            } else if (matching.length > 1) {\n                logger.throwArgumentError(\"multiple matching errors\", \"name\", name);\n            }\n\n            return this.errors[matching[0]];\n        }\n\n        // Normalize the signature and lookup the function\n        const result = this.errors[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n        if (!result) {\n            logger.throwArgumentError(\"no matching error\", \"signature\", nameOrSignatureOrSighash);\n        }\n        return result;\n    }\n\n    // Get the sighash (the bytes4 selector) used by Solidity to identify a function\n    getSighash(fragment: ErrorFragment | FunctionFragment | string): string {\n        if (typeof(fragment) === \"string\") {\n            try {\n                fragment = this.getFunction(fragment);\n            } catch (error) {\n                try {\n                    fragment = this.getError(<string>fragment);\n                } catch (_) {\n                    throw error;\n                }\n            }\n        }\n\n        return getStatic<(f: ErrorFragment | FunctionFragment) => string>(this.constructor, \"getSighash\")(fragment);\n    }\n\n    // Get the topic (the bytes32 hash) used by Solidity to identify an event\n    getEventTopic(eventFragment: EventFragment | string): string {\n        if (typeof(eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n\n        return getStatic<(e: EventFragment) => string>(this.constructor, \"getEventTopic\")(eventFragment);\n    }\n\n\n    _decodeParams(params: ReadonlyArray<ParamType>, data: BytesLike): Result {\n        return this._abiCoder.decode(params, data)\n    }\n\n    _encodeParams(params: ReadonlyArray<ParamType>, values: ReadonlyArray<any>): string {\n        return this._abiCoder.encode(params, values)\n    }\n\n    encodeDeploy(values?: ReadonlyArray<any>): string {\n        return this._encodeParams(this.deploy.inputs, values || [ ]);\n    }\n\n    decodeErrorResult(fragment: ErrorFragment | string, data: BytesLike): Result {\n        if (typeof(fragment) === \"string\") {\n            fragment = this.getError(fragment);\n        }\n\n        const bytes = arrayify(data);\n\n        if (hexlify(bytes.slice(0, 4)) !== this.getSighash(fragment)) {\n            logger.throwArgumentError(`data signature does not match error ${ fragment.name }.`, \"data\", hexlify(bytes));\n        }\n\n        return this._decodeParams(fragment.inputs, bytes.slice(4));\n    }\n\n    encodeErrorResult(fragment: ErrorFragment | string, values?: ReadonlyArray<any>): string {\n        if (typeof(fragment) === \"string\") {\n            fragment = this.getError(fragment);\n        }\n\n        return hexlify(concat([\n            this.getSighash(fragment),\n            this._encodeParams(fragment.inputs, values || [ ])\n        ]));\n    }\n\n    // Decode the data for a function call (e.g. tx.data)\n    decodeFunctionData(functionFragment: FunctionFragment | string, data: BytesLike): Result {\n        if (typeof(functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n\n        const bytes = arrayify(data);\n\n        if (hexlify(bytes.slice(0, 4)) !== this.getSighash(functionFragment)) {\n            logger.throwArgumentError(`data signature does not match function ${ functionFragment.name }.`, \"data\", hexlify(bytes));\n        }\n\n        return this._decodeParams(functionFragment.inputs, bytes.slice(4));\n    }\n\n    // Encode the data for a function call (e.g. tx.data)\n    encodeFunctionData(functionFragment: FunctionFragment | string, values?: ReadonlyArray<any>): string {\n        if (typeof(functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n\n        return hexlify(concat([\n            this.getSighash(functionFragment),\n            this._encodeParams(functionFragment.inputs, values || [ ])\n        ]));\n    }\n\n    // Decode the result from a function call (e.g. from eth_call)\n    decodeFunctionResult(functionFragment: FunctionFragment | string, data: BytesLike): Result {\n        if (typeof(functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n\n        let bytes = arrayify(data);\n\n        let reason: string = null;\n        let message = \"\";\n        let errorArgs: Result = null;\n        let errorName: string = null;\n        let errorSignature: string = null;\n        switch (bytes.length % this._abiCoder._getWordSize()) {\n            case 0:\n                try {\n                    return this._abiCoder.decode(functionFragment.outputs, bytes);\n                } catch (error) { }\n                break;\n\n            case 4: {\n                const selector = hexlify(bytes.slice(0, 4));\n                const builtin = BuiltinErrors[selector];\n                if (builtin) {\n                    errorArgs = this._abiCoder.decode(builtin.inputs, bytes.slice(4));\n                    errorName = builtin.name;\n                    errorSignature = builtin.signature;\n                    if (builtin.reason) { reason = errorArgs[0]; }\n                    if (errorName === \"Error\") {\n                        message = `; VM Exception while processing transaction: reverted with reason string ${ JSON.stringify(errorArgs[0]) }`;\n                    } else if (errorName === \"Panic\") {\n                        message = `; VM Exception while processing transaction: reverted with panic code ${ errorArgs[0] }`;\n                    }\n                } else {\n                    try {\n                        const error = this.getError(selector);\n                        errorArgs = this._abiCoder.decode(error.inputs, bytes.slice(4));\n                        errorName = error.name;\n                        errorSignature = error.format();\n                    } catch (error) { }\n                }\n                break;\n            }\n        }\n\n        return logger.throwError(\"call revert exception\" + message, Logger.errors.CALL_EXCEPTION, {\n            method: functionFragment.format(),\n            data: hexlify(data), errorArgs, errorName, errorSignature, reason\n        });\n    }\n\n    // Encode the result for a function call (e.g. for eth_call)\n    encodeFunctionResult(functionFragment: FunctionFragment | string, values?: ReadonlyArray<any>): string {\n        if (typeof(functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n\n        return hexlify(this._abiCoder.encode(functionFragment.outputs, values || [ ]));\n    }\n\n    // Create the filter for the event with search criteria (e.g. for eth_filterLog)\n    encodeFilterTopics(eventFragment: EventFragment, values: ReadonlyArray<any>): Array<string | Array<string>> {\n        if (typeof(eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n\n        if (values.length > eventFragment.inputs.length) {\n            logger.throwError(\"too many arguments for \" + eventFragment.format(), Logger.errors.UNEXPECTED_ARGUMENT, {\n                argument: \"values\",\n                value: values\n            })\n        }\n\n        let topics: Array<string | Array<string>> = [];\n        if (!eventFragment.anonymous) { topics.push(this.getEventTopic(eventFragment)); }\n\n        const encodeTopic = (param: ParamType, value: any): string => {\n            if (param.type === \"string\") {\n                 return id(value);\n            } else if (param.type === \"bytes\") {\n                 return keccak256(hexlify(value));\n            }\n\n            if (param.type === \"bool\" && typeof(value) === \"boolean\") {\n                value = (value ? \"0x01\": \"0x00\");\n            }\n\n            if (param.type.match(/^u?int/)) {\n                value = BigNumber.from(value).toHexString();\n            }\n\n            // Check addresses are valid\n            if (param.type === \"address\") { this._abiCoder.encode( [ \"address\" ], [ value ]); }\n            return hexZeroPad(hexlify(value), 32);\n        };\n\n        values.forEach((value, index) => {\n\n            let param = eventFragment.inputs[index];\n\n            if (!param.indexed) {\n                if (value != null) {\n                    logger.throwArgumentError(\"cannot filter non-indexed parameters; must be null\", (\"contract.\" + param.name), value);\n                }\n                return;\n            }\n\n            if (value == null) {\n                topics.push(null);\n            } else if (param.baseType === \"array\" || param.baseType === \"tuple\") {\n                logger.throwArgumentError(\"filtering with tuples or arrays not supported\", (\"contract.\" + param.name), value);\n            } else if (Array.isArray(value)) {\n                topics.push(value.map((value) => encodeTopic(param, value)));\n            } else {\n                topics.push(encodeTopic(param, value));\n            }\n        });\n\n        // Trim off trailing nulls\n        while (topics.length && topics[topics.length - 1] === null) {\n            topics.pop();\n        }\n\n        return topics;\n    }\n\n    encodeEventLog(eventFragment: EventFragment, values: ReadonlyArray<any>): { data: string, topics: Array<string> } {\n        if (typeof(eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n\n        const topics: Array<string> = [ ];\n\n        const dataTypes: Array<ParamType> = [ ];\n        const dataValues: Array<string> = [ ];\n\n        if (!eventFragment.anonymous) {\n            topics.push(this.getEventTopic(eventFragment));\n        }\n\n        if (values.length !== eventFragment.inputs.length) {\n            logger.throwArgumentError(\"event arguments/values mismatch\", \"values\", values);\n        }\n\n        eventFragment.inputs.forEach((param, index) => {\n            const value = values[index];\n            if (param.indexed) {\n                if (param.type === \"string\") {\n                    topics.push(id(value))\n                } else if (param.type === \"bytes\") {\n                    topics.push(keccak256(value))\n                } else if (param.baseType === \"tuple\" || param.baseType === \"array\") {\n                    // @TODO\n                    throw new Error(\"not implemented\");\n                } else {\n                    topics.push(this._abiCoder.encode([ param.type] , [ value ]));\n                }\n            } else {\n                dataTypes.push(param);\n                dataValues.push(value);\n            }\n        });\n\n        return {\n            data: this._abiCoder.encode(dataTypes , dataValues),\n            topics: topics\n        };\n    }\n\n    // Decode a filter for the event and the search criteria\n    decodeEventLog(eventFragment: EventFragment | string, data: BytesLike, topics?: ReadonlyArray<string>): Result {\n        if (typeof(eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n\n        if (topics != null && !eventFragment.anonymous) {\n            let topicHash = this.getEventTopic(eventFragment);\n            if (!isHexString(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {\n                logger.throwError(\"fragment/topic mismatch\", Logger.errors.INVALID_ARGUMENT, { argument: \"topics[0]\", expected: topicHash, value: topics[0] });\n            }\n            topics = topics.slice(1);\n        }\n\n        let indexed: Array<ParamType> = [];\n        let nonIndexed: Array<ParamType> = [];\n        let dynamic: Array<boolean> = [];\n\n        eventFragment.inputs.forEach((param, index) => {\n            if (param.indexed) {\n                if (param.type === \"string\" || param.type === \"bytes\" || param.baseType === \"tuple\" || param.baseType === \"array\") {\n                    indexed.push(ParamType.fromObject({ type: \"bytes32\", name: param.name }));\n                    dynamic.push(true);\n                } else {\n                    indexed.push(param);\n                    dynamic.push(false);\n                }\n            } else {\n                nonIndexed.push(param);\n                dynamic.push(false);\n            }\n        });\n\n        let resultIndexed = (topics != null) ? this._abiCoder.decode(indexed, concat(topics)): null;\n        let resultNonIndexed = this._abiCoder.decode(nonIndexed, data, true);\n\n        let result: (Array<any> & { [ key: string ]: any }) = [ ];\n        let nonIndexedIndex = 0, indexedIndex = 0;\n        eventFragment.inputs.forEach((param, index) => {\n            if (param.indexed) {\n                if (resultIndexed == null) {\n                    result[index] = new Indexed({ _isIndexed: true, hash: null });\n\n                } else if (dynamic[index]) {\n                    result[index] = new Indexed({ _isIndexed: true, hash: resultIndexed[indexedIndex++] });\n\n                } else {\n                    try {\n                        result[index] = resultIndexed[indexedIndex++];\n                    } catch (error) {\n                        result[index] = error;\n                    }\n                }\n            } else {\n                try {\n                    result[index] = resultNonIndexed[nonIndexedIndex++];\n                } catch (error) {\n                    result[index] = error;\n                }\n            }\n\n            // Add the keyword argument if named and safe\n            if (param.name && result[param.name] == null) {\n                const value = result[index];\n\n                // Make error named values throw on access\n                if (value instanceof Error) {\n                    Object.defineProperty(result, param.name, {\n                        enumerable: true,\n                        get: () => { throw wrapAccessError(`property ${ JSON.stringify(param.name) }`, value); }\n                    });\n                } else {\n                    result[param.name] = value;\n                }\n            }\n        });\n\n        // Make all error indexed values throw on access\n        for (let i = 0; i < result.length; i++) {\n            const value = result[i];\n            if (value instanceof Error) {\n                Object.defineProperty(result, i, {\n                    enumerable: true,\n                    get: () => { throw wrapAccessError(`index ${ i }`, value); }\n                });\n            }\n        }\n\n        return Object.freeze(result);\n    }\n\n    // Given a transaction, find the matching function fragment (if any) and\n    // determine all its properties and call parameters\n    parseTransaction(tx: { data: string, value?: BigNumberish }): TransactionDescription {\n        let fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase())\n\n        if (!fragment) { return null; }\n\n        return new TransactionDescription({\n            args: this._abiCoder.decode(fragment.inputs, \"0x\" + tx.data.substring(10)),\n            functionFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            sighash: this.getSighash(fragment),\n            value: BigNumber.from(tx.value || \"0\"),\n        });\n    }\n\n    // @TODO\n    //parseCallResult(data: BytesLike): ??\n\n    // Given an event log, find the matching event fragment (if any) and\n    // determine all its properties and values\n    parseLog(log: { topics: Array<string>, data: string}): LogDescription {\n        let fragment = this.getEvent(log.topics[0]);\n\n        if (!fragment || fragment.anonymous) { return null; }\n\n        // @TODO: If anonymous, and the only method, and the input count matches, should we parse?\n        //        Probably not, because just because it is the only event in the ABI does\n        //        not mean we have the full ABI; maybe just a fragment?\n\n\n       return new LogDescription({\n            eventFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            topic: this.getEventTopic(fragment),\n            args: this.decodeEventLog(fragment, log.data, log.topics)\n        });\n    }\n\n    parseError(data: BytesLike): ErrorDescription {\n        const hexData = hexlify(data);\n        let fragment = this.getError(hexData.substring(0, 10).toLowerCase())\n\n        if (!fragment) { return null; }\n\n        return new ErrorDescription({\n            args: this._abiCoder.decode(fragment.inputs, \"0x\" + hexData.substring(10)),\n            errorFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            sighash: this.getSighash(fragment),\n        });\n    }\n\n\n    /*\n    static from(value: Array<Fragment | string | JsonAbi> | string | Interface) {\n        if (Interface.isInterface(value)) {\n            return value;\n        }\n        if (typeof(value) === \"string\") {\n            return new Interface(JSON.parse(value));\n        }\n        return new Interface(value);\n    }\n    */\n\n    static isInterface(value: any): value is Interface {\n        return !!(value && value._isInterface);\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}