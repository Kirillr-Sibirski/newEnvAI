{"ast":null,"code":"\"use strict\";\n\nimport _get from \"C:/Users/kiril/Desktop/newenvai/client/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/kiril/Desktop/newenvai/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _regeneratorRuntime from \"C:/Users/kiril/Desktop/newenvai/client/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _classCallCheck from \"C:/Users/kiril/Desktop/newenvai/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/kiril/Desktop/newenvai/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"C:/Users/kiril/Desktop/newenvai/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"C:/Users/kiril/Desktop/newenvai/client/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/kiril/Desktop/newenvai/client/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { hexlify, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { _TypedDataEncoder } from \"@ethersproject/hash\";\nimport { checkProperties, deepCopy, defineReadOnly, getStatic, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport { accessListify } from \"@ethersproject/transactions\";\nimport { fetchJson, poll } from \"@ethersproject/web\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nimport { BaseProvider } from \"./base-provider\";\nvar errorGas = [\"call\", \"estimateGas\"];\n\nfunction spelunk(value, requireData) {\n  if (value == null) {\n    return null;\n  } // These *are* the droids we're looking for.\n\n\n  if (typeof value.message === \"string\" && value.message.match(\"reverted\")) {\n    var data = isHexString(value.data) ? value.data : null;\n\n    if (!requireData || data) {\n      return {\n        message: value.message,\n        data: data\n      };\n    }\n  } // Spelunk further...\n\n\n  if (typeof value === \"object\") {\n    for (var key in value) {\n      var result = spelunk(value[key], requireData);\n\n      if (result) {\n        return result;\n      }\n    }\n\n    return null;\n  } // Might be a JSON string we can further descend...\n\n\n  if (typeof value === \"string\") {\n    try {\n      return spelunk(JSON.parse(value), requireData);\n    } catch (error) {}\n  }\n\n  return null;\n}\n\nfunction checkError(method, error, params) {\n  var transaction = params.transaction || params.signedTransaction; // Undo the \"convenience\" some nodes are attempting to prevent backwards\n  // incompatibility; maybe for v6 consider forwarding reverts as errors\n\n  if (method === \"call\") {\n    var result = spelunk(error, true);\n\n    if (result) {\n      return result.data;\n    } // Nothing descriptive..\n\n\n    logger.throwError(\"missing revert data in call exception; Transaction reverted without a reason string\", Logger.errors.CALL_EXCEPTION, {\n      data: \"0x\",\n      transaction: transaction,\n      error: error\n    });\n  }\n\n  if (method === \"estimateGas\") {\n    // Try to find something, with a preference on SERVER_ERROR body\n    var _result = spelunk(error.body, false);\n\n    if (_result == null) {\n      _result = spelunk(error, false);\n    } // Found \"reverted\", this is a CALL_EXCEPTION\n\n\n    if (_result) {\n      logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n        reason: _result.message,\n        method: method,\n        transaction: transaction,\n        error: error\n      });\n    }\n  } // @TODO: Should we spelunk for message too?\n\n\n  var message = error.message;\n\n  if (error.code === Logger.errors.SERVER_ERROR && error.error && typeof error.error.message === \"string\") {\n    message = error.error.message;\n  } else if (typeof error.body === \"string\") {\n    message = error.body;\n  } else if (typeof error.responseText === \"string\") {\n    message = error.responseText;\n  }\n\n  message = (message || \"\").toLowerCase(); // \"insufficient funds for gas * price + value + cost(data)\"\n\n  if (message.match(/insufficient funds|base fee exceeds gas limit/i)) {\n    logger.throwError(\"insufficient funds for intrinsic transaction cost\", Logger.errors.INSUFFICIENT_FUNDS, {\n      error: error,\n      method: method,\n      transaction: transaction\n    });\n  } // \"nonce too low\"\n\n\n  if (message.match(/nonce (is )?too low/i)) {\n    logger.throwError(\"nonce has already been used\", Logger.errors.NONCE_EXPIRED, {\n      error: error,\n      method: method,\n      transaction: transaction\n    });\n  } // \"replacement transaction underpriced\"\n\n\n  if (message.match(/replacement transaction underpriced|transaction gas price.*too low/i)) {\n    logger.throwError(\"replacement fee too low\", Logger.errors.REPLACEMENT_UNDERPRICED, {\n      error: error,\n      method: method,\n      transaction: transaction\n    });\n  } // \"replacement transaction underpriced\"\n\n\n  if (message.match(/only replay-protected/i)) {\n    logger.throwError(\"legacy pre-eip-155 transactions not supported\", Logger.errors.UNSUPPORTED_OPERATION, {\n      error: error,\n      method: method,\n      transaction: transaction\n    });\n  }\n\n  if (errorGas.indexOf(method) >= 0 && message.match(/gas required exceeds allowance|always failing transaction|execution reverted/)) {\n    logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n      error: error,\n      method: method,\n      transaction: transaction\n    });\n  }\n\n  throw error;\n}\n\nfunction timer(timeout) {\n  return new Promise(function (resolve) {\n    setTimeout(resolve, timeout);\n  });\n}\n\nfunction getResult(payload) {\n  if (payload.error) {\n    // @TODO: not any\n    var error = new Error(payload.error.message);\n    error.code = payload.error.code;\n    error.data = payload.error.data;\n    throw error;\n  }\n\n  return payload.result;\n}\n\nfunction getLowerCase(value) {\n  if (value) {\n    return value.toLowerCase();\n  }\n\n  return value;\n}\n\nvar _constructorGuard = {};\nexport var JsonRpcSigner = /*#__PURE__*/function (_Signer) {\n  _inherits(JsonRpcSigner, _Signer);\n\n  var _super = _createSuper(JsonRpcSigner);\n\n  function JsonRpcSigner(constructorGuard, provider, addressOrIndex) {\n    var _this;\n\n    _classCallCheck(this, JsonRpcSigner);\n\n    _this = _super.call(this);\n\n    if (constructorGuard !== _constructorGuard) {\n      throw new Error(\"do not call the JsonRpcSigner constructor directly; use provider.getSigner\");\n    }\n\n    defineReadOnly(_assertThisInitialized(_this), \"provider\", provider);\n\n    if (addressOrIndex == null) {\n      addressOrIndex = 0;\n    }\n\n    if (typeof addressOrIndex === \"string\") {\n      defineReadOnly(_assertThisInitialized(_this), \"_address\", _this.provider.formatter.address(addressOrIndex));\n      defineReadOnly(_assertThisInitialized(_this), \"_index\", null);\n    } else if (typeof addressOrIndex === \"number\") {\n      defineReadOnly(_assertThisInitialized(_this), \"_index\", addressOrIndex);\n      defineReadOnly(_assertThisInitialized(_this), \"_address\", null);\n    } else {\n      logger.throwArgumentError(\"invalid address or index\", \"addressOrIndex\", addressOrIndex);\n    }\n\n    return _this;\n  }\n\n  _createClass(JsonRpcSigner, [{\n    key: \"connect\",\n    value: function connect(provider) {\n      return logger.throwError(\"cannot alter JSON-RPC Signer connection\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"connect\"\n      });\n    }\n  }, {\n    key: \"connectUnchecked\",\n    value: function connectUnchecked() {\n      return new UncheckedJsonRpcSigner(_constructorGuard, this.provider, this._address || this._index);\n    }\n  }, {\n    key: \"getAddress\",\n    value: function getAddress() {\n      var _this2 = this;\n\n      if (this._address) {\n        return Promise.resolve(this._address);\n      }\n\n      return this.provider.send(\"eth_accounts\", []).then(function (accounts) {\n        if (accounts.length <= _this2._index) {\n          logger.throwError(\"unknown account #\" + _this2._index, Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"getAddress\"\n          });\n        }\n\n        return _this2.provider.formatter.address(accounts[_this2._index]);\n      });\n    }\n  }, {\n    key: \"sendUncheckedTransaction\",\n    value: function sendUncheckedTransaction(transaction) {\n      var _this3 = this;\n\n      transaction = shallowCopy(transaction);\n      var fromAddress = this.getAddress().then(function (address) {\n        if (address) {\n          address = address.toLowerCase();\n        }\n\n        return address;\n      }); // The JSON-RPC for eth_sendTransaction uses 90000 gas; if the user\n      // wishes to use this, it is easy to specify explicitly, otherwise\n      // we look it up for them.\n\n      if (transaction.gasLimit == null) {\n        var estimate = shallowCopy(transaction);\n        estimate.from = fromAddress;\n        transaction.gasLimit = this.provider.estimateGas(estimate);\n      }\n\n      if (transaction.to != null) {\n        transaction.to = Promise.resolve(transaction.to).then(function (to) {\n          return __awaiter(_this3, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n            var address;\n            return _regeneratorRuntime().wrap(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    if (!(to == null)) {\n                      _context.next = 2;\n                      break;\n                    }\n\n                    return _context.abrupt(\"return\", null);\n\n                  case 2:\n                    _context.next = 4;\n                    return this.provider.resolveName(to);\n\n                  case 4:\n                    address = _context.sent;\n\n                    if (address == null) {\n                      logger.throwArgumentError(\"provided ENS name resolves to null\", \"tx.to\", to);\n                    }\n\n                    return _context.abrupt(\"return\", address);\n\n                  case 7:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _callee, this);\n          }));\n        });\n      }\n\n      return resolveProperties({\n        tx: resolveProperties(transaction),\n        sender: fromAddress\n      }).then(function (_ref) {\n        var tx = _ref.tx,\n            sender = _ref.sender;\n\n        if (tx.from != null) {\n          if (tx.from.toLowerCase() !== sender) {\n            logger.throwArgumentError(\"from address mismatch\", \"transaction\", transaction);\n          }\n        } else {\n          tx.from = sender;\n        }\n\n        var hexTx = _this3.provider.constructor.hexlifyTransaction(tx, {\n          from: true\n        });\n\n        return _this3.provider.send(\"eth_sendTransaction\", [hexTx]).then(function (hash) {\n          return hash;\n        }, function (error) {\n          return checkError(\"sendTransaction\", error, hexTx);\n        });\n      });\n    }\n  }, {\n    key: \"signTransaction\",\n    value: function signTransaction(transaction) {\n      return logger.throwError(\"signing transactions is unsupported\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"signTransaction\"\n      });\n    }\n  }, {\n    key: \"sendTransaction\",\n    value: function sendTransaction(transaction) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var _this4 = this;\n\n        var blockNumber, hash;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.provider._getInternalBlockNumber(100 + 2 * this.provider.pollingInterval);\n\n              case 2:\n                blockNumber = _context3.sent;\n                _context3.next = 5;\n                return this.sendUncheckedTransaction(transaction);\n\n              case 5:\n                hash = _context3.sent;\n                _context3.prev = 6;\n                _context3.next = 9;\n                return poll(function () {\n                  return __awaiter(_this4, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n                    var tx;\n                    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n                      while (1) {\n                        switch (_context2.prev = _context2.next) {\n                          case 0:\n                            _context2.next = 2;\n                            return this.provider.getTransaction(hash);\n\n                          case 2:\n                            tx = _context2.sent;\n\n                            if (!(tx === null)) {\n                              _context2.next = 5;\n                              break;\n                            }\n\n                            return _context2.abrupt(\"return\", undefined);\n\n                          case 5:\n                            return _context2.abrupt(\"return\", this.provider._wrapTransaction(tx, hash, blockNumber));\n\n                          case 6:\n                          case \"end\":\n                            return _context2.stop();\n                        }\n                      }\n                    }, _callee2, this);\n                  }));\n                }, {\n                  oncePoll: this.provider\n                });\n\n              case 9:\n                return _context3.abrupt(\"return\", _context3.sent);\n\n              case 12:\n                _context3.prev = 12;\n                _context3.t0 = _context3[\"catch\"](6);\n                _context3.t0.transactionHash = hash;\n                throw _context3.t0;\n\n              case 16:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[6, 12]]);\n      }));\n    }\n  }, {\n    key: \"signMessage\",\n    value: function signMessage(message) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var data, address;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                data = typeof message === \"string\" ? toUtf8Bytes(message) : message;\n                _context4.next = 3;\n                return this.getAddress();\n\n              case 3:\n                address = _context4.sent;\n                _context4.next = 6;\n                return this.provider.send(\"personal_sign\", [hexlify(data), address.toLowerCase()]);\n\n              case 6:\n                return _context4.abrupt(\"return\", _context4.sent);\n\n              case 7:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n    }\n  }, {\n    key: \"_legacySignMessage\",\n    value: function _legacySignMessage(message) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var data, address;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                data = typeof message === \"string\" ? toUtf8Bytes(message) : message;\n                _context5.next = 3;\n                return this.getAddress();\n\n              case 3:\n                address = _context5.sent;\n                _context5.next = 6;\n                return this.provider.send(\"eth_sign\", [address.toLowerCase(), hexlify(data)]);\n\n              case 6:\n                return _context5.abrupt(\"return\", _context5.sent);\n\n              case 7:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n    }\n  }, {\n    key: \"_signTypedData\",\n    value: function _signTypedData(domain, types, value) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        var _this5 = this;\n\n        var populated, address;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return _TypedDataEncoder.resolveNames(domain, types, value, function (name) {\n                  return _this5.provider.resolveName(name);\n                });\n\n              case 2:\n                populated = _context6.sent;\n                _context6.next = 5;\n                return this.getAddress();\n\n              case 5:\n                address = _context6.sent;\n                _context6.next = 8;\n                return this.provider.send(\"eth_signTypedData_v4\", [address.toLowerCase(), JSON.stringify(_TypedDataEncoder.getPayload(populated.domain, types, populated.value))]);\n\n              case 8:\n                return _context6.abrupt(\"return\", _context6.sent);\n\n              case 9:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n    }\n  }, {\n    key: \"unlock\",\n    value: function unlock(password) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n        var provider, address;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                provider = this.provider;\n                _context7.next = 3;\n                return this.getAddress();\n\n              case 3:\n                address = _context7.sent;\n                return _context7.abrupt(\"return\", provider.send(\"personal_unlockAccount\", [address.toLowerCase(), password, null]));\n\n              case 5:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n    }\n  }]);\n\n  return JsonRpcSigner;\n}(Signer);\n\nvar UncheckedJsonRpcSigner = /*#__PURE__*/function (_JsonRpcSigner) {\n  _inherits(UncheckedJsonRpcSigner, _JsonRpcSigner);\n\n  var _super2 = _createSuper(UncheckedJsonRpcSigner);\n\n  function UncheckedJsonRpcSigner() {\n    _classCallCheck(this, UncheckedJsonRpcSigner);\n\n    return _super2.apply(this, arguments);\n  }\n\n  _createClass(UncheckedJsonRpcSigner, [{\n    key: \"sendTransaction\",\n    value: function sendTransaction(transaction) {\n      var _this6 = this;\n\n      return this.sendUncheckedTransaction(transaction).then(function (hash) {\n        return {\n          hash: hash,\n          nonce: null,\n          gasLimit: null,\n          gasPrice: null,\n          data: null,\n          value: null,\n          chainId: null,\n          confirmations: 0,\n          from: null,\n          wait: function wait(confirmations) {\n            return _this6.provider.waitForTransaction(hash, confirmations);\n          }\n        };\n      });\n    }\n  }]);\n\n  return UncheckedJsonRpcSigner;\n}(JsonRpcSigner);\n\nvar allowedTransactionKeys = {\n  chainId: true,\n  data: true,\n  gasLimit: true,\n  gasPrice: true,\n  nonce: true,\n  to: true,\n  value: true,\n  type: true,\n  accessList: true,\n  maxFeePerGas: true,\n  maxPriorityFeePerGas: true\n};\nexport var JsonRpcProvider = /*#__PURE__*/function (_BaseProvider) {\n  _inherits(JsonRpcProvider, _BaseProvider);\n\n  var _super3 = _createSuper(JsonRpcProvider);\n\n  function JsonRpcProvider(url, network) {\n    var _this7;\n\n    _classCallCheck(this, JsonRpcProvider);\n\n    var networkOrReady = network; // The network is unknown, query the JSON-RPC for it\n\n    if (networkOrReady == null) {\n      networkOrReady = new Promise(function (resolve, reject) {\n        setTimeout(function () {\n          _this7.detectNetwork().then(function (network) {\n            resolve(network);\n          }, function (error) {\n            reject(error);\n          });\n        }, 0);\n      });\n    }\n\n    _this7 = _super3.call(this, networkOrReady); // Default URL\n\n    if (!url) {\n      url = getStatic(_this7.constructor, \"defaultUrl\")();\n    }\n\n    if (typeof url === \"string\") {\n      defineReadOnly(_assertThisInitialized(_this7), \"connection\", Object.freeze({\n        url: url\n      }));\n    } else {\n      defineReadOnly(_assertThisInitialized(_this7), \"connection\", Object.freeze(shallowCopy(url)));\n    }\n\n    _this7._nextId = 42;\n    return _this7;\n  }\n\n  _createClass(JsonRpcProvider, [{\n    key: \"_cache\",\n    get: function get() {\n      if (this._eventLoopCache == null) {\n        this._eventLoopCache = {};\n      }\n\n      return this._eventLoopCache;\n    }\n  }, {\n    key: \"detectNetwork\",\n    value: function detectNetwork() {\n      var _this8 = this;\n\n      if (!this._cache[\"detectNetwork\"]) {\n        this._cache[\"detectNetwork\"] = this._uncachedDetectNetwork(); // Clear this cache at the beginning of the next event loop\n\n        setTimeout(function () {\n          _this8._cache[\"detectNetwork\"] = null;\n        }, 0);\n      }\n\n      return this._cache[\"detectNetwork\"];\n    }\n  }, {\n    key: \"_uncachedDetectNetwork\",\n    value: function _uncachedDetectNetwork() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n        var chainId, getNetwork;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return timer(0);\n\n              case 2:\n                chainId = null;\n                _context8.prev = 3;\n                _context8.next = 6;\n                return this.send(\"eth_chainId\", []);\n\n              case 6:\n                chainId = _context8.sent;\n                _context8.next = 19;\n                break;\n\n              case 9:\n                _context8.prev = 9;\n                _context8.t0 = _context8[\"catch\"](3);\n                _context8.prev = 11;\n                _context8.next = 14;\n                return this.send(\"net_version\", []);\n\n              case 14:\n                chainId = _context8.sent;\n                _context8.next = 19;\n                break;\n\n              case 17:\n                _context8.prev = 17;\n                _context8.t1 = _context8[\"catch\"](11);\n\n              case 19:\n                if (!(chainId != null)) {\n                  _context8.next = 28;\n                  break;\n                }\n\n                getNetwork = getStatic(this.constructor, \"getNetwork\");\n                _context8.prev = 21;\n                return _context8.abrupt(\"return\", getNetwork(BigNumber.from(chainId).toNumber()));\n\n              case 25:\n                _context8.prev = 25;\n                _context8.t2 = _context8[\"catch\"](21);\n                return _context8.abrupt(\"return\", logger.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\n                  chainId: chainId,\n                  event: \"invalidNetwork\",\n                  serverError: _context8.t2\n                }));\n\n              case 28:\n                return _context8.abrupt(\"return\", logger.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\n                  event: \"noNetwork\"\n                }));\n\n              case 29:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this, [[3, 9], [11, 17], [21, 25]]);\n      }));\n    }\n  }, {\n    key: \"getSigner\",\n    value: function getSigner(addressOrIndex) {\n      return new JsonRpcSigner(_constructorGuard, this, addressOrIndex);\n    }\n  }, {\n    key: \"getUncheckedSigner\",\n    value: function getUncheckedSigner(addressOrIndex) {\n      return this.getSigner(addressOrIndex).connectUnchecked();\n    }\n  }, {\n    key: \"listAccounts\",\n    value: function listAccounts() {\n      var _this9 = this;\n\n      return this.send(\"eth_accounts\", []).then(function (accounts) {\n        return accounts.map(function (a) {\n          return _this9.formatter.address(a);\n        });\n      });\n    }\n  }, {\n    key: \"send\",\n    value: function send(method, params) {\n      var _this10 = this;\n\n      var request = {\n        method: method,\n        params: params,\n        id: this._nextId++,\n        jsonrpc: \"2.0\"\n      };\n      this.emit(\"debug\", {\n        action: \"request\",\n        request: deepCopy(request),\n        provider: this\n      }); // We can expand this in the future to any call, but for now these\n      // are the biggest wins and do not require any serializing parameters.\n\n      var cache = [\"eth_chainId\", \"eth_blockNumber\"].indexOf(method) >= 0;\n\n      if (cache && this._cache[method]) {\n        return this._cache[method];\n      }\n\n      var result = fetchJson(this.connection, JSON.stringify(request), getResult).then(function (result) {\n        _this10.emit(\"debug\", {\n          action: \"response\",\n          request: request,\n          response: result,\n          provider: _this10\n        });\n\n        return result;\n      }, function (error) {\n        _this10.emit(\"debug\", {\n          action: \"response\",\n          error: error,\n          request: request,\n          provider: _this10\n        });\n\n        throw error;\n      }); // Cache the fetch, but clear it on the next event loop\n\n      if (cache) {\n        this._cache[method] = result;\n        setTimeout(function () {\n          _this10._cache[method] = null;\n        }, 0);\n      }\n\n      return result;\n    }\n  }, {\n    key: \"prepareRequest\",\n    value: function prepareRequest(method, params) {\n      switch (method) {\n        case \"getBlockNumber\":\n          return [\"eth_blockNumber\", []];\n\n        case \"getGasPrice\":\n          return [\"eth_gasPrice\", []];\n\n        case \"getBalance\":\n          return [\"eth_getBalance\", [getLowerCase(params.address), params.blockTag]];\n\n        case \"getTransactionCount\":\n          return [\"eth_getTransactionCount\", [getLowerCase(params.address), params.blockTag]];\n\n        case \"getCode\":\n          return [\"eth_getCode\", [getLowerCase(params.address), params.blockTag]];\n\n        case \"getStorageAt\":\n          return [\"eth_getStorageAt\", [getLowerCase(params.address), hexZeroPad(params.position, 32), params.blockTag]];\n\n        case \"sendTransaction\":\n          return [\"eth_sendRawTransaction\", [params.signedTransaction]];\n\n        case \"getBlock\":\n          if (params.blockTag) {\n            return [\"eth_getBlockByNumber\", [params.blockTag, !!params.includeTransactions]];\n          } else if (params.blockHash) {\n            return [\"eth_getBlockByHash\", [params.blockHash, !!params.includeTransactions]];\n          }\n\n          return null;\n\n        case \"getTransaction\":\n          return [\"eth_getTransactionByHash\", [params.transactionHash]];\n\n        case \"getTransactionReceipt\":\n          return [\"eth_getTransactionReceipt\", [params.transactionHash]];\n\n        case \"call\":\n          {\n            var hexlifyTransaction = getStatic(this.constructor, \"hexlifyTransaction\");\n            return [\"eth_call\", [hexlifyTransaction(params.transaction, {\n              from: true\n            }), params.blockTag]];\n          }\n\n        case \"estimateGas\":\n          {\n            var _hexlifyTransaction = getStatic(this.constructor, \"hexlifyTransaction\");\n\n            return [\"eth_estimateGas\", [_hexlifyTransaction(params.transaction, {\n              from: true\n            })]];\n          }\n\n        case \"getLogs\":\n          if (params.filter && params.filter.address != null) {\n            params.filter.address = getLowerCase(params.filter.address);\n          }\n\n          return [\"eth_getLogs\", [params.filter]];\n\n        default:\n          break;\n      }\n\n      return null;\n    }\n  }, {\n    key: \"perform\",\n    value: function perform(method, params) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {\n        var tx, feeData, args;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                if (!(method === \"call\" || method === \"estimateGas\")) {\n                  _context9.next = 8;\n                  break;\n                }\n\n                tx = params.transaction;\n\n                if (!(tx && tx.type != null && BigNumber.from(tx.type).isZero())) {\n                  _context9.next = 8;\n                  break;\n                }\n\n                if (!(tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null)) {\n                  _context9.next = 8;\n                  break;\n                }\n\n                _context9.next = 6;\n                return this.getFeeData();\n\n              case 6:\n                feeData = _context9.sent;\n\n                if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {\n                  // Network doesn't know about EIP-1559 (and hence type)\n                  params = shallowCopy(params);\n                  params.transaction = shallowCopy(tx);\n                  delete params.transaction.type;\n                }\n\n              case 8:\n                args = this.prepareRequest(method, params);\n\n                if (args == null) {\n                  logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, {\n                    operation: method\n                  });\n                }\n\n                _context9.prev = 10;\n                _context9.next = 13;\n                return this.send(args[0], args[1]);\n\n              case 13:\n                return _context9.abrupt(\"return\", _context9.sent);\n\n              case 16:\n                _context9.prev = 16;\n                _context9.t0 = _context9[\"catch\"](10);\n                return _context9.abrupt(\"return\", checkError(method, _context9.t0, params));\n\n              case 19:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this, [[10, 16]]);\n      }));\n    }\n  }, {\n    key: \"_startEvent\",\n    value: function _startEvent(event) {\n      if (event.tag === \"pending\") {\n        this._startPending();\n      }\n\n      _get(_getPrototypeOf(JsonRpcProvider.prototype), \"_startEvent\", this).call(this, event);\n    }\n  }, {\n    key: \"_startPending\",\n    value: function _startPending() {\n      if (this._pendingFilter != null) {\n        return;\n      }\n\n      var self = this;\n      var pendingFilter = this.send(\"eth_newPendingTransactionFilter\", []);\n      this._pendingFilter = pendingFilter;\n      pendingFilter.then(function (filterId) {\n        function poll() {\n          self.send(\"eth_getFilterChanges\", [filterId]).then(function (hashes) {\n            if (self._pendingFilter != pendingFilter) {\n              return null;\n            }\n\n            var seq = Promise.resolve();\n            hashes.forEach(function (hash) {\n              // @TODO: This should be garbage collected at some point... How? When?\n              self._emitted[\"t:\" + hash.toLowerCase()] = \"pending\";\n              seq = seq.then(function () {\n                return self.getTransaction(hash).then(function (tx) {\n                  self.emit(\"pending\", tx);\n                  return null;\n                });\n              });\n            });\n            return seq.then(function () {\n              return timer(1000);\n            });\n          }).then(function () {\n            if (self._pendingFilter != pendingFilter) {\n              self.send(\"eth_uninstallFilter\", [filterId]);\n              return;\n            }\n\n            setTimeout(function () {\n              poll();\n            }, 0);\n            return null;\n          }).catch(function (error) {});\n        }\n\n        poll();\n        return filterId;\n      }).catch(function (error) {});\n    }\n  }, {\n    key: \"_stopEvent\",\n    value: function _stopEvent(event) {\n      if (event.tag === \"pending\" && this.listenerCount(\"pending\") === 0) {\n        this._pendingFilter = null;\n      }\n\n      _get(_getPrototypeOf(JsonRpcProvider.prototype), \"_stopEvent\", this).call(this, event);\n    } // Convert an ethers.js transaction into a JSON-RPC transaction\n    //  - gasLimit => gas\n    //  - All values hexlified\n    //  - All numeric values zero-striped\n    //  - All addresses are lowercased\n    // NOTE: This allows a TransactionRequest, but all values should be resolved\n    //       before this is called\n    // @TODO: This will likely be removed in future versions and prepareRequest\n    //        will be the preferred method for this.\n\n  }], [{\n    key: \"defaultUrl\",\n    value: function defaultUrl() {\n      return \"http:/\\/localhost:8545\";\n    }\n  }, {\n    key: \"hexlifyTransaction\",\n    value: function hexlifyTransaction(transaction, allowExtra) {\n      // Check only allowed properties are given\n      var allowed = shallowCopy(allowedTransactionKeys);\n\n      if (allowExtra) {\n        for (var key in allowExtra) {\n          if (allowExtra[key]) {\n            allowed[key] = true;\n          }\n        }\n      }\n\n      checkProperties(transaction, allowed);\n      var result = {}; // JSON-RPC now requires numeric values to be \"quantity\" values\n\n      [\"chainId\", \"gasLimit\", \"gasPrice\", \"type\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"nonce\", \"value\"].forEach(function (key) {\n        if (transaction[key] == null) {\n          return;\n        }\n\n        var value = hexValue(BigNumber.from(transaction[key]));\n\n        if (key === \"gasLimit\") {\n          key = \"gas\";\n        }\n\n        result[key] = value;\n      });\n      [\"from\", \"to\", \"data\"].forEach(function (key) {\n        if (transaction[key] == null) {\n          return;\n        }\n\n        result[key] = hexlify(transaction[key]);\n      });\n\n      if (transaction.accessList) {\n        result[\"accessList\"] = accessListify(transaction.accessList);\n      }\n\n      return result;\n    }\n  }]);\n\n  return JsonRpcProvider;\n}(BaseProvider);","map":{"version":3,"mappings":"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","names":["Signer","BigNumber","hexlify","hexValue","hexZeroPad","isHexString","_TypedDataEncoder","checkProperties","deepCopy","defineReadOnly","getStatic","resolveProperties","shallowCopy","toUtf8Bytes","accessListify","fetchJson","poll","Logger","version","logger","BaseProvider","errorGas","spelunk","value","requireData","message","match","data","key","result","JSON","parse","error","checkError","method","params","transaction","signedTransaction","throwError","errors","CALL_EXCEPTION","body","UNPREDICTABLE_GAS_LIMIT","reason","code","SERVER_ERROR","responseText","toLowerCase","INSUFFICIENT_FUNDS","NONCE_EXPIRED","REPLACEMENT_UNDERPRICED","UNSUPPORTED_OPERATION","indexOf","timer","timeout","Promise","resolve","setTimeout","getResult","payload","Error","getLowerCase","_constructorGuard","JsonRpcSigner","constructorGuard","provider","addressOrIndex","formatter","address","throwArgumentError","operation","UncheckedJsonRpcSigner","_address","_index","send","then","accounts","length","fromAddress","getAddress","gasLimit","estimate","from","estimateGas","to","__awaiter","resolveName","tx","sender","hexTx","constructor","hexlifyTransaction","hash","_getInternalBlockNumber","pollingInterval","blockNumber","sendUncheckedTransaction","getTransaction","undefined","_wrapTransaction","oncePoll","transactionHash","domain","types","resolveNames","name","populated","stringify","getPayload","password","nonce","gasPrice","chainId","confirmations","wait","waitForTransaction","allowedTransactionKeys","type","accessList","maxFeePerGas","maxPriorityFeePerGas","JsonRpcProvider","url","network","networkOrReady","reject","detectNetwork","Object","freeze","_nextId","_eventLoopCache","_cache","_uncachedDetectNetwork","getNetwork","toNumber","NETWORK_ERROR","event","serverError","getSigner","connectUnchecked","map","a","request","id","jsonrpc","emit","action","cache","connection","response","blockTag","position","includeTransactions","blockHash","filter","isZero","getFeeData","feeData","args","prepareRequest","NOT_IMPLEMENTED","tag","_startPending","_pendingFilter","self","pendingFilter","filterId","hashes","seq","forEach","_emitted","catch","listenerCount","allowExtra","allowed"],"sources":["C:\\Users\\kiril\\Desktop\\newenvai\\client\\node_modules\\@ethersproject\\providers\\src.ts\\json-rpc-provider.ts"],"sourcesContent":["\"use strict\";\n\n// See: https://github.com/ethereum/wiki/wiki/JSON-RPC\n\nimport { Provider, TransactionRequest, TransactionResponse } from \"@ethersproject/abstract-provider\";\nimport { Signer, TypedDataDomain, TypedDataField, TypedDataSigner } from \"@ethersproject/abstract-signer\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { Bytes, hexlify, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { _TypedDataEncoder } from \"@ethersproject/hash\";\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { checkProperties, deepCopy, Deferrable, defineReadOnly, getStatic, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport { AccessList, accessListify } from \"@ethersproject/transactions\";\nimport { ConnectionInfo, fetchJson, poll } from \"@ethersproject/web\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { BaseProvider, Event } from \"./base-provider\";\n\n\nconst errorGas = [ \"call\", \"estimateGas\" ];\n\nfunction spelunk(value: any, requireData: boolean): null | { message: string, data: null | string } {\n    if (value == null) { return null; }\n\n    // These *are* the droids we're looking for.\n    if (typeof(value.message) === \"string\" && value.message.match(\"reverted\")) {\n        const data = isHexString(value.data) ? value.data: null;\n        if (!requireData || data) {\n            return { message: value.message, data };\n        }\n    }\n\n    // Spelunk further...\n    if (typeof(value) === \"object\") {\n        for (const key in value) {\n            const result = spelunk(value[key], requireData);\n            if (result) { return result; }\n        }\n        return null;\n    }\n\n    // Might be a JSON string we can further descend...\n    if (typeof(value) === \"string\") {\n        try {\n            return spelunk(JSON.parse(value), requireData);\n        } catch (error) { }\n    }\n\n    return null;\n}\n\nfunction checkError(method: string, error: any, params: any): any {\n\n    const transaction = params.transaction || params.signedTransaction;\n\n    // Undo the \"convenience\" some nodes are attempting to prevent backwards\n    // incompatibility; maybe for v6 consider forwarding reverts as errors\n    if (method === \"call\") {\n        const result = spelunk(error, true);\n        if (result) { return result.data; }\n\n        // Nothing descriptive..\n        logger.throwError(\"missing revert data in call exception; Transaction reverted without a reason string\", Logger.errors.CALL_EXCEPTION, {\n            data: \"0x\", transaction, error\n        });\n    }\n\n    if (method === \"estimateGas\") {\n        // Try to find something, with a preference on SERVER_ERROR body\n        let result = spelunk(error.body, false);\n        if (result == null) { result = spelunk(error, false); }\n\n        // Found \"reverted\", this is a CALL_EXCEPTION\n        if (result) {\n            logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n                reason: result.message, method, transaction, error\n            });\n        }\n    }\n\n    // @TODO: Should we spelunk for message too?\n\n    let message = error.message;\n    if (error.code === Logger.errors.SERVER_ERROR && error.error && typeof(error.error.message) === \"string\") {\n        message = error.error.message;\n    } else if (typeof(error.body) === \"string\") {\n        message = error.body;\n    } else if (typeof(error.responseText) === \"string\") {\n        message = error.responseText;\n    }\n    message = (message || \"\").toLowerCase();\n\n    // \"insufficient funds for gas * price + value + cost(data)\"\n    if (message.match(/insufficient funds|base fee exceeds gas limit/i)) {\n        logger.throwError(\"insufficient funds for intrinsic transaction cost\", Logger.errors.INSUFFICIENT_FUNDS, {\n            error, method, transaction\n        });\n    }\n\n    // \"nonce too low\"\n    if (message.match(/nonce (is )?too low/i)) {\n        logger.throwError(\"nonce has already been used\", Logger.errors.NONCE_EXPIRED, {\n            error, method, transaction\n        });\n    }\n\n    // \"replacement transaction underpriced\"\n    if (message.match(/replacement transaction underpriced|transaction gas price.*too low/i)) {\n        logger.throwError(\"replacement fee too low\", Logger.errors.REPLACEMENT_UNDERPRICED, {\n            error, method, transaction\n        });\n    }\n\n    // \"replacement transaction underpriced\"\n    if (message.match(/only replay-protected/i)) {\n        logger.throwError(\"legacy pre-eip-155 transactions not supported\", Logger.errors.UNSUPPORTED_OPERATION, {\n            error, method, transaction\n        });\n    }\n\n    if (errorGas.indexOf(method) >= 0 && message.match(/gas required exceeds allowance|always failing transaction|execution reverted/)) {\n        logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n            error, method, transaction\n        });\n    }\n\n    throw error;\n}\n\nfunction timer(timeout: number): Promise<any> {\n    return new Promise(function(resolve) {\n        setTimeout(resolve, timeout);\n    });\n}\n\nfunction getResult(payload: { error?: { code?: number, data?: any, message?: string }, result?: any }): any {\n    if (payload.error) {\n        // @TODO: not any\n        const error: any = new Error(payload.error.message);\n        error.code = payload.error.code;\n        error.data = payload.error.data;\n        throw error;\n    }\n\n    return payload.result;\n}\n\nfunction getLowerCase(value: string): string {\n    if (value) { return value.toLowerCase(); }\n    return value;\n}\n\nconst _constructorGuard = {};\n\nexport class JsonRpcSigner extends Signer implements TypedDataSigner {\n    readonly provider: JsonRpcProvider;\n    _index: number;\n    _address: string;\n\n    constructor(constructorGuard: any, provider: JsonRpcProvider, addressOrIndex?: string | number) {\n        super();\n\n        if (constructorGuard !== _constructorGuard) {\n            throw new Error(\"do not call the JsonRpcSigner constructor directly; use provider.getSigner\");\n        }\n\n        defineReadOnly(this, \"provider\", provider);\n\n        if (addressOrIndex == null) { addressOrIndex = 0; }\n\n        if (typeof(addressOrIndex) === \"string\") {\n            defineReadOnly(this, \"_address\", this.provider.formatter.address(addressOrIndex));\n            defineReadOnly(this, \"_index\", null);\n\n        } else if (typeof(addressOrIndex) === \"number\") {\n            defineReadOnly(this, \"_index\", addressOrIndex);\n            defineReadOnly(this, \"_address\", null);\n\n        } else {\n            logger.throwArgumentError(\"invalid address or index\", \"addressOrIndex\", addressOrIndex);\n        }\n    }\n\n    connect(provider: Provider): JsonRpcSigner {\n        return logger.throwError(\"cannot alter JSON-RPC Signer connection\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"connect\"\n        });\n    }\n\n    connectUnchecked(): JsonRpcSigner {\n        return new UncheckedJsonRpcSigner(_constructorGuard, this.provider, this._address || this._index);\n    }\n\n    getAddress(): Promise<string> {\n        if (this._address) {\n            return Promise.resolve(this._address);\n        }\n\n        return this.provider.send(\"eth_accounts\", []).then((accounts) => {\n            if (accounts.length <= this._index) {\n                logger.throwError(\"unknown account #\" + this._index, Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"getAddress\"\n                });\n            }\n            return this.provider.formatter.address(accounts[this._index])\n        });\n    }\n\n    sendUncheckedTransaction(transaction: Deferrable<TransactionRequest>): Promise<string> {\n        transaction = shallowCopy(transaction);\n\n        const fromAddress = this.getAddress().then((address) => {\n            if (address) { address = address.toLowerCase(); }\n            return address;\n        });\n\n        // The JSON-RPC for eth_sendTransaction uses 90000 gas; if the user\n        // wishes to use this, it is easy to specify explicitly, otherwise\n        // we look it up for them.\n        if (transaction.gasLimit == null) {\n            const estimate = shallowCopy(transaction);\n            estimate.from = fromAddress;\n            transaction.gasLimit = this.provider.estimateGas(estimate);\n        }\n\n        if (transaction.to != null) {\n            transaction.to = Promise.resolve(transaction.to).then(async (to) => {\n                if (to == null) { return null; }\n                const address = await this.provider.resolveName(to);\n                if (address == null) {\n                    logger.throwArgumentError(\"provided ENS name resolves to null\", \"tx.to\", to);\n                }\n                return address;\n            });\n        }\n\n        return resolveProperties({\n            tx: resolveProperties(transaction),\n            sender: fromAddress\n        }).then(({ tx, sender }) => {\n\n            if (tx.from != null) {\n                if (tx.from.toLowerCase() !== sender) {\n                    logger.throwArgumentError(\"from address mismatch\", \"transaction\", transaction);\n                }\n            } else {\n                tx.from = sender;\n            }\n\n            const hexTx = (<any>this.provider.constructor).hexlifyTransaction(tx, { from: true });\n\n            return this.provider.send(\"eth_sendTransaction\", [ hexTx ]).then((hash) => {\n                return hash;\n            }, (error) => {\n                return checkError(\"sendTransaction\", error, hexTx);\n            });\n        });\n    }\n\n    signTransaction(transaction: Deferrable<TransactionRequest>): Promise<string> {\n        return logger.throwError(\"signing transactions is unsupported\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"signTransaction\"\n        });\n    }\n\n    async sendTransaction(transaction: Deferrable<TransactionRequest>): Promise<TransactionResponse> {\n        // This cannot be mined any earlier than any recent block\n        const blockNumber = await this.provider._getInternalBlockNumber(100 + 2 * this.provider.pollingInterval);\n\n        // Send the transaction\n        const hash = await this.sendUncheckedTransaction(transaction);\n\n        try {\n            // Unfortunately, JSON-RPC only provides and opaque transaction hash\n            // for a response, and we need the actual transaction, so we poll\n            // for it; it should show up very quickly\n            return await poll(async () => {\n                const tx = await this.provider.getTransaction(hash);\n                if (tx === null) { return undefined; }\n                return this.provider._wrapTransaction(tx, hash, blockNumber);\n            }, { oncePoll: this.provider });\n        } catch (error) {\n            (<any>error).transactionHash = hash;\n            throw error;\n        }\n    }\n\n    async signMessage(message: Bytes | string): Promise<string> {\n        const data = ((typeof(message) === \"string\") ? toUtf8Bytes(message): message);\n        const address = await this.getAddress();\n\n        return await this.provider.send(\"personal_sign\", [ hexlify(data), address.toLowerCase() ]);\n    }\n\n    async _legacySignMessage(message: Bytes | string): Promise<string> {\n        const data = ((typeof(message) === \"string\") ? toUtf8Bytes(message): message);\n        const address = await this.getAddress();\n\n        // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign\n        return await this.provider.send(\"eth_sign\", [ address.toLowerCase(), hexlify(data) ]);\n    }\n\n    async _signTypedData(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): Promise<string> {\n        // Populate any ENS names (in-place)\n        const populated = await _TypedDataEncoder.resolveNames(domain, types, value, (name: string) => {\n            return this.provider.resolveName(name);\n        });\n\n        const address = await this.getAddress();\n\n        return await this.provider.send(\"eth_signTypedData_v4\", [\n            address.toLowerCase(),\n            JSON.stringify(_TypedDataEncoder.getPayload(populated.domain, types, populated.value))\n        ]);\n    }\n\n    async unlock(password: string): Promise<boolean> {\n        const provider = this.provider;\n\n        const address = await this.getAddress();\n\n        return provider.send(\"personal_unlockAccount\", [ address.toLowerCase(), password, null ]);\n    }\n}\n\nclass UncheckedJsonRpcSigner extends JsonRpcSigner {\n    sendTransaction(transaction: Deferrable<TransactionRequest>): Promise<TransactionResponse> {\n        return this.sendUncheckedTransaction(transaction).then((hash) => {\n            return <TransactionResponse>{\n                hash: hash,\n                nonce: null,\n                gasLimit: null,\n                gasPrice: null,\n                data: null,\n                value: null,\n                chainId: null,\n                confirmations: 0,\n                from: null,\n                wait: (confirmations?: number) => { return this.provider.waitForTransaction(hash, confirmations); }\n            };\n        });\n    }\n}\n\nconst allowedTransactionKeys: { [ key: string ]: boolean } = {\n    chainId: true, data: true, gasLimit: true, gasPrice:true, nonce: true, to: true, value: true,\n    type: true, accessList: true,\n    maxFeePerGas: true, maxPriorityFeePerGas: true\n}\n\nexport class JsonRpcProvider extends BaseProvider {\n    readonly connection: ConnectionInfo;\n\n    _pendingFilter: Promise<number>;\n    _nextId: number;\n\n    // During any given event loop, the results for a given call will\n    // all be the same, so we can dedup the calls to save requests and\n    // bandwidth. @TODO: Try out generalizing this against send?\n    _eventLoopCache: Record<string, Promise<any>>;\n    get _cache(): Record<string, Promise<any>> {\n        if (this._eventLoopCache == null) {\n            this._eventLoopCache = { };\n        }\n        return this._eventLoopCache;\n    }\n\n    constructor(url?: ConnectionInfo | string, network?: Networkish) {\n        let networkOrReady: Networkish | Promise<Network> = network;\n\n        // The network is unknown, query the JSON-RPC for it\n        if (networkOrReady == null) {\n            networkOrReady = new Promise((resolve, reject) => {\n                setTimeout(() => {\n                    this.detectNetwork().then((network) => {\n                        resolve(network);\n                    }, (error) => {\n                        reject(error);\n                    });\n                }, 0);\n            });\n        }\n\n        super(networkOrReady);\n\n        // Default URL\n        if (!url) { url = getStatic<() => string>(this.constructor, \"defaultUrl\")(); }\n\n        if (typeof(url) === \"string\") {\n            defineReadOnly(this, \"connection\",Object.freeze({\n                url: url\n            }));\n        } else {\n            defineReadOnly(this, \"connection\", Object.freeze(shallowCopy(url)));\n        }\n\n        this._nextId = 42;\n    }\n\n    static defaultUrl(): string {\n        return \"http:/\\/localhost:8545\";\n    }\n\n    detectNetwork(): Promise<Network> {\n        if (!this._cache[\"detectNetwork\"]) {\n            this._cache[\"detectNetwork\"] = this._uncachedDetectNetwork();\n\n            // Clear this cache at the beginning of the next event loop\n            setTimeout(() => {\n                this._cache[\"detectNetwork\"] = null;\n            }, 0);\n        }\n        return this._cache[\"detectNetwork\"];\n    }\n\n    async _uncachedDetectNetwork(): Promise<Network> {\n        await timer(0);\n\n        let chainId = null;\n        try {\n            chainId = await this.send(\"eth_chainId\", [ ]);\n        } catch (error) {\n            try {\n                chainId = await this.send(\"net_version\", [ ]);\n            } catch (error) { }\n        }\n\n        if (chainId != null) {\n            const getNetwork = getStatic<(network: Networkish) => Network>(this.constructor, \"getNetwork\");\n            try {\n                return getNetwork(BigNumber.from(chainId).toNumber());\n            } catch (error) {\n                return logger.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\n                    chainId: chainId,\n                    event: \"invalidNetwork\",\n                    serverError: error\n                });\n            }\n        }\n\n        return logger.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\n            event: \"noNetwork\"\n        });\n    }\n\n    getSigner(addressOrIndex?: string | number): JsonRpcSigner {\n        return new JsonRpcSigner(_constructorGuard, this, addressOrIndex);\n    }\n\n    getUncheckedSigner(addressOrIndex?: string | number): UncheckedJsonRpcSigner {\n        return this.getSigner(addressOrIndex).connectUnchecked();\n    }\n\n    listAccounts(): Promise<Array<string>> {\n        return this.send(\"eth_accounts\", []).then((accounts: Array<string>) => {\n            return accounts.map((a) => this.formatter.address(a));\n        });\n    }\n\n    send(method: string, params: Array<any>): Promise<any> {\n        const request = {\n            method: method,\n            params: params,\n            id: (this._nextId++),\n            jsonrpc: \"2.0\"\n        };\n\n        this.emit(\"debug\", {\n            action: \"request\",\n            request: deepCopy(request),\n            provider: this\n        });\n\n        // We can expand this in the future to any call, but for now these\n        // are the biggest wins and do not require any serializing parameters.\n        const cache = ([ \"eth_chainId\", \"eth_blockNumber\" ].indexOf(method) >= 0);\n        if (cache && this._cache[method]) {\n            return this._cache[method];\n        }\n\n        const result = fetchJson(this.connection, JSON.stringify(request), getResult).then((result) => {\n            this.emit(\"debug\", {\n                action: \"response\",\n                request: request,\n                response: result,\n                provider: this\n            });\n\n            return result;\n\n        }, (error) => {\n            this.emit(\"debug\", {\n                action: \"response\",\n                error: error,\n                request: request,\n                provider: this\n            });\n\n            throw error;\n        });\n\n        // Cache the fetch, but clear it on the next event loop\n        if (cache) {\n            this._cache[method] = result;\n            setTimeout(() => {\n                this._cache[method] = null;\n            }, 0);\n        }\n\n        return result;\n    }\n\n    prepareRequest(method: string, params: any): [ string, Array<any> ] {\n        switch (method) {\n            case \"getBlockNumber\":\n                return [ \"eth_blockNumber\", [] ];\n\n            case \"getGasPrice\":\n                return [ \"eth_gasPrice\", [] ];\n\n            case \"getBalance\":\n                return [ \"eth_getBalance\", [ getLowerCase(params.address), params.blockTag ] ];\n\n            case \"getTransactionCount\":\n                return [ \"eth_getTransactionCount\", [ getLowerCase(params.address), params.blockTag ] ];\n\n            case \"getCode\":\n                return [ \"eth_getCode\", [ getLowerCase(params.address), params.blockTag ] ];\n\n            case \"getStorageAt\":\n                return [ \"eth_getStorageAt\", [ getLowerCase(params.address), hexZeroPad(params.position, 32), params.blockTag ] ];\n\n            case \"sendTransaction\":\n                return [ \"eth_sendRawTransaction\", [ params.signedTransaction ] ]\n\n            case \"getBlock\":\n                if (params.blockTag) {\n                    return [ \"eth_getBlockByNumber\", [ params.blockTag, !!params.includeTransactions ] ];\n                } else if (params.blockHash) {\n                    return [ \"eth_getBlockByHash\", [ params.blockHash, !!params.includeTransactions ] ];\n                }\n                return null;\n\n            case \"getTransaction\":\n                return [ \"eth_getTransactionByHash\", [ params.transactionHash ] ];\n\n            case \"getTransactionReceipt\":\n                return [ \"eth_getTransactionReceipt\", [ params.transactionHash ] ];\n\n            case \"call\": {\n                const hexlifyTransaction = getStatic<(t: TransactionRequest, a?: { [key: string]: boolean }) => { [key: string]: string }>(this.constructor, \"hexlifyTransaction\");\n                return [ \"eth_call\", [ hexlifyTransaction(params.transaction, { from: true }), params.blockTag ] ];\n            }\n\n            case \"estimateGas\": {\n                const hexlifyTransaction = getStatic<(t: TransactionRequest, a?: { [key: string]: boolean }) => { [key: string]: string }>(this.constructor, \"hexlifyTransaction\");\n                return [ \"eth_estimateGas\", [ hexlifyTransaction(params.transaction, { from: true }) ] ];\n            }\n\n            case \"getLogs\":\n                if (params.filter && params.filter.address != null) {\n                    params.filter.address = getLowerCase(params.filter.address);\n                }\n                return [ \"eth_getLogs\", [ params.filter ] ];\n\n            default:\n                break;\n        }\n\n        return null;\n    }\n\n    async perform(method: string, params: any): Promise<any> {\n        // Legacy networks do not like the type field being passed along (which\n        // is fair), so we delete type if it is 0 and a non-EIP-1559 network\n        if (method === \"call\" || method === \"estimateGas\") {\n            const tx = params.transaction;\n            if (tx && tx.type != null && BigNumber.from(tx.type).isZero()) {\n                // If there are no EIP-1559 properties, it might be non-EIP-1559\n                if (tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null) {\n                    const feeData = await this.getFeeData();\n                    if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {\n                        // Network doesn't know about EIP-1559 (and hence type)\n                        params = shallowCopy(params);\n                        params.transaction = shallowCopy(tx);\n                        delete params.transaction.type;\n                    }\n                }\n            }\n        }\n\n        const args = this.prepareRequest(method,  params);\n\n        if (args == null) {\n            logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, { operation: method });\n        }\n        try {\n            return await this.send(args[0], args[1])\n        } catch (error) {\n            return checkError(method, error, params);\n        }\n    }\n\n    _startEvent(event: Event): void {\n        if (event.tag === \"pending\") { this._startPending(); }\n        super._startEvent(event);\n    }\n\n    _startPending(): void {\n        if (this._pendingFilter != null) { return; }\n        const self = this;\n\n        const pendingFilter: Promise<number> = this.send(\"eth_newPendingTransactionFilter\", []);\n        this._pendingFilter = pendingFilter;\n\n        pendingFilter.then(function(filterId) {\n            function poll() {\n                self.send(\"eth_getFilterChanges\", [ filterId ]).then(function(hashes: Array<string>) {\n                    if (self._pendingFilter != pendingFilter) { return null; }\n\n                    let seq = Promise.resolve();\n                    hashes.forEach(function(hash) {\n                        // @TODO: This should be garbage collected at some point... How? When?\n                        self._emitted[\"t:\" + hash.toLowerCase()] = \"pending\";\n                        seq = seq.then(function() {\n                            return self.getTransaction(hash).then(function(tx) {\n                                self.emit(\"pending\", tx);\n                                return null;\n                            });\n                        });\n                    });\n\n                    return seq.then(function() {\n                        return timer(1000);\n                    });\n                }).then(function() {\n                    if (self._pendingFilter != pendingFilter) {\n                        self.send(\"eth_uninstallFilter\", [ filterId ]);\n                        return;\n                    }\n                    setTimeout(function() { poll(); }, 0);\n\n                    return null;\n                }).catch((error: Error) => { });\n            }\n            poll();\n\n            return filterId;\n        }).catch((error: Error) => { });\n    }\n\n    _stopEvent(event: Event): void {\n        if (event.tag === \"pending\" && this.listenerCount(\"pending\") === 0) {\n            this._pendingFilter = null;\n        }\n        super._stopEvent(event);\n    }\n\n    // Convert an ethers.js transaction into a JSON-RPC transaction\n    //  - gasLimit => gas\n    //  - All values hexlified\n    //  - All numeric values zero-striped\n    //  - All addresses are lowercased\n    // NOTE: This allows a TransactionRequest, but all values should be resolved\n    //       before this is called\n    // @TODO: This will likely be removed in future versions and prepareRequest\n    //        will be the preferred method for this.\n    static hexlifyTransaction(transaction: TransactionRequest, allowExtra?: { [key: string]: boolean }): { [key: string]: string | AccessList } {\n        // Check only allowed properties are given\n        const allowed = shallowCopy(allowedTransactionKeys);\n        if (allowExtra) {\n            for (const key in allowExtra) {\n                if (allowExtra[key]) { allowed[key] = true; }\n            }\n        }\n\n        checkProperties(transaction, allowed);\n\n        const result: { [key: string]: string | AccessList } = {};\n\n        // JSON-RPC now requires numeric values to be \"quantity\" values\n        [\"chainId\", \"gasLimit\", \"gasPrice\", \"type\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"nonce\", \"value\"].forEach(function(key) {\n            if ((<any>transaction)[key] == null) { return; }\n            const value = hexValue(BigNumber.from((<any>transaction)[key]));\n            if (key === \"gasLimit\") { key = \"gas\"; }\n            result[key] = value;\n        });\n\n        [\"from\", \"to\", \"data\"].forEach(function(key) {\n            if ((<any>transaction)[key] == null) { return; }\n            result[key] = hexlify((<any>transaction)[key]);\n        });\n\n        if ((<any>transaction).accessList) {\n            result[\"accessList\"] = accessListify((<any>transaction).accessList);\n        }\n\n        return result;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}