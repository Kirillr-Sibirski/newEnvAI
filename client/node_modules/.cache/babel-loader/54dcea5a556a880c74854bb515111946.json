{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kiril\\\\Desktop\\\\newenvai\\\\src\\\\pages\\\\Image.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { animalText } from './Animals'; // Housekeeping for openAI\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst {\n  Configuration,\n  OpenAIApi\n} = require(\"openai\");\n\nconst configuration = new Configuration({\n  apiKey: process.env.REACT_APP_OPENAI_API_KEY\n});\nconst openai = new OpenAIApi(configuration);\nlet errors; // Send 3 requests to DALL-E mini with descriptions\n\nasync function generate_images(neutral, positive, negative) {\n  errors(\"AI: Image generation in progress..\"); // Send request to replicate.com API to generate images\n}\n\nasync function generate_description(desc, good, bad) {\n  // Make input sentence more creative & interesting\n  const description = await openai.createCompletion({\n    model: \"text-davinci-002\",\n    prompt: \"Create sentence with\" + desc,\n    max_tokens: 20,\n    temperature: 0.6\n  }); // Generate sentences with description and adjectives using openAI's Generation\n\n  const adj_positive = await openai.createCompletion({\n    model: \"text-davinci-002\",\n    prompt: \"Add adjectives \" + good + \"to sentence \" + desc,\n    max_tokens: 20,\n    temperature: 0.4\n  }); // Generate sentences with description and adjectives using openAI's Generation\n\n  const adj_negative = await openai.createCompletion({\n    model: \"text-davinci-002\",\n    prompt: \"Add adjectives \" + bad + \"to sentence \" + desc,\n    max_tokens: 20,\n    temperature: 0.4\n  });\n  console.log(description.data.choices[0].text, adj_positive.data.choices[0].text, adj_negative.data.choices[0].text);\n  generate_images(description.data.choices[0].text, adj_positive.data.choices[0].text, adj_negative.data.choices[0].text);\n} // Check adjectives + description with sentiment analysis for positive, neutral or negative using openAI's Classification\n\n\nasync function sentiment_analysis(desc, good, bad) {\n  // Generate sentences with description and adjectives using openAI's Generation\n  const response = await openai.createCompletion({\n    model: \"text-davinci-002\",\n    prompt: \"Classify the sentiment in these words: \\n 1. '\" + desc + \"'\\n 2. '\" + good + \"'\\n 3. '\" + bad + \"'\",\n    max_tokens: 40,\n    temperature: 0\n  });\n  const originalText = response.data.choices[0].text.toLocaleLowerCase();\n  let rspList = originalText.split('\\n');\n  let substrings = [\"positive\", \"neutral\", \"negative\"]; // This checks if user response match with intended response\n\n  if (rspList[2].includes(substrings[1]) && rspList[3].includes(substrings[0]) && rspList[4].includes(substrings[2])) {\n    // if ok execute the rest\n    errors(\"AI: Description generation in progress..\");\n    generate_description(desc, good, bad);\n  } else {\n    errors(\"AI: Hm.. First input must be neutral, second input must be positive, third input must be negative. Am I goin' crazy?\");\n  }\n} // Check 'desc' sentence for containing animal vocabulary \n\n\nasync function animalVocab(desc, good, bad) {\n  for (var y = 0; y < animalText.length; y++) {\n    // loops through all the list\n    if (desc.includes(animalText[y].toLocaleLowerCase())) {\n      // if animal is found\n      errors(\"AI: Sentiment analysis in progress..\"); // Checks if text is positive, neutral or negative\n\n      sentiment_analysis(desc, good, bad);\n      break;\n    } else {\n      errors(\"AI: I don't know such an animal, pls change your description.\");\n    }\n  }\n}\n\nfunction Image() {\n  _s();\n\n  const [desc, setDesc] = useState(\"\");\n  const [good, setGood] = useState(\"\");\n  const [bad, setBad] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(null);\n  useEffect(() => {\n    /* Assign update to outside variable */\n    errors = setErrorMessage;\n    /* Unassign when component unmounts */\n\n    return () => errors = null;\n  });\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    setErrorMessage(\"AI: Checking description for 'animals'..\");\n    animalVocab(desc.toLocaleLowerCase(), good.toLocaleLowerCase(), bad.toLocaleLowerCase());\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Image Generation\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Description:\\xA0\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: desc,\n            onChange: e => setDesc(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 18\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Write adjectives to describe 'good' state of NFT:\\xA0\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: good,\n            onChange: e => setGood(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 18\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Write adjectives to describe 'bad' state of NFT:\\xA0\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: bad,\n            onChange: e => setBad(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 18\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Image, \"nf47J5UgrX4tjA+UWBPdnQq5VeM=\");\n\n_c = Image;\nexport default Image;\n\nvar _c;\n\n$RefreshReg$(_c, \"Image\");","map":{"version":3,"names":["React","useState","useEffect","animalText","Configuration","OpenAIApi","require","configuration","apiKey","process","env","REACT_APP_OPENAI_API_KEY","openai","errors","generate_images","neutral","positive","negative","generate_description","desc","good","bad","description","createCompletion","model","prompt","max_tokens","temperature","adj_positive","adj_negative","console","log","data","choices","text","sentiment_analysis","response","originalText","toLocaleLowerCase","rspList","split","substrings","includes","animalVocab","y","length","Image","setDesc","setGood","setBad","errorMessage","setErrorMessage","handleSubmit","event","preventDefault","e","target","value"],"sources":["C:/Users/kiril/Desktop/newenvai/src/pages/Image.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { animalText } from './Animals';\r\n\r\n// Housekeeping for openAI\r\nconst { Configuration, OpenAIApi } = require(\"openai\");\r\nconst configuration = new Configuration({\r\n  apiKey: process.env.REACT_APP_OPENAI_API_KEY,\r\n});\r\nconst openai = new OpenAIApi(configuration);\r\n\r\nlet errors;\r\n\r\n// Send 3 requests to DALL-E mini with descriptions\r\nasync function generate_images(neutral, positive, negative) {\r\n  errors(\"AI: Image generation in progress..\")\r\n  // Send request to replicate.com API to generate images\r\n}\r\n\r\nasync function generate_description(desc, good, bad) {\r\n  // Make input sentence more creative & interesting\r\n  const description = await openai.createCompletion({\r\n    model: \"text-davinci-002\",\r\n    prompt: \"Create sentence with\"+desc,\r\n    max_tokens: 20,\r\n    temperature: 0.6,\r\n  });\r\n  // Generate sentences with description and adjectives using openAI's Generation\r\n  const adj_positive = await openai.createCompletion({\r\n    model: \"text-davinci-002\",\r\n    prompt: \"Add adjectives \"+good+\"to sentence \"+desc,\r\n    max_tokens: 20,\r\n    temperature: 0.4,\r\n  });\r\n  // Generate sentences with description and adjectives using openAI's Generation\r\n  const adj_negative = await openai.createCompletion({\r\n    model: \"text-davinci-002\",\r\n    prompt: \"Add adjectives \"+bad+\"to sentence \"+desc,\r\n    max_tokens: 20,\r\n    temperature: 0.4,\r\n  });\r\n  console.log(description.data.choices[0].text, adj_positive.data.choices[0].text, adj_negative.data.choices[0].text)\r\n  generate_images(description.data.choices[0].text, adj_positive.data.choices[0].text, adj_negative.data.choices[0].text);\r\n}\r\n// Check adjectives + description with sentiment analysis for positive, neutral or negative using openAI's Classification\r\nasync function sentiment_analysis(desc, good, bad) {\r\n    // Generate sentences with description and adjectives using openAI's Generation\r\n    const response = await openai.createCompletion({\r\n      model: \"text-davinci-002\",\r\n      prompt: \"Classify the sentiment in these words: \\n 1. '\"+desc+\"'\\n 2. '\"+good+\"'\\n 3. '\"+bad+\"'\",\r\n      max_tokens: 40,\r\n      temperature: 0,\r\n    });\r\n    const originalText = response.data.choices[0].text.toLocaleLowerCase();\r\n    let rspList = originalText.split('\\n');\r\n    let substrings = [\"positive\", \"neutral\", \"negative\"];\r\n    // This checks if user response match with intended response\r\n    if(rspList[2].includes(substrings[1]) && rspList[3].includes(substrings[0]) && rspList[4].includes(substrings[2])) {\r\n      // if ok execute the rest\r\n      errors(\"AI: Description generation in progress..\")\r\n      generate_description(desc, good, bad);\r\n    }\r\n    else { \r\n      errors(\"AI: Hm.. First input must be neutral, second input must be positive, third input must be negative. Am I goin' crazy?\")\r\n    }\r\n}\r\n// Check 'desc' sentence for containing animal vocabulary \r\nasync function animalVocab(desc, good, bad){\r\n    for(var y = 0; y < animalText.length; y++) { // loops through all the list\r\n      if(desc.includes(animalText[y].toLocaleLowerCase())) { // if animal is found\r\n        errors(\"AI: Sentiment analysis in progress..\") // Checks if text is positive, neutral or negative\r\n        sentiment_analysis(desc, good, bad)\r\n        break;\r\n      }\r\n      else {\r\n        errors(\"AI: I don't know such an animal, pls change your description.\")\r\n      }\r\n    }\r\n}\r\n\r\nfunction Image() {\r\n    const [desc, setDesc] = useState(\"\");\r\n    const [good, setGood] = useState(\"\");\r\n    const [bad, setBad] = useState(\"\");\r\n    const [errorMessage, setErrorMessage] = useState(null);\r\n  \r\n    useEffect(() => {\r\n      /* Assign update to outside variable */\r\n      errors = setErrorMessage\r\n  \r\n      /* Unassign when component unmounts */\r\n      return () => errors = null\r\n    })\r\n\r\n    const handleSubmit = (event) => {\r\n      event.preventDefault();\r\n      \r\n      setErrorMessage(\"AI: Checking description for 'animals'..\")\r\n      animalVocab(desc.toLocaleLowerCase(), good.toLocaleLowerCase(), bad.toLocaleLowerCase());\r\n      }\r\n    return (\r\n        <div>\r\n            <h1>Image Generation</h1>\r\n            <form onSubmit={handleSubmit}>\r\n            <div><label>Description:&nbsp;\r\n                <input \r\n                type=\"text\" \r\n                value={desc}\r\n                onChange={(e) => setDesc(e.target.value)}\r\n                />\r\n            </label></div>\r\n            <div><label>Write adjectives to describe 'good' state of NFT:&nbsp;\r\n                <input \r\n                type=\"text\" \r\n                value={good}\r\n                onChange={(e) => setGood(e.target.value)}\r\n                />\r\n            </label></div>\r\n            <div><label>Write adjectives to describe 'bad' state of NFT:&nbsp;\r\n                <input \r\n                type=\"text\" \r\n                value={bad}\r\n                onChange={(e) => setBad(e.target.value)}\r\n                />\r\n            </label></div>\r\n            <input type=\"submit\" />\r\n            </form>\r\n            <h3>{errorMessage}</h3>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Image;"],"mappings":"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"},"metadata":{},"sourceType":"module"}