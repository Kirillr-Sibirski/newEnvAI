{"ast":null,"code":"\"use strict\";\n\nimport _classCallCheck from \"C:/Users/kiril/Desktop/newenvai/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/kiril/Desktop/newenvai/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/kiril/Desktop/newenvai/client/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/kiril/Desktop/newenvai/client/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"../_version\";\nvar logger = new Logger(version);\nimport { Coder, Writer } from \"./abstract-coder\";\nimport { AnonymousCoder } from \"./anonymous\";\nexport function pack(writer, coders, values) {\n  var arrayValues = null;\n\n  if (Array.isArray(values)) {\n    arrayValues = values;\n  } else if (values && typeof values === \"object\") {\n    var unique = {};\n    arrayValues = coders.map(function (coder) {\n      var name = coder.localName;\n\n      if (!name) {\n        logger.throwError(\"cannot encode object for signature with missing names\", Logger.errors.INVALID_ARGUMENT, {\n          argument: \"values\",\n          coder: coder,\n          value: values\n        });\n      }\n\n      if (unique[name]) {\n        logger.throwError(\"cannot encode object for signature with duplicate names\", Logger.errors.INVALID_ARGUMENT, {\n          argument: \"values\",\n          coder: coder,\n          value: values\n        });\n      }\n\n      unique[name] = true;\n      return values[name];\n    });\n  } else {\n    logger.throwArgumentError(\"invalid tuple value\", \"tuple\", values);\n  }\n\n  if (coders.length !== arrayValues.length) {\n    logger.throwArgumentError(\"types/value length mismatch\", \"tuple\", values);\n  }\n\n  var staticWriter = new Writer(writer.wordSize);\n  var dynamicWriter = new Writer(writer.wordSize);\n  var updateFuncs = [];\n  coders.forEach(function (coder, index) {\n    var value = arrayValues[index];\n\n    if (coder.dynamic) {\n      // Get current dynamic offset (for the future pointer)\n      var dynamicOffset = dynamicWriter.length; // Encode the dynamic value into the dynamicWriter\n\n      coder.encode(dynamicWriter, value); // Prepare to populate the correct offset once we are done\n\n      var updateFunc = staticWriter.writeUpdatableValue();\n      updateFuncs.push(function (baseOffset) {\n        updateFunc(baseOffset + dynamicOffset);\n      });\n    } else {\n      coder.encode(staticWriter, value);\n    }\n  }); // Backfill all the dynamic offsets, now that we know the static length\n\n  updateFuncs.forEach(function (func) {\n    func(staticWriter.length);\n  });\n  var length = writer.appendWriter(staticWriter);\n  length += writer.appendWriter(dynamicWriter);\n  return length;\n}\nexport function unpack(reader, coders) {\n  var values = []; // A reader anchored to this base\n\n  var baseReader = reader.subReader(0);\n  coders.forEach(function (coder) {\n    var value = null;\n\n    if (coder.dynamic) {\n      var offset = reader.readValue();\n      var offsetReader = baseReader.subReader(offset.toNumber());\n\n      try {\n        value = coder.decode(offsetReader);\n      } catch (error) {\n        // Cannot recover from this\n        if (error.code === Logger.errors.BUFFER_OVERRUN) {\n          throw error;\n        }\n\n        value = error;\n        value.baseType = coder.name;\n        value.name = coder.localName;\n        value.type = coder.type;\n      }\n    } else {\n      try {\n        value = coder.decode(reader);\n      } catch (error) {\n        // Cannot recover from this\n        if (error.code === Logger.errors.BUFFER_OVERRUN) {\n          throw error;\n        }\n\n        value = error;\n        value.baseType = coder.name;\n        value.name = coder.localName;\n        value.type = coder.type;\n      }\n    }\n\n    if (value != undefined) {\n      values.push(value);\n    }\n  }); // We only output named properties for uniquely named coders\n\n  var uniqueNames = coders.reduce(function (accum, coder) {\n    var name = coder.localName;\n\n    if (name) {\n      if (!accum[name]) {\n        accum[name] = 0;\n      }\n\n      accum[name]++;\n    }\n\n    return accum;\n  }, {}); // Add any named parameters (i.e. tuples)\n\n  coders.forEach(function (coder, index) {\n    var name = coder.localName;\n\n    if (!name || uniqueNames[name] !== 1) {\n      return;\n    }\n\n    if (name === \"length\") {\n      name = \"_length\";\n    }\n\n    if (values[name] != null) {\n      return;\n    }\n\n    var value = values[index];\n\n    if (value instanceof Error) {\n      Object.defineProperty(values, name, {\n        enumerable: true,\n        get: function get() {\n          throw value;\n        }\n      });\n    } else {\n      values[name] = value;\n    }\n  });\n\n  var _loop = function _loop(i) {\n    var value = values[i];\n\n    if (value instanceof Error) {\n      Object.defineProperty(values, i, {\n        enumerable: true,\n        get: function get() {\n          throw value;\n        }\n      });\n    }\n  };\n\n  for (var i = 0; i < values.length; i++) {\n    _loop(i);\n  }\n\n  return Object.freeze(values);\n}\nexport var ArrayCoder = /*#__PURE__*/function (_Coder) {\n  _inherits(ArrayCoder, _Coder);\n\n  var _super = _createSuper(ArrayCoder);\n\n  function ArrayCoder(coder, length, localName) {\n    var _this;\n\n    _classCallCheck(this, ArrayCoder);\n\n    var type = coder.type + \"[\" + (length >= 0 ? length : \"\") + \"]\";\n    var dynamic = length === -1 || coder.dynamic;\n    _this = _super.call(this, \"array\", type, localName, dynamic);\n    _this.coder = coder;\n    _this.length = length;\n    return _this;\n  }\n\n  _createClass(ArrayCoder, [{\n    key: \"defaultValue\",\n    value: function defaultValue() {\n      // Verifies the child coder is valid (even if the array is dynamic or 0-length)\n      var defaultChild = this.coder.defaultValue();\n      var result = [];\n\n      for (var i = 0; i < this.length; i++) {\n        result.push(defaultChild);\n      }\n\n      return result;\n    }\n  }, {\n    key: \"encode\",\n    value: function encode(writer, value) {\n      if (!Array.isArray(value)) {\n        this._throwError(\"expected array value\", value);\n      }\n\n      var count = this.length;\n\n      if (count === -1) {\n        count = value.length;\n        writer.writeValue(value.length);\n      }\n\n      logger.checkArgumentCount(value.length, count, \"coder array\" + (this.localName ? \" \" + this.localName : \"\"));\n      var coders = [];\n\n      for (var i = 0; i < value.length; i++) {\n        coders.push(this.coder);\n      }\n\n      return pack(writer, coders, value);\n    }\n  }, {\n    key: \"decode\",\n    value: function decode(reader) {\n      var count = this.length;\n\n      if (count === -1) {\n        count = reader.readValue().toNumber(); // Check that there is *roughly* enough data to ensure\n        // stray random data is not being read as a length. Each\n        // slot requires at least 32 bytes for their value (or 32\n        // bytes as a link to the data). This could use a much\n        // tighter bound, but we are erroring on the side of safety.\n\n        if (count * 32 > reader._data.length) {\n          logger.throwError(\"insufficient data length\", Logger.errors.BUFFER_OVERRUN, {\n            length: reader._data.length,\n            count: count\n          });\n        }\n      }\n\n      var coders = [];\n\n      for (var i = 0; i < count; i++) {\n        coders.push(new AnonymousCoder(this.coder));\n      }\n\n      return reader.coerce(this.name, unpack(reader, coders));\n    }\n  }]);\n\n  return ArrayCoder;\n}(Coder);","map":{"version":3,"mappings":"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","names":["Logger","version","logger","Coder","Writer","AnonymousCoder","pack","writer","coders","values","arrayValues","Array","isArray","unique","map","coder","name","localName","throwError","errors","INVALID_ARGUMENT","argument","value","throwArgumentError","length","staticWriter","wordSize","dynamicWriter","updateFuncs","forEach","index","dynamic","dynamicOffset","encode","updateFunc","writeUpdatableValue","push","baseOffset","func","appendWriter","unpack","reader","baseReader","subReader","offset","readValue","offsetReader","toNumber","decode","error","code","BUFFER_OVERRUN","baseType","type","undefined","uniqueNames","reduce","accum","Error","Object","defineProperty","enumerable","get","i","freeze","ArrayCoder","defaultChild","defaultValue","result","_throwError","count","writeValue","checkArgumentCount","_data","coerce"],"sources":["C:\\Users\\kiril\\Desktop\\newenvai\\client\\node_modules\\@ethersproject\\abi\\src.ts\\coders\\array.ts"],"sourcesContent":["\"use strict\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"../_version\";\nconst logger = new Logger(version);\n\nimport { Coder, Reader, Result, Writer } from \"./abstract-coder\";\nimport { AnonymousCoder } from \"./anonymous\";\n\nexport function pack(writer: Writer, coders: ReadonlyArray<Coder>, values: Array<any> | { [ name: string ]: any }): number {\n    let arrayValues: Array<any> = null;\n\n    if (Array.isArray(values)) {\n       arrayValues = values;\n\n    } else if (values && typeof(values) === \"object\") {\n        let unique: { [ name: string ]: boolean } = { };\n\n        arrayValues = coders.map((coder) => {\n            const name = coder.localName;\n            if (!name) {\n                logger.throwError(\"cannot encode object for signature with missing names\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"values\",\n                    coder: coder,\n                    value: values\n                });\n            }\n\n            if (unique[name]) {\n                logger.throwError(\"cannot encode object for signature with duplicate names\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"values\",\n                    coder: coder,\n                    value: values\n                });\n            }\n\n            unique[name] = true;\n\n            return values[name];\n        });\n\n    } else {\n        logger.throwArgumentError(\"invalid tuple value\", \"tuple\", values);\n    }\n\n    if (coders.length !== arrayValues.length) {\n        logger.throwArgumentError(\"types/value length mismatch\", \"tuple\", values);\n    }\n\n    let staticWriter = new Writer(writer.wordSize);\n    let dynamicWriter = new Writer(writer.wordSize);\n\n    let updateFuncs: Array<(baseOffset: number) => void> = [];\n    coders.forEach((coder, index) => {\n        let value = arrayValues[index];\n\n        if (coder.dynamic) {\n            // Get current dynamic offset (for the future pointer)\n            let dynamicOffset = dynamicWriter.length;\n\n            // Encode the dynamic value into the dynamicWriter\n            coder.encode(dynamicWriter, value);\n\n            // Prepare to populate the correct offset once we are done\n            let updateFunc = staticWriter.writeUpdatableValue();\n            updateFuncs.push((baseOffset: number) => {\n                updateFunc(baseOffset + dynamicOffset);\n            });\n\n        } else {\n            coder.encode(staticWriter, value);\n        }\n    });\n\n    // Backfill all the dynamic offsets, now that we know the static length\n    updateFuncs.forEach((func) => { func(staticWriter.length); });\n\n    let length = writer.appendWriter(staticWriter);\n    length += writer.appendWriter(dynamicWriter);\n    return length;\n}\n\nexport function unpack(reader: Reader, coders: Array<Coder>): Result {\n    let values: any = [];\n\n    // A reader anchored to this base\n    let baseReader = reader.subReader(0);\n\n    coders.forEach((coder) => {\n        let value: any = null;\n\n        if (coder.dynamic) {\n            let offset = reader.readValue();\n            let offsetReader = baseReader.subReader(offset.toNumber());\n            try {\n                value = coder.decode(offsetReader);\n            } catch (error) {\n                // Cannot recover from this\n                if (error.code === Logger.errors.BUFFER_OVERRUN) { throw error; }\n                value = error;\n                value.baseType = coder.name;\n                value.name = coder.localName;\n                value.type = coder.type;\n            }\n\n        } else {\n            try {\n                value = coder.decode(reader);\n            } catch (error) {\n                // Cannot recover from this\n                if (error.code === Logger.errors.BUFFER_OVERRUN) { throw error; }\n                value = error;\n                value.baseType = coder.name;\n                value.name = coder.localName;\n                value.type = coder.type;\n            }\n        }\n\n        if (value != undefined) {\n            values.push(value);\n        }\n    });\n\n    // We only output named properties for uniquely named coders\n    const uniqueNames = coders.reduce((accum, coder) => {\n        const name = coder.localName;\n        if (name) {\n            if (!accum[name]) { accum[name] = 0; }\n            accum[name]++;\n        }\n        return accum;\n    }, <{ [ name: string ]: number }>{ });\n\n    // Add any named parameters (i.e. tuples)\n    coders.forEach((coder: Coder, index: number) => {\n        let name = coder.localName;\n        if (!name || uniqueNames[name] !== 1) { return; }\n\n        if (name === \"length\") { name = \"_length\"; }\n\n        if (values[name] != null) { return; }\n\n        const value = values[index];\n\n        if (value instanceof Error) {\n            Object.defineProperty(values, name, {\n                enumerable: true,\n                get: () => { throw value; }\n            });\n        } else {\n            values[name] = value;\n        }\n    });\n\n    for (let i = 0; i < values.length; i++) {\n        const value = values[i];\n        if (value instanceof Error) {\n            Object.defineProperty(values, i, {\n                enumerable: true,\n                get: () => { throw value; }\n            });\n        }\n    }\n\n    return Object.freeze(values);\n}\n\n\nexport class ArrayCoder extends Coder {\n    readonly coder: Coder;\n    readonly length: number;\n\n    constructor(coder: Coder, length: number, localName: string) {\n        const type = (coder.type + \"[\" + (length >= 0 ? length: \"\") + \"]\");\n        const dynamic = (length === -1 || coder.dynamic);\n        super(\"array\", type, localName, dynamic);\n\n        this.coder = coder;\n        this.length = length;\n    }\n\n    defaultValue(): Array<any> {\n        // Verifies the child coder is valid (even if the array is dynamic or 0-length)\n        const defaultChild = this.coder.defaultValue();\n\n        const result: Array<any> = [];\n        for (let i = 0; i < this.length; i++) {\n            result.push(defaultChild);\n        }\n        return result;\n    }\n\n    encode(writer: Writer, value: Array<any>): number {\n        if (!Array.isArray(value)) {\n            this._throwError(\"expected array value\", value);\n        }\n\n        let count = this.length;\n\n        if (count === -1) {\n            count = value.length;\n            writer.writeValue(value.length);\n        }\n\n        logger.checkArgumentCount(value.length, count, \"coder array\" + (this.localName? (\" \"+ this.localName): \"\"));\n\n        let coders = [];\n        for (let i = 0; i < value.length; i++) { coders.push(this.coder); }\n\n        return pack(writer, coders, value);\n    }\n\n    decode(reader: Reader): any {\n        let count = this.length;\n        if (count === -1) {\n            count = reader.readValue().toNumber();\n\n            // Check that there is *roughly* enough data to ensure\n            // stray random data is not being read as a length. Each\n            // slot requires at least 32 bytes for their value (or 32\n            // bytes as a link to the data). This could use a much\n            // tighter bound, but we are erroring on the side of safety.\n            if (count * 32 > reader._data.length) {\n                logger.throwError(\"insufficient data length\", Logger.errors.BUFFER_OVERRUN, {\n                    length: reader._data.length,\n                    count: count\n                });\n            }\n        }\n        let coders = [];\n        for (let i = 0; i < count; i++) { coders.push(new AnonymousCoder(this.coder)); }\n\n        return reader.coerce(this.name, unpack(reader, coders));\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}