{"ast":null,"code":"\"use strict\";\n\nimport _classCallCheck from \"C:/Users/kiril/Desktop/newenvai/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/kiril/Desktop/newenvai/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"C:/Users/kiril/Desktop/newenvai/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"C:/Users/kiril/Desktop/newenvai/client/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/kiril/Desktop/newenvai/client/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { showThrottleMessage } from \"./formatter\";\nimport { WebSocketProvider } from \"./websocket-provider\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\"; // This key was provided to ethers.js by Alchemy to be used by the\n// default provider, but it is recommended that for your own\n// production environments, that you acquire your own API key at:\n//   https://dashboard.alchemyapi.io\n\nvar defaultApiKey = \"_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC\";\nexport var AlchemyWebSocketProvider = /*#__PURE__*/function (_WebSocketProvider) {\n  _inherits(AlchemyWebSocketProvider, _WebSocketProvider);\n\n  var _super = _createSuper(AlchemyWebSocketProvider);\n\n  function AlchemyWebSocketProvider(network, apiKey) {\n    var _this;\n\n    _classCallCheck(this, AlchemyWebSocketProvider);\n\n    var provider = new AlchemyProvider(network, apiKey);\n    var url = provider.connection.url.replace(/^http/i, \"ws\").replace(\".alchemyapi.\", \".ws.alchemyapi.\");\n    _this = _super.call(this, url, provider.network);\n    defineReadOnly(_assertThisInitialized(_this), \"apiKey\", provider.apiKey);\n    return _this;\n  }\n\n  _createClass(AlchemyWebSocketProvider, [{\n    key: \"isCommunityResource\",\n    value: function isCommunityResource() {\n      return this.apiKey === defaultApiKey;\n    }\n  }]);\n\n  return AlchemyWebSocketProvider;\n}(WebSocketProvider);\nexport var AlchemyProvider = /*#__PURE__*/function (_UrlJsonRpcProvider) {\n  _inherits(AlchemyProvider, _UrlJsonRpcProvider);\n\n  var _super2 = _createSuper(AlchemyProvider);\n\n  function AlchemyProvider() {\n    _classCallCheck(this, AlchemyProvider);\n\n    return _super2.apply(this, arguments);\n  }\n\n  _createClass(AlchemyProvider, [{\n    key: \"isCommunityResource\",\n    value: function isCommunityResource() {\n      return this.apiKey === defaultApiKey;\n    }\n  }], [{\n    key: \"getWebSocketProvider\",\n    value: function getWebSocketProvider(network, apiKey) {\n      return new AlchemyWebSocketProvider(network, apiKey);\n    }\n  }, {\n    key: \"getApiKey\",\n    value: function getApiKey(apiKey) {\n      if (apiKey == null) {\n        return defaultApiKey;\n      }\n\n      if (apiKey && typeof apiKey !== \"string\") {\n        logger.throwArgumentError(\"invalid apiKey\", \"apiKey\", apiKey);\n      }\n\n      return apiKey;\n    }\n  }, {\n    key: \"getUrl\",\n    value: function getUrl(network, apiKey) {\n      var host = null;\n\n      switch (network.name) {\n        case \"homestead\":\n          host = \"eth-mainnet.alchemyapi.io/v2/\";\n          break;\n\n        case \"ropsten\":\n          host = \"eth-ropsten.alchemyapi.io/v2/\";\n          break;\n\n        case \"rinkeby\":\n          host = \"eth-rinkeby.alchemyapi.io/v2/\";\n          break;\n\n        case \"goerli\":\n          host = \"eth-goerli.alchemyapi.io/v2/\";\n          break;\n\n        case \"kovan\":\n          host = \"eth-kovan.alchemyapi.io/v2/\";\n          break;\n\n        case \"matic\":\n          host = \"polygon-mainnet.g.alchemy.com/v2/\";\n          break;\n\n        case \"maticmum\":\n          host = \"polygon-mumbai.g.alchemy.com/v2/\";\n          break;\n\n        case \"arbitrum\":\n          host = \"arb-mainnet.g.alchemy.com/v2/\";\n          break;\n\n        case \"arbitrum-rinkeby\":\n          host = \"arb-rinkeby.g.alchemy.com/v2/\";\n          break;\n\n        case \"optimism\":\n          host = \"opt-mainnet.g.alchemy.com/v2/\";\n          break;\n\n        case \"optimism-kovan\":\n          host = \"opt-kovan.g.alchemy.com/v2/\";\n          break;\n\n        default:\n          logger.throwArgumentError(\"unsupported network\", \"network\", arguments[0]);\n      }\n\n      return {\n        allowGzip: true,\n        url: \"https:/\" + \"/\" + host + apiKey,\n        throttleCallback: function throttleCallback(attempt, url) {\n          if (apiKey === defaultApiKey) {\n            showThrottleMessage();\n          }\n\n          return Promise.resolve(true);\n        }\n      };\n    }\n  }]);\n\n  return AlchemyProvider;\n}(UrlJsonRpcProvider);","map":{"version":3,"mappings":"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","names":["defineReadOnly","showThrottleMessage","WebSocketProvider","Logger","version","logger","UrlJsonRpcProvider","defaultApiKey","AlchemyWebSocketProvider","network","apiKey","provider","AlchemyProvider","url","connection","replace","throwArgumentError","host","name","arguments","allowGzip","throttleCallback","attempt","Promise","resolve"],"sources":["C:\\Users\\kiril\\Desktop\\newenvai\\client\\node_modules\\@ethersproject\\providers\\src.ts\\alchemy-provider.ts"],"sourcesContent":["\"use strict\";\n\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { ConnectionInfo } from \"@ethersproject/web\";\n\nimport { CommunityResourcable, showThrottleMessage } from \"./formatter\";\nimport { WebSocketProvider } from \"./websocket-provider\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n\n// This key was provided to ethers.js by Alchemy to be used by the\n// default provider, but it is recommended that for your own\n// production environments, that you acquire your own API key at:\n//   https://dashboard.alchemyapi.io\n\nconst defaultApiKey = \"_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC\"\n\nexport class AlchemyWebSocketProvider extends WebSocketProvider implements CommunityResourcable {\n    readonly apiKey: string;\n\n    constructor(network?: Networkish, apiKey?: any) {\n        const provider = new AlchemyProvider(network, apiKey);\n\n        const url = provider.connection.url.replace(/^http/i, \"ws\")\n                                           .replace(\".alchemyapi.\", \".ws.alchemyapi.\");\n\n        super(url, provider.network);\n        defineReadOnly(this, \"apiKey\", provider.apiKey);\n    }\n\n    isCommunityResource(): boolean {\n        return (this.apiKey === defaultApiKey);\n    }\n}\n\nexport class AlchemyProvider extends UrlJsonRpcProvider {\n\n    static getWebSocketProvider(network?: Networkish, apiKey?: any): AlchemyWebSocketProvider {\n        return new AlchemyWebSocketProvider(network, apiKey);\n    }\n\n    static getApiKey(apiKey: any): any {\n        if (apiKey == null) { return defaultApiKey; }\n        if (apiKey && typeof(apiKey) !== \"string\") {\n            logger.throwArgumentError(\"invalid apiKey\", \"apiKey\", apiKey);\n        }\n        return apiKey;\n    }\n\n    static getUrl(network: Network, apiKey: string): ConnectionInfo {\n        let host = null;\n        switch (network.name) {\n            case \"homestead\":\n                host = \"eth-mainnet.alchemyapi.io/v2/\";\n                break;\n            case \"ropsten\":\n                host = \"eth-ropsten.alchemyapi.io/v2/\";\n                break;\n            case \"rinkeby\":\n                host = \"eth-rinkeby.alchemyapi.io/v2/\";\n                break;\n            case \"goerli\":\n                host = \"eth-goerli.alchemyapi.io/v2/\";\n                break;\n            case \"kovan\":\n                host = \"eth-kovan.alchemyapi.io/v2/\";\n                break;\n            case \"matic\":\n                host = \"polygon-mainnet.g.alchemy.com/v2/\";\n                break;\n            case \"maticmum\":\n                host = \"polygon-mumbai.g.alchemy.com/v2/\";\n                break;\n            case \"arbitrum\":\n                host = \"arb-mainnet.g.alchemy.com/v2/\";\n                break;\n            case \"arbitrum-rinkeby\":\n                host = \"arb-rinkeby.g.alchemy.com/v2/\";\n                break;\n            case \"optimism\":\n                host = \"opt-mainnet.g.alchemy.com/v2/\";\n                break;\n            case \"optimism-kovan\":\n                host = \"opt-kovan.g.alchemy.com/v2/\";\n                break;\n            default:\n               logger.throwArgumentError(\"unsupported network\", \"network\", arguments[0]);\n        }\n\n        return {\n            allowGzip: true,\n            url: (\"https:/\" + \"/\" + host + apiKey),\n            throttleCallback: (attempt: number, url: string) => {\n                if (apiKey === defaultApiKey) {\n                    showThrottleMessage();\n                }\n                return Promise.resolve(true);\n            }\n        };\n    }\n\n    isCommunityResource(): boolean {\n        return (this.apiKey === defaultApiKey);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}