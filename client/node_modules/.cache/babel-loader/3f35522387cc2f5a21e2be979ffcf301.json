{"ast":null,"code":"\"use strict\";\n\nimport _classCallCheck from \"C:/Users/kiril/Desktop/newenvai/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/kiril/Desktop/newenvai/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/kiril/Desktop/newenvai/client/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/kiril/Desktop/newenvai/client/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { getStatic } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\"; // These are load-balancer-based application IDs\n\nvar defaultApplicationIds = {\n  homestead: \"6004bcd10040261633ade990\",\n  ropsten: \"6004bd4d0040261633ade991\",\n  rinkeby: \"6004bda20040261633ade994\",\n  goerli: \"6004bd860040261633ade992\"\n};\nexport var PocketProvider = /*#__PURE__*/function (_UrlJsonRpcProvider) {\n  _inherits(PocketProvider, _UrlJsonRpcProvider);\n\n  var _super = _createSuper(PocketProvider);\n\n  function PocketProvider(network, apiKey) {\n    _classCallCheck(this, PocketProvider);\n\n    // We need a bit of creativity in the constructor because\n    // Pocket uses different default API keys based on the network\n    if (apiKey == null) {\n      var n = getStatic(this instanceof PocketProvider ? this.constructor : void 0, \"getNetwork\")(network);\n\n      if (n) {\n        var applicationId = defaultApplicationIds[n.name];\n\n        if (applicationId) {\n          apiKey = {\n            applicationId: applicationId,\n            loadBalancer: true\n          };\n        }\n      } // If there was any issue above, we don't know this network\n\n\n      if (apiKey == null) {\n        logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n          argument: \"network\",\n          value: network\n        });\n      }\n    }\n\n    return _super.call(this, network, apiKey);\n  }\n\n  _createClass(PocketProvider, [{\n    key: \"isCommunityResource\",\n    value: function isCommunityResource() {\n      return this.applicationId === defaultApplicationIds[this.network.name];\n    }\n  }], [{\n    key: \"getApiKey\",\n    value: function getApiKey(apiKey) {\n      // Most API Providers allow null to get the default configuration, but\n      // Pocket requires the network to decide the default provider, so we\n      // rely on hijacking the constructor to add a sensible default for us\n      if (apiKey == null) {\n        logger.throwArgumentError(\"PocketProvider.getApiKey does not support null apiKey\", \"apiKey\", apiKey);\n      }\n\n      var apiKeyObj = {\n        applicationId: null,\n        loadBalancer: false,\n        applicationSecretKey: null\n      }; // Parse applicationId and applicationSecretKey\n\n      if (typeof apiKey === \"string\") {\n        apiKeyObj.applicationId = apiKey;\n      } else if (apiKey.applicationSecretKey != null) {\n        logger.assertArgument(typeof apiKey.applicationId === \"string\", \"applicationSecretKey requires an applicationId\", \"applicationId\", apiKey.applicationId);\n        logger.assertArgument(typeof apiKey.applicationSecretKey === \"string\", \"invalid applicationSecretKey\", \"applicationSecretKey\", \"[REDACTED]\");\n        apiKeyObj.applicationId = apiKey.applicationId;\n        apiKeyObj.applicationSecretKey = apiKey.applicationSecretKey;\n        apiKeyObj.loadBalancer = !!apiKey.loadBalancer;\n      } else if (apiKey.applicationId) {\n        logger.assertArgument(typeof apiKey.applicationId === \"string\", \"apiKey.applicationId must be a string\", \"apiKey.applicationId\", apiKey.applicationId);\n        apiKeyObj.applicationId = apiKey.applicationId;\n        apiKeyObj.loadBalancer = !!apiKey.loadBalancer;\n      } else {\n        logger.throwArgumentError(\"unsupported PocketProvider apiKey\", \"apiKey\", apiKey);\n      }\n\n      return apiKeyObj;\n    }\n  }, {\n    key: \"getUrl\",\n    value: function getUrl(network, apiKey) {\n      var host = null;\n\n      switch (network ? network.name : \"unknown\") {\n        case \"homestead\":\n          host = \"eth-mainnet.gateway.pokt.network\";\n          break;\n\n        case \"ropsten\":\n          host = \"eth-ropsten.gateway.pokt.network\";\n          break;\n\n        case \"rinkeby\":\n          host = \"eth-rinkeby.gateway.pokt.network\";\n          break;\n\n        case \"goerli\":\n          host = \"eth-goerli.gateway.pokt.network\";\n          break;\n\n        default:\n          logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n            argument: \"network\",\n            value: network\n          });\n      }\n\n      var url = null;\n\n      if (apiKey.loadBalancer) {\n        url = \"https://\".concat(host, \"/v1/lb/\").concat(apiKey.applicationId);\n      } else {\n        url = \"https://\".concat(host, \"/v1/\").concat(apiKey.applicationId);\n      }\n\n      var connection = {\n        url: url\n      }; // Initialize empty headers\n\n      connection.headers = {}; // Apply application secret key\n\n      if (apiKey.applicationSecretKey != null) {\n        connection.user = \"\";\n        connection.password = apiKey.applicationSecretKey;\n      }\n\n      return connection;\n    }\n  }]);\n\n  return PocketProvider;\n}(UrlJsonRpcProvider);","map":{"version":3,"mappings":"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","names":["getStatic","Logger","version","logger","UrlJsonRpcProvider","defaultApplicationIds","homestead","ropsten","rinkeby","goerli","PocketProvider","network","apiKey","n","applicationId","name","loadBalancer","throwError","errors","INVALID_ARGUMENT","argument","value","throwArgumentError","apiKeyObj","applicationSecretKey","assertArgument","host","url","connection","headers","user","password"],"sources":["C:\\Users\\kiril\\Desktop\\newenvai\\client\\node_modules\\@ethersproject\\providers\\src.ts\\pocket-provider.ts"],"sourcesContent":["\"use strict\";\n\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { getStatic } from \"@ethersproject/properties\";\nimport { ConnectionInfo } from \"@ethersproject/web\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n\n// These are load-balancer-based application IDs\nconst defaultApplicationIds: Record<string, string> = {\n    homestead: \"6004bcd10040261633ade990\",\n    ropsten: \"6004bd4d0040261633ade991\",\n    rinkeby: \"6004bda20040261633ade994\",\n    goerli: \"6004bd860040261633ade992\",\n};\n\nexport class PocketProvider extends UrlJsonRpcProvider {\n    readonly applicationId: string;\n    readonly applicationSecretKey: string;\n    readonly loadBalancer: boolean;\n\n    constructor(network?: Networkish, apiKey?: any) {\n        // We need a bit of creativity in the constructor because\n        // Pocket uses different default API keys based on the network\n\n        if (apiKey == null) {\n            const n = getStatic<(network: Networkish) => Network>(new.target, \"getNetwork\")(network);\n            if (n) {\n                const applicationId = defaultApplicationIds[n.name];\n                if (applicationId) {\n                    apiKey = {\n                        applicationId: applicationId,\n                        loadBalancer: true\n                    };\n                }\n            }\n\n            // If there was any issue above, we don't know this network\n            if (apiKey == null) {\n                logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"network\",\n                    value: network\n                });\n            }\n\n        }\n\n        super(network, apiKey);\n    }\n\n    static getApiKey(apiKey: any): any {\n        // Most API Providers allow null to get the default configuration, but\n        // Pocket requires the network to decide the default provider, so we\n        // rely on hijacking the constructor to add a sensible default for us\n\n        if (apiKey == null) {\n            logger.throwArgumentError(\"PocketProvider.getApiKey does not support null apiKey\", \"apiKey\", apiKey);\n        }\n\n        const apiKeyObj: { applicationId: string, applicationSecretKey: string, loadBalancer: boolean } = {\n            applicationId: null,\n            loadBalancer: false,\n            applicationSecretKey: null\n        };\n\n        // Parse applicationId and applicationSecretKey\n        if (typeof (apiKey) === \"string\") {\n            apiKeyObj.applicationId = apiKey;\n\n        } else if (apiKey.applicationSecretKey != null) {\n            logger.assertArgument((typeof (apiKey.applicationId) === \"string\"),\n                \"applicationSecretKey requires an applicationId\", \"applicationId\", apiKey.applicationId);\n            logger.assertArgument((typeof (apiKey.applicationSecretKey) === \"string\"),\n                \"invalid applicationSecretKey\", \"applicationSecretKey\", \"[REDACTED]\");\n\n            apiKeyObj.applicationId = apiKey.applicationId;\n            apiKeyObj.applicationSecretKey = apiKey.applicationSecretKey;\n            apiKeyObj.loadBalancer = !!apiKey.loadBalancer;\n\n        } else if (apiKey.applicationId) {\n            logger.assertArgument((typeof (apiKey.applicationId) === \"string\"),\n                \"apiKey.applicationId must be a string\", \"apiKey.applicationId\", apiKey.applicationId);\n\n            apiKeyObj.applicationId = apiKey.applicationId;\n            apiKeyObj.loadBalancer = !!apiKey.loadBalancer;\n\n        } else {\n            logger.throwArgumentError(\"unsupported PocketProvider apiKey\", \"apiKey\", apiKey);\n        }\n\n        return apiKeyObj;\n    }\n\n    static getUrl(network: Network, apiKey: any): ConnectionInfo {\n        let host: string = null;\n        switch (network ? network.name : \"unknown\") {\n            case \"homestead\":\n                host = \"eth-mainnet.gateway.pokt.network\";\n                break;\n            case \"ropsten\":\n                host = \"eth-ropsten.gateway.pokt.network\";\n                break;\n            case \"rinkeby\":\n                host = \"eth-rinkeby.gateway.pokt.network\";\n                break;\n            case \"goerli\":\n                host = \"eth-goerli.gateway.pokt.network\";\n                break;\n            default:\n                logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"network\",\n                    value: network\n                });\n        }\n\n        let url = null;\n        if (apiKey.loadBalancer) {\n            url = `https:/\\/${ host }/v1/lb/${ apiKey.applicationId }`\n        } else {\n            url = `https:/\\/${ host }/v1/${ apiKey.applicationId }`\n        }\n\n        const connection: ConnectionInfo = { url };\n\n        // Initialize empty headers\n        connection.headers = {}\n\n        // Apply application secret key\n        if (apiKey.applicationSecretKey != null) {\n            connection.user = \"\";\n            connection.password = apiKey.applicationSecretKey\n        }\n\n        return connection;\n    }\n\n    isCommunityResource(): boolean {\n        return (this.applicationId === defaultApplicationIds[this.network.name]);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}